from aiogram.exceptions import TelegramBadRequest
from certifi import where
from sqlalchemy.orm import selectinload
from aiogram import F, Router, Bot, types
from aiogram.filters import CommandStart, Command
from aiogram.filters.command import CommandObject
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.future import select
import logging
from quart import Quart
from datetime import datetime, date, time, timedelta
import pytz
from sqlalchemy import delete, update, func, desc, or_
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton,
                           InlineKeyboardMarkup, InlineKeyboardButton)
import time as std_time
from email.utils import formataddr
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
import aiohttp
import ssl
import asyncio
import re
from collections import defaultdict
from email.utils import encode_rfc2231
import math

from app.database.models import User, Beat, Email, async_session, Group, Settings, OneTimeSettings
from config import ADMIN_ID
import app.database.requests as rq
import app.keyboards as kb

rt = Router()
app = Quart(__name__)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

CLIENT_SECRET_FILE = 'client_secret.json'
SCOPES = ['https://www.googleapis.com/auth/gmail.send']
TOKEN_PICKLE = 'token.pickle'

class UserState(StatesGroup):
    waiting_for_gmail = State()
    waiting_for_password = State()
    waiting_for_emails = State()
    waiting_for_delete_emails = State()
    waiting_for_delete_beat = State()
    waiting_for_user_identifier_subscription = State()
    waiting_for_subscription_days = State()
    waiting_for_user_identifier_check = State()
    waiting_for_subscription_type = State()
    waiting_for_page_number = State()
    waiting_for_page_number_beats = State()
    waiting_for_page_number_beats_delete = State()
    waiting_for_interval = State()
    waiting_for_one_time_interval = State()
    waiting_for_main_time_choise = State()
    waiting_for_onetime_choise = State()
    waiting_admin_for_all = State()
    waiting_admin_for_premium = State()
    waiting_admin_for_basic = State()
    waiting_admin_for_free = State()
    waiting_for_promo_name = State()
    waiting_for_duration = State()
    waiting_for_promo_info = State()
    waiting_for_max_uses = State()
    waiting_for_search_username = State()
    waiting_for_promo_code = State()
class GroupState(StatesGroup):
    waiting_for_group_name = State()
    waiting_for_group_delete = State()
    waiting_for_email = State()
    waiting_for_beat = State()
    editing_subject = State()
    editing_message = State()
    editing_send_time = State()
    editing_quantity_beat = State()
    periodicity = State()
    waiting_for_group_name_swap = State()
    renaming_group = State()
    editing_one_time_subject = State()
    editing_one_time_message = State()
    editing_one_time_time = State()
    editing_one_time_quantity = State()
class FSMEmail(StatesGroup):
    awaiting_email = State()
    awaiting_subject = State()
    awaiting_message = State()
    awaiting_beats = State()
    confirming = State()
    awaiting_text = State()
    deleting_emails = State()
user_data = {}

def is_admin(user_id):
    return user_id in ADMIN_ID

@rt.message(CommandStart(deep_link=True))
async def cmd_start_deeplink(message: Message, command: CommandObject, bot: Bot):
    user_id = message.from_user.id
    args = command.args

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if not user or user.gmail == '–Ω–µ —É–∫–∞–∑–∞–Ω–æ':
            referrer_id = int(args.split('_')[1]) if args and args.startswith('ref_') else None
            print(referrer_id if referrer_id else "False")
            await rq.set_user(message.from_user.id, message.from_user.username)
            async with async_session() as session:
                result = await session.execute(select(User).filter(User.user_id == user_id))
                user = result.scalar_one_or_none()


                if referrer_id and not user.used_referral:
                    user.referrer_id = referrer_id
                    user.referral_discount_expire = datetime.now() + timedelta(days=14)
                    user.used_referral = bool(referrer_id)
                    ref_result = await session.execute(select(User).filter(User.user_id == user.referrer_id))
                    referrer = ref_result.scalar_one_or_none()
                    if referrer:
                        for admin_id in ADMIN_ID:
                            await bot.send_message(
                                admin_id,
                                f"@{user.username} –ø–µ—Ä–µ—à–µ–ª –æ—Ç @{referrer.username}",
                                parse_mode="HTML"
                            )

                session.add(user)
                await session.commit()
        await cmd_start(message)

@rt.message(CommandStart())
async def cmd_start(message: Message):
    await rq.set_user(message.from_user.id, message.from_user.username)
    user_id = message.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            if user.block:  
                try:
                    if user.language == 2:
                        await message.answer(
                            '<strong>ü™´ Your subscription has ended!</strong> Mailing has been paused.\n\n'
                            'To continue using the service, choose an action using the buttons below:',
                            parse_mode='HTML', reply_markup=kb.end_sub_eng
                        )  
                    else:
                        await message.answer(
                            '<strong>ü™´ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å!</strong> –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n\n'
                            '–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:',
                            parse_mode='HTML', reply_markup=kb.end_sub
                            )
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                if user.language == 0:
                    await  message.answer('<strong>Choose language | –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫</strong>', parse_mode='HTML',
                                          reply_markup=kb.choice_lang)
                elif user.language == 1:
                    await message.answer(f'<strong>üëãüèª –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!</strong>\n\n'
                                         f'üì® <strong>Be Twin ‚Äî —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π email-—Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –±–∏—Ç–º–µ–π–∫–µ—Ä–æ–≤</strong>\n\n'
                                         f'<a href="https://telegra.ph/Logistika-i-eyo-sekrety-09-24">–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Be Twin?</a> | '
                                         f'<a href="https://t.me/urtwinews">Be Twin News</a>',
                                         parse_mode='HTML', disable_web_page_preview=True, reply_markup=kb.start)
                else:
                    await message.answer(f'<strong>üëãüèª Hi, {message.from_user.first_name}!</strong>\n\n'
                                         f'üì® <strong>Be Twin is an automated email marketing service for beatmakers</strong>\n\n'
                                         f'<a href="https://telegra.ph/Logistika-i-eyo-sekrety-09-24">How does Be Twin work?</a> | '
                                         f'<a href="https://t.me/urtwinews">Be Twin News</a>',
                                         parse_mode='HTML', disable_web_page_preview=True, reply_markup=kb.start_eng)

@rt.callback_query(F.data.in_(['eng', 'rus']))
async def choice_language(callback: CallbackQuery):
    user_id = callback.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if callback.data == 'eng':
            await callback.answer('üá∫üá∏ English')
            user.language = 2
            await callback.message.answer(f'<strong>üëãüèª Hi, {callback.from_user.first_name}!</strong>\n\n'
                                 f'üì® <strong>Be Twin is an automated email marketing service for beatmakers</strong>\n\n'
                                 f'<a href="https://telegra.ph/Logistika-i-eyo-sekrety-09-24">How does Be Twin work?</a> | '
                                 f'<a href="https://t.me/urtwinews">Be Twin News</a>',
                                 parse_mode='HTML', disable_web_page_preview=True, reply_markup=kb.start_eng)
            if user.used_referral and not user.subscription_start and user.gmail == '–Ω–µ —É–∫–∞–∑–∞–Ω–æ':
                await callback.message.answer(
                    '<b>You followed a referral link ‚Äî this means, according to our rules, you get a 20% discount on any subscription</b>\n\n'
                    '<b>‚ùóÔ∏èImportant:</b> <u>the discount is valid for only 2 weeks</u>, and if you follow another referral link, the discount will become unavailable to you.\n\n'
                    'You can see the discount after registration in the "üéü <b>Subscription</b>" section\n\n\n'
                    '<b>Real results of Be Twin users:</b>\n\n'
                    ' ‚Ä¢ $1600 per month ‚Äî passively via the bot‚Äôs automatic mailings\n'
                    ' ‚Ä¢ Over $400 monthly for a year and longer\n'
                    ' ‚Ä¢ Up to $600 per single deal\n\n\n'
                    '<b>We operate as transparently as possible:</b>\n\n'
                    'üë§ The creator and main administrator @nemxxo ‚Äî a chart-topping producer with tens of millions '
                    'of streams, a proven reputation, and many years of industry experience.\n\n'
                    'For any questions about the service, you can directly message him @xxx',
                    parse_mode='HTML'
                )

        else:
            await callback.answer('üá∑üá∫ –†—É—Å—Å–∫–∏–π')
            user.language = 1

            await callback.message.answer(f'<strong>üëãüèª –ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}!</strong>\n\n'
                                 f'üì® <strong>Be Twin ‚Äî —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π email-—Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –±–∏—Ç–º–µ–π–∫–µ—Ä–æ–≤</strong>\n\n'
                                 f'<a href="https://telegra.ph/Logistika-i-eyo-sekrety-09-24">–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Be Twin?</a> | '
                                 f'<a href="https://t.me/urtwinews">Be Twin News</a>',
                                 parse_mode='HTML', disable_web_page_preview=True, reply_markup=kb.start)
            if user.used_referral and not user.subscription_start and user.gmail == '–Ω–µ —É–∫–∞–∑–∞–Ω–æ':
                await callback.message.answer(
                    '<b>–í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ ‚Äî —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –ø–æ –Ω–∞—à–∏–º –ø—Ä–∞–≤–∏–ª–∞–º –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–∫–∏–¥–∫—É 20% –Ω–∞ –ª—é–±—É—é –ø–æ–¥–ø–∏—Å–∫—É</b>\n\n'
                    '<b>‚ùóÔ∏è–í–∞–∂–Ω–æ:</b> <u>—Å–∫–∏–¥–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ 2 –Ω–µ–¥–µ–ª–∏</u>, –∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ –¥—Ä—É–≥–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ —Å–∫–∏–¥–∫–∞ —Å—Ç–∞–Ω–µ—Ç –¥–ª—è –≤–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n'
                    '–°–∫–∏–¥–∫—É –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´üéü <b>–ü–æ–¥–ø–∏—Å–∫–∞</b>¬ª\n\n\n'
                    '<b>–†–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Be Twin:</b>\n\n'
                    ' ‚Ä¢ $1600 –∑–∞ –º–µ—Å—è—Ü ‚Äî –ø–∞—Å—Å–∏–≤–Ω–æ —á–µ—Ä–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –±–æ—Ç–∞\n'
                    ' ‚Ä¢ –ë–æ–ª–µ–µ $400 –µ–∂–µ–º–µ—Å—è—á–Ω–æ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≥–æ–¥–∞ –∏ –¥–æ–ª—å—à–µ\n'
                    ' ‚Ä¢ –î–æ $600 –∑–∞ –æ–¥–Ω—É —Å–¥–µ–ª–∫—É\n\n\n'
                    '<b>–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ:</b>\n\n'
                    'üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å –∏ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @nemxxo ‚Äî –ø—Ä–æ–¥—é—Å–µ—Ä —Ç–æ–ø–æ–≤—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤ –∏ —Ç—Ä–µ–∫–æ–≤-–º–∏–ª–ª–∏–æ–Ω–Ω–∏–∫–æ–≤, '
                    '—Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–π —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π –∏ –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏. \n\n'
                    '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ —Å–µ—Ä–≤–∏—Å–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø—Ä—è–º—É—é –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @xxx',
                    parse_mode='HTML')
        await session.commit()


@rt.message(Command("restart"))
async def restart(message: Message):
    await cmd_start(message)

@rt.message(Command('apanel'))
async def apanel(message: Message):
    if is_admin(message.from_user.id):
        await message.answer('<strong>–í–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</strong>', reply_markup=kb.adm_start, parse_mode='HTML')

#–í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏ admin
@rt.callback_query(F.data == 'sub')
async def start_subscription(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    if not is_admin(user_id):
        await callback.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", reply_markup=kb.adm_back)
        return

    await state.set_state(UserState.waiting_for_user_identifier_subscription)
    await callback.answer('üéüÔ∏è –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ @username, ID –∏–ª–∏ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                                     reply_markup=kb.adm_back)
@rt.message(UserState.waiting_for_user_identifier_subscription)
async def get_user_identifier(message: Message, state: FSMContext):
    identifier = message.text.strip()
    user = None

    async with async_session() as session:
        if identifier.startswith('@'):
            username = identifier[1:]
            result = await session.execute(select(User).filter(User.username == username))
        elif identifier.isdigit():
            result = await session.execute(select(User).filter(User.user_id == int(identifier)))
        elif '@' in identifier:
            result = await session.execute(select(User).filter(User.gmail == identifier))
        else:
            await message.answer("<strong>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @username, ID –∏–ª–∏ email</strong>", reply_markup=kb.adm_back, parse_mode='HTML')
            return

        user = result.scalar_one_or_none()

        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=kb.adm_back)
            return

        await state.update_data(user_identifier=identifier, user_id=user.user_id)

    await state.set_state(UserState.waiting_for_subscription_type)
    await message.answer(f"<strong>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</strong> {identifier}",
                         reply_markup=kb.premium_basic, parse_mode='HTML')
@rt.callback_query(F.data.in_(['give_premium', 'give_basic']))
async def set_subscription_type(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data['user_id']
    type_ = 'premium' if callback.data == 'give_premium' else 'basic'

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            user.mails_per_day = 450
            user.extra_mail = 50
            await state.update_data(subscription_type=type_)  
            await callback.message.edit_text(
                f"<strong>–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞</strong> {user.subscription}. <strong>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:</strong>",
                reply_markup=kb.adm_add, parse_mode='HTML')

        else:
            await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=kb.adm_back)

        await session.commit()

    await state.set_state(UserState.waiting_for_subscription_days)
@rt.callback_query(F.data == 'adm_give')
async def give_30_days(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    input_data = data.get('user_identifier')
    user_id = data['user_id']
    new_subscription = data.get('subscription_type')
    days = 30

    if not input_data:
        await callback.message.edit_text("–ù–µ —É–∫–∞–∑–∞–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=kb.adm_back)
        return

    async with async_session() as session:
        user = None

        if input_data.startswith('@'):
            result = await session.execute(select(User).filter(User.username == input_data[1:]))
        elif input_data.isdigit():
            result = await session.execute(select(User).filter(User.user_id == int(input_data)))
        elif '@' in input_data:
            result = await session.execute(select(User).filter(User.gmail == input_data))
        else:
            await callback.message.edit_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞.", reply_markup=kb.adm_back)
            return

        user = result.scalar_one_or_none()

        if user:
            if user.subscription == new_subscription:
                user.subscription_day += days
            else:
                user.subscription_day = days

            user.subscription = new_subscription
            user.block = False
            if user.referrals >= 1 and user.referral_discount > 0:
                user.referral_discount = 0

            if user.active_promo_code:
                promo_info = await rq.get_promo_info(session, user.active_promo_code)

                if promo_info and promo_info.subscription_type in ["basic", "basic+premium"] and new_subscription == 'basic':
                    user.active_promo_code = None
                    user.promo_expiration = None
                    user.notified_one_day = False

                elif promo_info and promo_info.subscription_type in ["premium", "basic+premium"] and new_subscription == "premium":
                    user.active_promo_code = None
                    user.promo_expiration = None
                    user.notified_one_day = False
            label = f"@{user.username}" if user.username else user.gmail or str(user.user_id)
            if user.used_referral and not user.subscription_start:
                if user.referrer_id:
                    ref_result = await session.execute(select(User).filter(User.user_id == user.referrer_id))
                    referrer = ref_result.scalar_one_or_none()

                    if referrer:
                        current_value = referrer.referral_discount
                        add_value = 20 if referrer.referrals in [0, 1, 2, 3, 4, 5] else 30 if referrer.referrals in [6, 7, 8, 9, 10] else 50
                        referrer.referral_discount = min(current_value + add_value, 100)

                        referrer.referrals += 1
                        if referrer.notifications_sub:
                            if referrer.language == 2:
                                await bot.send_message(
                                    referrer.user_id,
                                    f"<b>üí∞ Your referral has subscribed to Be Twin</b>\n\n"
                                    f"You have received a "
                                    f"{20 if referrer.referrals in [0, 1, 2, 3, 4, 5] else 30 if referrer.referrals in [6, 7, 8, 9, 10] else 50}% "
                                    f"discount on any subscription",
                                    parse_mode="HTML", reply_markup=kb.turn_off_notifications_eng_sub
                                )
                            else:
                                await bot.send_message(
                                    referrer.user_id,
                                    f"<b>üí∞ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –æ—Ñ–æ—Ä–º–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –≤ Be Twin</b>\n\n"
                                    f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–∞ "
                                    f"{20 if referrer.referrals in [0, 1, 2, 3, 4, 5] else 30 if referrer.referrals in [6, 7, 8, 9, 10] else 50}% "
                                    f"—Å–∫–∏–¥–∫–∞ –Ω–∞ –ª—é–±—É—é –ø–æ–¥–ø–∏—Å–∫—É", parse_mode="HTML", reply_markup=kb.turn_off_notifications_sub
                                )
            if user.used_referral and user.subscription_start:
                if user.referrer_id:
                    ref_result = await session.execute(select(User).filter(User.user_id == user.referrer_id))
                    referrer = ref_result.scalar_one_or_none()

                    if referrer:
                        current_value = referrer.referral_discount
                        add_value = 5
                        referrer.referral_discount = min(current_value + add_value, 100)

                        if referrer.language == 2:
                            await bot.send_message(
                                referrer.user_id,
                                f"<b>üí∞ Your referral has renewed their subscription in Be Twin</b>\n\n"
                                f"You have received a "
                                f"5% discount on any subscription",
                                parse_mode="HTML"
                            )
                        else:
                            await bot.send_message(
                                referrer.user_id,
                                f"<b>üí∞ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –ø—Ä–æ–¥–ª–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –≤ Be Twin</b>\n\n"
                                f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–∞ "
                                f"5% —Å–∫–∏–¥–∫–∞ –Ω–∞ –ª—é–±—É—é –ø–æ–¥–ø–∏—Å–∫—É", parse_mode="HTML"
                            )

            user.subscription_start = datetime.now(pytz.timezone('Europe/Moscow'))
            user.referral_discount_expire = None
            await callback.message.edit_text(
                f"<strong>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</strong> {label} <strong>—É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.</strong> \n\n"
                f"<strong>–ü–æ–¥–ø–∏—Å–∫–∞:</strong> {user.subscription} \n"
                f"<strong>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:</strong> {user.subscription_day}",
                reply_markup=kb.adm_start, parse_mode="HTML"
            )
        else:
            await callback.message.edit_text(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º {input_data} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ",
                reply_markup=kb.adm_back
            )

        await session.commit()

    await state.clear()
@rt.message(UserState.waiting_for_subscription_days)
async def get_subscription_days(message: Message, state: FSMContext, bot: Bot):
    try:
        days = int(message.text.strip())
    except ValueError:
        await message.answer("<strong>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π</strong>", reply_markup=kb.adm_add, parse_mode='HTML')
        return

    data = await state.get_data()
    user_id = data['user_id']
    new_subscription = data.get('subscription_type')

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            if user.subscription == new_subscription:
                user.subscription_day += days
            else:
                user.subscription_day = days

            user.subscription = new_subscription
            user.block = False
            if user.referrals >= 1 and user.referral_discount > 0 and days >= 30:
                user.referral_discount = 0

            if user.active_promo_code:
                promo_info = await rq.get_promo_info(session, user.active_promo_code)

                if promo_info and promo_info.subscription_type in ["basic", "basic+premium"] and new_subscription == 'basic':
                    user.active_promo_code = None
                    user.promo_expiration = None
                    user.notified_one_day = False

                elif promo_info and promo_info.subscription_type in ["premium", "basic+premium"] and new_subscription == "premium":
                    user.active_promo_code = None
                    user.promo_expiration = None
                    user.notified_one_day = False
            if user.used_referral and not user.subscription_start:
                if user.referrer_id:
                    ref_result = await session.execute(select(User).filter(User.user_id == user.referrer_id))
                    referrer = ref_result.scalar_one_or_none()

                    if referrer:
                        current_value = referrer.referral_discount
                        add_value = 20 if referrer.referrals in [0, 1, 2, 3, 4, 5] else 30 if referrer.referrals in [10, 6,
                                                                                                                     7,
                                                                                                                     8,
                                                                                                                     9] else 50
                        referrer.referral_discount = min(current_value + add_value, 100)
                        referrer.referrals += 1
                        if referrer.notifications_sub:
                            if referrer.language == 2:
                                await bot.send_message(
                                    referrer.user_id,
                                    f"<b>üí∞ Your referral has subscribed to Be Twin</b>\n\n"
                                    f"You have received a "
                                    f"{20 if referrer.referrals in [0, 1, 2, 3, 4, 5] else 30 if referrer.referrals in [6, 7, 8, 9, 10] else 50}% "
                                    f"discount on any subscription",
                                    parse_mode="HTML", reply_markup=kb.turn_off_notifications_eng_sub
                                )
                            else:
                                await bot.send_message(
                                    referrer.user_id,
                                    f"<b>üí∞ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –æ—Ñ–æ—Ä–º–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –≤ Be Twin</b>\n\n"
                                    f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–∞ "
                                    f"{20 if referrer.referrals in [0, 1, 2, 3, 4, 5] else 30 if referrer.referrals in [6, 7, 8, 9, 10] else 50}% "
                                    f"—Å–∫–∏–¥–∫–∞ –Ω–∞ –ª—é–±—É—é –ø–æ–¥–ø–∏—Å–∫—É", parse_mode="HTML", reply_markup=kb.turn_off_notifications_sub
                                )
            if user.used_referral and user.subscription_start and days >= 30:
                if user.referrer_id:
                    ref_result = await session.execute(select(User).filter(User.user_id == user.referrer_id))
                    referrer = ref_result.scalar_one_or_none()

                    if referrer:
                        current_value = referrer.referral_discount
                        add_value = 5
                        referrer.referral_discount = min(current_value + add_value, 100)

                        if referrer.language == 2:
                            await bot.send_message(
                                referrer.user_id,
                                f"<b>üí∞ Your referral has renewed their subscription in Be Twin</b>\n\n"
                                f"You have received a "
                                f"5% discount on any subscription",
                                parse_mode="HTML"
                            )
                        else:
                            await bot.send_message(
                                referrer.user_id,
                                f"<b>üí∞ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –ø—Ä–æ–¥–ª–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –≤ Be Twin</b>\n\n"
                                f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–∞ "
                                f"5% —Å–∫–∏–¥–∫–∞ –Ω–∞ –ª—é–±—É—é –ø–æ–¥–ø–∏—Å–∫—É", parse_mode="HTML"
                            )
            user.referral_discount_expire = None
            user.subscription_start = datetime.now(pytz.timezone('Europe/Moscow'))
            await message.answer(
                f"<strong>–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.</strong> \n\n"
                f"<strong>–ü–æ–¥–ø–∏—Å–∫–∞:</strong> {user.subscription} \n"
                f"<strong>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:</strong> {user.subscription_day}",
                reply_markup=kb.adm_start, parse_mode="HTML"
            )
        else:
            await message.answer("<strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</strong>", reply_markup=kb.adm_back, parse_mode='HTML')

        await session.commit()

    await state.clear()
@rt.callback_query(F.data == 'gsub')
async def check_subscription_request(callback: CallbackQuery, state: FSMContext):
    await callback.answer('ü™™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
    await callback.message.edit_text("<strong>–í–≤–µ–¥–∏—Ç–µ @username, ID –∏–ª–∏ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</strong>",
                                     reply_markup=kb.adm_back, parse_mode='HTML')
    await state.set_state(UserState.waiting_for_user_identifier_check)
@rt.message(UserState.waiting_for_user_identifier_check)
async def get_user_subscription(message: Message, state: FSMContext):
    identifier = message.text.strip()
    user = None

    async with async_session() as session:
        if identifier.startswith('@'):
            result = await session.execute(select(User).filter(User.username == identifier[1:]))
        elif identifier.isdigit():
            result = await session.execute(select(User).filter(User.user_id == int(identifier)))
        elif '@' in identifier:
            result = await session.execute(select(User).filter(User.gmail == identifier))
        else:
            await message.answer("<strong>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @username, ID –∏–ª–∏ email<strong>", reply_markup=kb.adm_back, parse_mode='HTML')
            return

        user = result.scalar_one_or_none()

        if user:
            await message.answer(f"<strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> {user.username or user.gmail}\n"
                                 f"<strong>–ü–æ–¥–ø–∏—Å–∫–∞:</strong> {user.subscription or '–Ω–µ—Ç'}\n"
                                 f"<strong>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</strong> {user.subscription_day}",
                                 reply_markup=kb.adm_start, parse_mode="HTML")
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=kb.adm_back)

    await state.clear()

@rt.callback_query(F.data == 'mail_2_sub')
async def mail(callback: CallbackQuery):
    await callback.answer('üì™ –†–∞—Å—Å—ã–ª–∫–∞')
    await callback.message.edit_text('<strong>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞—Å—Å—ã–ª–∫–∏:</strong>', parse_mode='HTML',
                                     reply_markup=kb.mail_2_sub)

@rt.callback_query(F.data == 'for_all')
async def start_mailing(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    if not is_admin(user_id):
        await callback.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", reply_markup=kb.adm_back)
        return

    await state.set_state(UserState.waiting_admin_for_all)
    await callback.answer('üì™ –û–±—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞')
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=kb.adm_back)
@rt.message(UserState.waiting_admin_for_all)
async def get_mailing_message(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kb.adm_back)
        return

    mailing_text = message.caption if message.caption else message.text
    photo = message.photo[-1] if message.photo else None
    video = message.video if message.video else None
    document = message.document if message.document else None
    audio = message.audio if message.audio else None

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id.isnot(None)))
        users = result.scalars().all()

        if not users:
            await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kb.adm_back)
            return

        print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {[user.user_id for user in users]}")
        for user in users:
            try:
                print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: {user.user_id}")

                if photo:
                    photo_file = photo.file_id
                    if mailing_text:
                        await message.bot.send_photo(user.user_id, photo_file, caption=mailing_text, parse_mode='HTML')
                    else:
                        await message.bot.send_photo(user.user_id, photo_file)

                elif video:
                    video_file = video.file_id
                    if mailing_text:
                        await message.bot.send_video(user.user_id, video_file, caption=mailing_text)
                    else:
                        await message.bot.send_video(user.user_id, video_file)

                elif document:
                    document_file = document.file_id
                    if mailing_text:
                        await message.bot.send_document(user.user_id, document_file, caption=mailing_text)
                    else:
                        await message.bot.send_document(user.user_id, document_file)

                elif audio:
                    audio_file = audio.file_id
                    if mailing_text:
                        await message.bot.send_audio(user.user_id, audio_file, caption=mailing_text)
                    else:
                        await message.bot.send_audio(user.user_id, audio_file)

                elif mailing_text:
                    await message.bot.send_message(user.user_id, mailing_text, parse_mode='HTML',
                                                   disable_web_page_preview=True)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")

        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", reply_markup=kb.adm_back)
        await state.clear()

@rt.callback_query(F.data == 'who_premium')
async def for_sub(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    if not is_admin(user_id):
        await callback.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", reply_markup=kb.adm_back)
        return

    await state.set_state(UserState.waiting_admin_for_premium)
    await callback.answer('PREMIUM')
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ PREMIUM:", reply_markup=kb.adm_back)
@rt.message(UserState.waiting_admin_for_premium)
async def get_mailing_for_sub(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kb.adm_back)
        return

    mailing_text = message.caption if message.caption else message.text
    photo = message.photo[-1] if message.photo else None
    video = message.video if message.video else None
    document = message.document if message.document else None
    audio = message.audio if message.audio else None

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.subscription == 'premium'))
        users = result.scalars().all()

        if not users:
            await message.answer("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kb.adm_back)
            return

        for user in users:
            try:
                print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: {user.user_id}")

                if photo:
                    photo_file = photo.file_id
                    if mailing_text:
                        await message.bot.send_photo(user.user_id, photo_file, caption=mailing_text, parse_mode='HTML')
                    else:
                        await message.bot.send_photo(user.user_id, photo_file)

                elif video:
                    video_file = video.file_id
                    if mailing_text:
                        await message.bot.send_video(user.user_id, video_file, caption=mailing_text)
                    else:
                        await message.bot.send_video(user.user_id, video_file)

                elif document:
                    document_file = document.file_id
                    if mailing_text:
                        await message.bot.send_document(user.user_id, document_file, caption=mailing_text)
                    else:
                        await message.bot.send_document(user.user_id, document_file)

                elif audio:
                    audio_file = audio.file_id
                    if mailing_text:
                        await message.bot.send_audio(user.user_id, audio_file, caption=mailing_text)
                    else:
                        await message.bot.send_audio(user.user_id, audio_file)

                elif mailing_text:
                    await message.bot.send_message(user.user_id, mailing_text, parse_mode='HTML',
                                                   disable_web_page_preview=True)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫—É {user.user_id}: {e}")

    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ PREMIUM –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º", reply_markup=kb.adm_back)
    await state.clear()

@rt.callback_query(F.data == 'who_basic')
async def who_free(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    if not is_admin(user_id):
        await callback.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", reply_markup=kb.adm_back)
        return

    await state.set_state(UserState.waiting_admin_for_basic)
    await callback.answer('BASIC')
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ BASIC:", reply_markup=kb.adm_back)
@rt.message(UserState.waiting_admin_for_basic)
async def get_mailing_who_free(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kb.adm_back)
        return

    photo = message.photo[-1] if message.photo else None
    video = message.video if message.video else None
    document = message.document if message.document else None
    audio = message.audio if message.audio else None
    mailing_text = message.caption if message.caption else message.text

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.subscription == 'basic'))
        users = result.scalars().all()

        if not users:
            await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—Ç–æ –±—Ä–∞–ª –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É", reply_markup=kb.adm_back)
            return

        for user in users:
            try:
                print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: {user.user_id}")

                if photo:
                    photo_file = photo.file_id
                    if mailing_text:
                        await message.bot.send_photo(user.user_id, photo_file, caption=mailing_text, parse_mode='HTML')
                    else:
                        await message.bot.send_photo(user.user_id, photo_file)

                elif video:
                    video_file = video.file_id
                    if mailing_text:
                        await message.bot.send_video(user.user_id, video_file, caption=mailing_text)
                    else:
                        await message.bot.send_video(user.user_id, video_file)

                elif document:
                    document_file = document.file_id
                    if mailing_text:
                        await message.bot.send_document(user.user_id, document_file, caption=mailing_text)
                    else:
                        await message.bot.send_document(user.user_id, document_file)

                elif audio:
                    audio_file = audio.file_id
                    if mailing_text:
                        await message.bot.send_audio(user.user_id, audio_file, caption=mailing_text)
                    else:
                        await message.bot.send_audio(user.user_id, audio_file)

                elif mailing_text:
                    await message.bot.send_message(user.user_id, mailing_text, parse_mode='HTML',
                                                   disable_web_page_preview=True)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {user.user_id}: {e}")

    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ BASIC –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º", reply_markup=kb.adm_back)
    await state.clear()

@rt.callback_query(F.data == 'who_free')
async def who_no_free(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    if not is_admin(user_id):
        await callback.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", reply_markup=kb.adm_back)
        return

    await state.set_state(UserState.waiting_admin_for_free)
    await callback.answer('FREE')
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ FREE:", reply_markup=kb.adm_back)
@rt.message(UserState.waiting_admin_for_free)
async def get_mailing_who_no_free(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kb.adm_back)
        return

    mailing_text = message.caption if message.caption else message.text
    photo = message.photo[-1] if message.photo else None
    video = message.video if message.video else None
    document = message.document if message.document else None
    audio = message.audio if message.audio else None
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.subscription == 'free'))
        users = result.scalars().all()

        if not users:
            await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—Ç–æ –Ω–µ –±—Ä–∞–ª –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É", reply_markup=kb.adm_back)
            return

        for user in users:
            try:
                print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: {user.user_id}")

                if photo:
                    photo_file = photo.file_id
                    if mailing_text:
                        await message.bot.send_photo(user.user_id, photo_file, caption=mailing_text, parse_mode='HTML')
                    else:
                        await message.bot.send_photo(user.user_id, photo_file)

                elif video:
                    video_file = video.file_id
                    if mailing_text:
                        await message.bot.send_video(user.user_id, video_file, caption=mailing_text)
                    else:
                        await message.bot.send_video(user.user_id, video_file)

                elif document:
                    document_file = document.file_id
                    if mailing_text:
                        await message.bot.send_document(user.user_id, document_file, caption=mailing_text)
                    else:
                        await message.bot.send_document(user.user_id, document_file)

                elif audio:
                    audio_file = audio.file_id
                    if mailing_text:
                        await message.bot.send_audio(user.user_id, audio_file, caption=mailing_text)
                    else:
                        await message.bot.send_audio(user.user_id, audio_file)

                elif mailing_text:
                    await message.bot.send_message(user.user_id, mailing_text, parse_mode='HTML',
                                                   disable_web_page_preview=True)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {user.user_id}: {e}")

    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ FREE –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º", reply_markup=kb.adm_back)
    await state.clear()











@rt.callback_query(F.data == 'promo')
async def promo(callback: CallbackQuery, page: int = 1):
    async with async_session() as session:
        total_promos = await rq.get_promo_count(session)
        await callback.answer('üé´ –ü—Ä–æ–º–æ–∫–æ–¥—ã')
        if total_promos == 0:
            await callback.message.edit_text(
                "‚ùóÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_promo")],
                        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="adm_back")]
                    ]
                )
            )
            return

        total_pages = (total_promos + 4) // 5
        page = (page - 1) % total_pages + 1
        offset = (page - 1) * 5
        promo_codes = await rq.get_promo_codes(session, offset=offset)

        await callback.message.edit_text(
            "üìã –í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:",
            reply_markup=get_promo_buttons(page, total_pages, promo_codes),
        )
async def promo_message(message: Message):
    async with async_session() as session:
        total_promos = await rq.get_promo_count(session)

        if total_promos == 0:
            await message.answer(
                "‚ùóÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_promo")],
                        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="adm_back")]
                    ]
                )
            )
            return

        total_pages = (total_promos + 4) // 5
        promo_codes = await rq.get_promo_codes(session, offset=0)

        await message.answer(
            "üìã –í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:",
            reply_markup=get_promo_buttons(1, total_pages, promo_codes),
        )
def get_promo_buttons(page, total_pages, promo_codes, empty=False):
    buttons = []
    if not empty:
        for promo in promo_codes:
            buttons.append(
                [InlineKeyboardButton(text=promo.promo_name, callback_data=f"promo_info_{promo.promo_name}")])

    buttons.append([
        InlineKeyboardButton(text="‚ùÆ", callback_data=f"promo_page_{page - 1}"),
        InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="null"),
        InlineKeyboardButton(text="‚ùØ", callback_data=f"promo_page_{page + 1}")
    ])
    buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_promo"),
                    InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="delete_promo")])
    buttons.append([InlineKeyboardButton(text="üîé –ù–∞–π—Ç–∏ –ø–æ —é–∑–µ—Ä—É", callback_data="search_promo_user")])
    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="adm_back")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@rt.callback_query(F.data.startswith('promo_page_'))
async def promo_pagination(callback: CallbackQuery):
    page = int(callback.data.split('_')[-1])

    async with async_session() as session:
        total_promos = await rq.get_promo_count(session)

        if total_promos == 0:
            await callback.message.edit_text(
                "‚ùóÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_promo")],
                        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="adm_back")]
                    ]
                )
            )
            return

        total_pages = (total_promos + 4) // 5
        page = (page - 1) % total_pages + 1
        offset = (page - 1) * 5
        promo_codes = await rq.get_promo_codes(session, offset=offset)

        await callback.message.edit_text(
            "üìã –í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:",
            reply_markup=get_promo_buttons(page, total_pages, promo_codes),
        )

@rt.callback_query(F.data.startswith('promo_info_'))
async def promo_info(callback: CallbackQuery):
    promo_name = callback.data.split('_')[2]
    async with async_session() as session:
        promo = await rq.get_promo_info(session, promo_name)
        if promo:
            user_list = []
            for user_id in promo.users_used:
                user = await rq.get_user_promo(session, user_id)
                user_list.append(f"@{user.username}" if user.username else f"ID: {user_id}")

            users_used_text = '\n'.join(user_list) if user_list else "–ù–∏–∫—Ç–æ –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª."

            text = (
                f"üéÅ <strong>–ü—Ä–æ–º–æ–∫–æ–¥:</strong> {promo.promo_name}\n"
                f"‚è≥ <strong>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</strong> {promo.duration} –¥–Ω–µ–π\n"
                f"‚ÑπÔ∏è <strong>–í–∏–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞:</strong> {'–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –¥–Ω–∏' if promo.promo_type == 'freedays' else '–°–∫–∏–¥–∫–∞'}\n"
                f"üí∏ <strong>{'–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –¥–Ω–µ–π:' if promo.promo_type == 'freedays' else '–°–∫–∏–¥–∫–∞'}</strong> {promo.promo_info_discount if promo.promo_info_discount else promo.promo_info_freedays}{'%' if promo.promo_info_discount else ''}\n"
                f"üéü <strong>–í–∏–¥ –ø–æ–¥–ø–∏—Å–∫–∏:</strong> {promo.subscription_type}\n"
                f"üë• <strong>–õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</strong> {len(promo.users_used)}/{promo.max_uses}\n"
                f"üìã <strong>–ö—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª:</strong>\n{users_used_text}\n"
            )
            await callback.message.edit_text(text, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="promo")]]))
        else:
            await callback.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
@rt.callback_query(F.data == 'add_promo')
async def add_promo(callback: CallbackQuery, state: FSMContext):
    await callback.answer('‚ûï –î–æ–±–∞–≤–∏—Ç—å')
    await state.set_state(UserState.waiting_for_promo_name)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞:", reply_markup=kb.free_discount)
@rt.callback_query(F.data.startswith('promo_type_'))
async def promo_type_selected(callback: CallbackQuery, state: FSMContext):
    promo_type = callback.data.split('_')[2]
    await state.update_data(promo_type=promo_type)
    if promo_type == "freedays":
        await callback.answer('‚è≥ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –î–Ω–∏')
        await state.set_state(UserState.waiting_for_promo_info)
        await callback.message.edit_text("‚è≥ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –¥–Ω–µ–π:")
    elif promo_type == "discount":
        await callback.answer('üí∏ –°–∫–∏–¥–∫–∞')
        await state.set_state(UserState.waiting_for_promo_info)
        await callback.message.edit_text("üí∏ –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ (–≤ %):")
@rt.message(F.text, UserState.waiting_for_promo_info)
async def promo_value_entered(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        promo_value = int(message.text.strip())
        promo_type = data.get("promo_type")
        await state.update_data(promo_value=promo_value)
        if promo_type == 'discount':
            await message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥:", reply_markup=kb.promo_basic_gold)
        else:
            await message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥:",
                                 reply_markup=kb.promo_basic_gold_without_basicgold)
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
@rt.callback_query(F.data.startswith('promo_sub1_'))
async def promo_sub_selected(callback: CallbackQuery, state: FSMContext):
    if "premiumbasic" in callback.data:
        subscription_type = "basic+premium"
    elif "basic" in callback.data:
        subscription_type = "basic"
    else:
        subscription_type = "premium"
    await state.update_data(subscription_type=subscription_type)
    await state.set_state(UserState.waiting_for_promo_name)
    await callback.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")
@rt.message(F.text, UserState.waiting_for_promo_name)
async def promo_name_entered(message: Message, state: FSMContext):
    await state.update_data(promo_name=message.text.strip())
    data = await state.get_data()
    promo_type = data.get("promo_type")
    if promo_type == "discount":
        await state.set_state(UserState.waiting_for_duration)
        await message.answer("‚è≥ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:")
    else:
        duration = 0
        await state.update_data(duration=duration)
        await state.set_state(UserState.waiting_for_max_uses)
        await message.answer("üë•Ô∏è –í–≤–µ–¥–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ª—é–¥–µ–π –Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥:")
@rt.message(F.text, UserState.waiting_for_duration)
async def promo_duration_entered(message: Message, state: FSMContext):
    try:
        duration = int(message.text.strip())
        await state.update_data(duration=duration)
        await state.set_state(UserState.waiting_for_max_uses)
        await message.answer("üë•Ô∏è –í–≤–µ–¥–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ª—é–¥–µ–π –Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥:")
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –¥–Ω–µ–π!")
@rt.message(F.text, UserState.waiting_for_max_uses)
async def promo_max_uses_entered(message: Message, state: FSMContext):
    try:
        max_uses = int(message.text.strip())
        data = await state.get_data()

        promo_name = data.get("promo_name")
        duration = data.get("duration")
        promo_type = data.get("promo_type")
        promo_value = data.get("promo_value")
        subscription_type = data.get("subscription_type")

        async with async_session() as session:
            await rq.add_promo_code(session, promo_name, duration, promo_type, promo_value, subscription_type, max_uses)

        await message.answer(
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <strong>{promo_name}</strong> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"üéÅ –¢–∏–ø: {promo_type}\n"
            f"üìö –ü–æ–¥–ø–∏—Å–∫–∞: {subscription_type}\n"
            f"üë• –õ–∏–º–∏—Ç: {max_uses} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", parse_mode='HTML'
        )
        await state.clear()

        await promo_message(message)
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ª–∏–º–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")


@rt.callback_query(F.data == 'search_promo_user')
async def search_promo_user(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.waiting_for_search_username)
    await callback.answer('üîé –ù–∞–π—Ç–∏ –ø–æ —é–∑–µ—Ä—É')
    await callback.message.edit_text("üîé –í–≤–µ–¥–∏—Ç–µ @—é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ ID –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:", reply_markup=kb.adm_back)
@rt.message(F.text, UserState.waiting_for_search_username)
async def search_promo_result(message: Message, state: FSMContext):
    search_input = message.text.strip()
    async with async_session() as session:
        user = await rq.get_user_by_username_or_id(session, search_input)

        if not user:
            await message.answer("‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            await state.clear()
            return

        promos_used = await rq.get_promos_by_user(session, user.user_id)

        if not promos_used:
            await message.answer(f"‚ùóÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username or user.user_id} –Ω–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.")
            await state.clear()
            return

        promo_list = []
        for promo in promos_used:
            promo_type = "‚è≥ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –¥–Ω–∏" if promo.promo_type == "freedays" else "üí∏ –°–∫–∏–¥–∫–∞"
            promo_value = f"{promo.promo_info_freedays} –¥–Ω–µ–π" if promo.promo_type == "freedays" else f"{promo.promo_info_discount}% —Å–∫–∏–¥–∫–∞"
            promo_list.append(
                f"üéÅ {'‚úÖ‚úÖ‚úÖ' if user.active_promo_code == promo.promo_name else '‚ùå‚ùå‚ùå'}<strong>{promo.promo_name}</strong>{'‚úÖ‚úÖ‚úÖ' if user.active_promo_code == promo.promo_name else '‚ùå‚ùå‚ùå'}\n"
                f"üîñ <strong>–¢–∏–ø:</strong> {promo_type}\n"
                f"üéÅ <strong>–†–∞–∑–º–µ—Ä:</strong> {promo_value}\n"
                f"üïì <strong>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</strong> {promo.duration} –¥–Ω–µ–π\n"
                f"üìö <strong>–ü–æ–¥–ø–∏—Å–∫–∞:</strong> {promo.subscription_type}\n"
                f"üë• <strong>–õ–∏–º–∏—Ç:</strong> {len(promo.users_used)}/{promo.max_uses}\n"
                "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî"
            )

        promo_text = '\n\n'.join(promo_list)
        username_or_id = f"@{user.username}" if user.username else f"ID: {user.user_id}"

        await message.answer(
            f"üîé <strong>–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username_or_id}:</strong>\n\n{promo_text}",
            parse_mode='HTML'
        )
    await promo_message(message)
    await state.clear()


@rt.callback_query(F.data == 'delete_promo')
async def delete_promo(callback: CallbackQuery, page: int = 1):
    async with async_session() as session:
        total_promos = await rq.get_promo_count(session)
        await callback.answer('‚ùå –£–¥–∞–ª–∏—Ç—å')
        if total_promos == 0:
            await callback.message.edit_text("‚ùóÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç.", reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="promo")]]))
            return

        total_pages = (total_promos + 4) // 5
        page = (page - 1) % total_pages + 1
        offset = (page - 1) * 5
        promo_codes = await rq.get_promo_codes(session, offset=offset)

        await callback.message.edit_text(
            "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=get_delete_promo_buttons(page, total_pages, promo_codes)
        )
def get_delete_promo_buttons(page, total_pages, promo_codes):
    buttons = []
    for promo in promo_codes:
        buttons.append(
            [InlineKeyboardButton(text=f"üóëÔ∏è {promo.promo_name}", callback_data=f"delete_promo_{promo.promo_name}")])

    buttons.append([
        InlineKeyboardButton(text="‚ùÆ", callback_data=f"delete_page_{page - 1}"),
        InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="null"),
        InlineKeyboardButton(text="‚ùØ", callback_data=f"delete_page_{page + 1}")
    ])
    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="promo")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)
@rt.callback_query(F.data.startswith('delete_promo_'))
async def delete_selected_promo(callback: CallbackQuery):
    promo_name = callback.data.split('_')[2]
    async with async_session() as session:
        await rq.delete_promo_code(session, promo_name)

    await callback.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {promo_name} —É–¥–∞–ª–µ–Ω!", show_alert=True)

    await delete_promo(callback)


@rt.callback_query(F.data == 'promo_for_sub')
async def promo_for_sub(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        user = await rq.get_user_promo(session, user_id)

        if user.active_promo_code:
            remaining_days = (user.promo_expiration - datetime.now()).days
            if remaining_days > 0:
                await callback.answer(
                    f"üìÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥", show_alert=True
                )
                return


        if user.language == 2:
            await callback.message.edit_text("<strong>Enter the promo code</strong>", reply_markup=kb.backtosub_eng,
                                             parse_mode='HTML')
        else:
            await callback.message.edit_text("<strong>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥</strong>", reply_markup=kb.backtosub, parse_mode='HTML')
        await state.set_state(UserState.waiting_for_promo_code)
@rt.message(F.text, UserState.waiting_for_promo_code)
async def promo_code_entered(message: Message, state: FSMContext):
    promo_code = message.text.strip()
    await state.update_data(promo_code=promo_code)
    if promo_code in ['üé° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'üé° Main menu']:
        await state.clear()
        await main_menu(message, state)
        return
    elif promo_code in ['üë®‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'üë®‚Äçüíª Support']:
        await state.clear()
        await main_menu_sup(message)
        return
    elif promo_code in ['üì® –†–∞—Å—Å—ã–ª–∫–∞', 'üì® Mailing']:
        await state.clear()
        await send_newsletter(message, state)
        return
    elif promo_code in ['üåê –Ø–∑—ã–∫', 'üåê Language']:
        await state.clear()
        await main_keyboard_language(message)
        return
    async with async_session() as session:
        promo = await rq.get_promo_info(session, promo_code)

        if not promo:
            await message.answer("‚ùå")
            return

        if len(promo.users_used) >= promo.max_uses:
            await message.answer("‚ùå")
            return

        user_id = message.from_user.id
        user = await rq.get_user_promo(session, user_id)

        if user_id in promo.users_used:
            await message.answer("‚ùå")
            return

        if user.active_promo_code:
            await message.answer("‚ùå")
            return
        if promo.promo_type == 'discount':
            user.active_promo_code = promo.promo_name
            user.promo_expiration = datetime.now() + timedelta(days=promo.duration)

        if user.language == 2:
            promo_value = f"{promo.promo_info_freedays} days" if promo.promo_type == "freedays" else f"{promo.promo_info_discount}%"
        else:
            promo_value = f"{promo.promo_info_freedays} –¥–Ω–µ–π" if promo.promo_type == "freedays" else f"{promo.promo_info_discount}%"
        if promo.promo_type == 'discount':
            expiration_date = user.promo_expiration.strftime('%d.%m %H:%M')
            if user.language == 2:
                await message.answer(
                    f"<strong>‚úÖ Promo code is valid until {expiration_date}</strong>\n\n"
                    f"Discount amount: {promo_value}",
                    parse_mode='HTML', reply_markup=kb.backtosub_eng
                )
            else:
                await message.answer(
                    f"<strong>‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {expiration_date}</strong>\n\n"
                    f"–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏: {promo_value}",
                    parse_mode='HTML', reply_markup=kb.backtosub
                )
            promo.users_used.append(user_id)
            await state.clear()
        if promo.promo_type == 'freedays':
            if user.subscription == 'premium' and promo.subscription_type == 'premium':
                user.subscription_day += promo.promo_info_freedays
                if user.language == 2:
                    await message.answer(
                        f"<strong>‚úÖ Promo code activated</strong>\n\n"
                        f"You have received {promo_value}",
                        parse_mode='HTML', reply_markup=kb.backtosub_eng
                    )
                else:
                    await message.answer(
                        f"<strong>‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</strong>\n\n"
                        f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {promo_value}",
                        parse_mode='HTML', reply_markup=kb.backtosub
                    )
                promo.users_used.append(user_id)
                await state.clear()
            elif user.subscription == 'basic' and promo.subscription_type == 'basic':
                user.subscription_day += promo.promo_info_freedays
                if user.language == 2:
                    await message.answer(
                        f"<strong>‚úÖ Promo code activated</strong>\n\n"
                        f"You have received {promo_value}",
                        parse_mode='HTML', reply_markup=kb.backtosub_eng
                    )
                else:
                    await message.answer(
                        f"<strong>‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</strong>\n\n"
                        f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {promo_value}",
                        parse_mode='HTML', reply_markup=kb.backtosub
                    )
                promo.users_used.append(user_id)
                await state.clear()
            elif user.subscription == '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞' or user.subscription == 'free':
                if promo.subscription_type == 'premium':
                    user.subscription_day += promo.promo_info_freedays
                    user.subscription = 'premium'
                    if user.language == 2:
                        await message.answer(
                            f"<strong>‚úÖ Promo code activated</strong>\n\n"
                            f"You have received {promo_value}",
                            parse_mode='HTML', reply_markup=kb.backtosub_eng
                        )
                    else:
                        await message.answer(
                            f"<strong>‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</strong>\n\n"
                            f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {promo_value}",
                            parse_mode='HTML', reply_markup=kb.backtosub
                        )
                else:
                    user.subscription_day += promo.promo_info_freedays
                    user.subscription = 'basic'
                    if user.language == 2:
                        await message.answer(
                            f"<strong>‚úÖ Promo code activated</strong>\n\n"
                            f"You have received {promo_value}",
                            parse_mode='HTML', reply_markup=kb.backtosub_eng
                        )
                    else:
                        await message.answer(
                            f"<strong>‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</strong>\n\n"
                            f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {promo_value}",
                            parse_mode='HTML', reply_markup=kb.backtosub
                        )
            else:
                await message.answer("‚ùå")
                return
        await session.commit()



#–¢–µ–∫—Å—Ç–∞ –º–µ–π–Ω –∫–ª–∞–≤—ã
@rt.message(F.text.in_(['üé° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'üé° Main menu']))
async def main_menu(message: Message):
    user_id = message.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            if user.block:  
                try:
                    await message.delete()  
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                if user.language == 2:
                    await message.answer('<strong>Choose an action using the buttons below:</strong>', reply_markup=kb.m_menu_eng,
                                         parse_mode='HTML')
                else:
                    await message.answer('<strong>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:</strong>', reply_markup=kb.m_menu,
                                         parse_mode='HTML')
@rt.message(F.text.in_(['üë®‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'üë®‚Äçüíª Support']))
async def main_menu_sup(message: Message, state: FSMContext):
    user_id = message.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            if user.language == 2:
                await message.answer('<strong>ü´Ç For any questions, reach us at: @xxx</strong>', parse_mode='HTML',
                                     reply_markup=kb.in_main_menu_eng)
            else:
                await message.answer('<strong>ü´Ç –ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –∂–¥–µ–º –≤–∞—Å: @xxx</strong>', parse_mode='HTML', reply_markup=kb.in_main_menu)
    await state.clear()
@rt.message(F.text.in_(['üì® –†–∞—Å—Å—ã–ª–∫–∞', 'üì® Mailing']))
async def send_newsletter(message: Message, state: FSMContext):
    user_id = message.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            if user.block: 
                try:
                    await message.delete()  
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                if user.language == 2:
                    if not user or user.gmail == '–Ω–µ —É–∫–∞–∑–∞–Ω–æ' or user.password == '–ù–µ—É–∫–∞–∑–∞–Ω–æ':
                        await message.answer('<strong>First, complete the registration</strong>',
                                             reply_markup=kb.reg_in_mail_eng, parse_mode='HTML')
                        return
                    if user.subscription == 'free' or user.subscription == '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞':
                        await rq.set_group(user_id)

                        async with async_session() as session:
                            result = await session.execute(select(Group).filter(Group.user_id == user_id))
                            groups = result.scalars().all()

                            if not groups:
                                await message.answer("<strong>You don't have groups</strong>", parse_mode="HTML")
                                return

                            active_group = await session.scalar(
                                select(Group).filter(Group.user_id == user_id, Group.active == True))

                            if not active_group:
                                active_group = groups[0]
                                active_group.active = True

                            await message.answer("<strong>Choose an action using the buttons below:</strong>",
                                                 parse_mode="HTML",
                                                 reply_markup=kb.auto_navigation_eng(active_group.name, user))

                            await session.commit()
                    else:
                        await message.answer('<strong>Choose the mailing type below:</strong>', parse_mode='HTML',
                                             reply_markup=kb.extra_auto)
                else:
                    if not user or user.gmail == '–Ω–µ —É–∫–∞–∑–∞–Ω–æ' or user.password == '–ù–µ—É–∫–∞–∑–∞–Ω–æ':
                        await message.answer('<strong>–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</strong>',
                                                     reply_markup=kb.reg_in_mail, parse_mode='HTML')
                        return
                    if user.subscription == 'free' or user.subscription == '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞':
                        await rq.set_group(user_id)

                        async with async_session() as session:
                            result = await session.execute(select(Group).filter(Group.user_id == user_id))
                            groups = result.scalars().all()

                            if not groups:
                                await message.answer("<strong>–£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø.</strong>", parse_mode="HTML")
                                return

                            active_group = await session.scalar(
                                select(Group).filter(Group.user_id == user_id, Group.active == True))

                            if not active_group:
                                active_group = groups[0]
                                active_group.active = True

                            await message.answer("<strong>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:</strong>",
                                                             parse_mode="HTML",
                                                             reply_markup=kb.auto_navigation(active_group.name, user))

                            await session.commit()
                    else:
                        await message.answer('<strong>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∏–∂–µ:</strong>',parse_mode='HTML',
                                             reply_markup=kb.extra_auto)

        await state.clear()
        await session.commit()
@rt.message(F.text.in_(['üåê –Ø–∑—ã–∫', 'üåê Language']))
async def main_keyboard_language(message: Message):
    user_id = message.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            await message.answer('<strong>Choose language | –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫</strong>', parse_mode='HTML',
                                  reply_markup=kb.choice_lang_main_key)

@rt.callback_query(F.data.in_(['eng_key', 'rus_key']))
async def choice_language(callback: CallbackQuery, bot: Bot):
    user_id = callback.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if callback.data == 'eng_key':
            await callback.answer('üá∫üá∏ English')
            user.language = 2
            await callback.message.answer(f'<strong>üåê Selected language: English</strong>',
                                 parse_mode='HTML', disable_web_page_preview=True, reply_markup=kb.start_eng)
        else:
            await callback.answer('üá∑üá∫ –†—É—Å—Å–∫–∏–π')
            user.language = 1
            await callback.message.answer(f'<strong>üåê –í—ã–±—Ä–∞–Ω —è–∑—ã–∫: –†—É—Å—Å–∫–∏–π</strong>',
                                 parse_mode='HTML', disable_web_page_preview=True, reply_markup=kb.start)
        await session.commit()

@rt.callback_query(F.data == 'back_to_auto_extra')
async def back_to_auto_extra(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            await state.clear()
            if user.language == 2:
                await callback.answder('‚Ü©Ô∏è Back')
            else:
                await callback.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
            await send_newsletter(callback.message, state)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)

@rt.callback_query(F.data == 'profile')
async def profile(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                if user.gmail == '–Ω–µ —É–∫–∞–∑–∞–Ω–æ':
                    await callback.answer('üß∏ Profile')
                    await callback.message.edit_text(f'<strong>üß∏ Profile {user.username}</strong>\n‚Äî‚Äî‚Äî\n'
                                                     f'<strong>‚úâÔ∏è Gmail: \n‚îî </strong>not set\n\n'
                                                     f'<strong>üéü Subscription:\n ‚îî </strong>{user.subscription if user.subscription in ['basic', 'premium'] else 'inactive'}',
                                                     reply_markup=kb.back_to_menu_with_reg_eng, parse_mode='HTML')
                if user.gmail != '–Ω–µ —É–∫–∞–∑–∞–Ω–æ':
                    await callback.answer('üß∏ Profile')
                    await callback.message.edit_text(f'<strong>üß∏ Profile {user.username}</strong>\n‚Äî‚Äî‚Äî\n'
                                                     f'<strong>‚úâÔ∏è Gmail: \n‚îî </strong>{user.gmail}\n\n'
                                                     f'<strong>üéü Subscription: \n‚îî </strong>{user.subscription if user.subscription in ['basic', 'premium'] else 'free'}',
                                                     reply_markup=kb.back_to_menu_with_quit_eng, parse_mode='HTML')
            else:
                if user.gmail == '–Ω–µ —É–∫–∞–∑–∞–Ω–æ':
                    await callback.answer('üß∏ –ü—Ä–æ—Ñ–∏–ª—å')
                    await callback.message.edit_text(f'<strong>üß∏ –ü—Ä–æ—Ñ–∏–ª—å {user.username}</strong>\n‚Äî‚Äî‚Äî\n'
                                                     f'<strong>‚úâÔ∏è Gmail: \n‚îî </strong>{user.gmail}\n\n'
                                                     f'<strong>üéü –ü–æ–¥–ø–∏—Å–∫–∞:\n ‚îî </strong>{user.subscription}',
                                                     reply_markup=kb.back_to_menu_with_reg, parse_mode='HTML')
                if user.gmail != '–Ω–µ —É–∫–∞–∑–∞–Ω–æ':
                    await callback.answer('üß∏ –ü—Ä–æ—Ñ–∏–ª—å')
                    await callback.message.edit_text(f'<strong>üß∏ –ü—Ä–æ—Ñ–∏–ª—å {user.username}</strong>\n‚Äî‚Äî‚Äî\n'
                                                     f'<strong>‚úâÔ∏è Gmail: \n‚îî </strong>{user.gmail}\n\n'
                                                     f'<strong>üéü –ü–æ–¥–ø–∏—Å–∫–∞: \n‚îî </strong>{user.subscription}',
                                                     reply_markup=kb.back_to_menu_with_quit, parse_mode='HTML')
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
async def show_profile(message: Message):
    user_id = message.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user:
            if user.language == 2:
                if user.gmail == '–Ω–µ —É–∫–∞–∑–∞–Ω–æ':
                    await message.answer(f'<strong>üß∏ Profile {user.username}</strong>\n‚Äî‚Äî‚Äî\n'
                                                     f'<strong>‚úâÔ∏è Gmail: \n‚îî </strong>not set\n\n'
                                                     f'<strong>üéü Subscription:\n ‚îî </strong>{user.subscription if user.subscription in ['basic', 'premium'] else 'inactive'}',
                                                     reply_markup=kb.back_to_menu_with_reg_eng, parse_mode='HTML')
                if user.gmail != '–Ω–µ —É–∫–∞–∑–∞–Ω–æ':
                    await message.answer(f'<strong>üß∏ Profile {user.username}</strong>\n‚Äî‚Äî‚Äî\n'
                                                     f'<strong>‚úâÔ∏è Gmail: \n‚îî </strong>{user.gmail}\n\n'
                                                     f'<strong>üéü Subscription: \n‚îî </strong>{user.subscription if user.subscription in ['basic', 'premium'] else 'inactive'}',
                                                     reply_markup=kb.back_to_menu_with_quit_eng, parse_mode='HTML')
            else:
                if user.gmail == '–Ω–µ —É–∫–∞–∑–∞–Ω–æ':
                    await message.answer(f'<strong>üß∏ –ü—Ä–æ—Ñ–∏–ª—å {user.username}</strong>\n‚Äî‚Äî‚Äî\n'
                                                     f'<strong>‚úâÔ∏è Gmail: \n‚îî </strong>{user.gmail}\n\n'
                                                     f'<strong>üéü –ü–æ–¥–ø–∏—Å–∫–∞:\n ‚îî </strong>{user.subscription}',
                                                     reply_markup=kb.back_to_menu_with_reg, parse_mode='HTML')
                if user.gmail != '–Ω–µ —É–∫–∞–∑–∞–Ω–æ':
                    await message.answer(f'<strong>üß∏ –ü—Ä–æ—Ñ–∏–ª—å {user.username}</strong>\n‚Äî‚Äî‚Äî\n'
                                                     f'<strong>‚úâÔ∏è Gmail: \n‚îî </strong>{user.gmail}\n\n'
                                                     f'<strong>üéü –ü–æ–¥–ø–∏—Å–∫–∞: \n‚îî </strong>{user.subscription}',
                                                     reply_markup=kb.back_to_menu_with_quit, parse_mode='HTML')
@rt.callback_query(F.data == 'quit')
async def quit_from_profile(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('Anti-misclick system', show_alert=True)
                await callback.message.edit_text('<strong>‚ö†Ô∏è Are you sure you want to log out?\n\n</strong>'
                                                 '<strong>After logging out, all your data, including your subscription, will be deleted\n\n</strong>'
                                                 '<strong>Recovery of this data will be impossible</strong>',
                                                 parse_mode='HTML', reply_markup=kb.are_you_sure_profile_eng)
            else:
                await callback.answer('C–∏—Å—Ç–µ–º–∞ –∞–Ω—Ç–∏-–º–∏—Å—Å–∫–ª–∏–∫', show_alert=True)
                await callback.message.edit_text('<strong>‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?\n\n</strong>'
                                                 '<strong>–ü–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—è –ø–æ–¥–ø–∏—Å–∫—É, –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã \n\n</strong>'
                                                 '<strong>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ</strong>', parse_mode='HTML', reply_markup=kb.are_you_sure_profile)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == 'sure_to_quit')
async def sure_to_quit(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('‚úÖ Logout')
            else:
                await callback.answer('‚úÖ –í—ã–π—Ç–∏')
            groups_result = await session.execute(
                select(Group)
                .filter(Group.user_id == user_id)
                .options(selectinload(Group.emails))  
            )
            groups = groups_result.scalars().all()

            if groups:  
                max_email_count = max(len(group.emails) for group in groups)

                top_groups = [group for group in groups if len(group.emails) == max_email_count]
                last_group = max(top_groups, key=lambda g: g.id)

                for group in groups:
                    if group != last_group:
                        await session.execute(delete(Group).where(Group.id == group.id))

                await session.execute(delete(Email).where(Email.user_id == user_id))
                await session.execute(delete(Beat).where(Beat.user_id == user_id))
                await session.execute(delete(Settings).where(Settings.user_id == user_id))
            else:
                await session.execute(delete(Email).where(Email.user_id == user_id))
                await session.execute(delete(Beat).where(Beat.user_id == user_id))

            user.subscription = '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞'
            user.password = '–ù–µ—É–∫–∞–∑–∞–Ω–æ'
            user.subscription_day = 0
            user.mails_per_day = 0
            user.gmail = '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
            if user.language == 2:
                await callback.message.edit_text('<strong>‚úÖ You have successfully logged out!</strong>',
                                                 reply_markup=kb.back_to_profile_eng, parse_mode='HTML')
            else:
                await callback.message.edit_text('<strong>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞!</strong>',
                                                 reply_markup=kb.back_to_profile, parse_mode='HTML')

            await session.commit()
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == 'back_to_menu_with_reg')
async def back_to_menu_with_reg(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('‚Ü©Ô∏è Back')
                await callback.message.edit_text('<strong>Choose an action using the buttons below:</strong>',
                                                 reply_markup=kb.m_menu_eng, parse_mode='HTML')
            else:
                await callback.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
                await callback.message.edit_text('<strong>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:</strong>',
                                                 reply_markup=kb.m_menu, parse_mode='HTML')
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == 'back_to_profile')
async def back_to_profile(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('üß∏ To profile')
            else:
                await callback.answer('üß∏ –í –ø—Ä–æ—Ñ–∏–ª—å')
            await profile(callback)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)

#—Ä–µ—Ñ–∫–∏

@rt.callback_query(F.data == 'referral')
async def referral(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    referral_link = f"https://t.me/{(await callback.bot.me()).username}?start=ref_{user_id}"

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user and not user.block:
            lang = user.language
            if lang == 2:
                await callback.answer('üè∑Ô∏è Referral system')
                text = (
                    "<b>Your referral link</b>:\n"
                    f"<code>{referral_link}</code>\n\n"
                    f"üë• Invited: {user.referrals}\n"
                    f"<a href='https://telegra.ph/‚Ñπ--Progressivnye-procenty-08-09'>Discount for invitations:</a> "
                    f"{20 if user.referrals in [0, 1, 2, 3, 4] else 30 if user.referrals in [5, 6, 7, 8, 9] else 50}%"
                )
            else:
                await callback.answer('üè∑Ô∏è –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞')
                text = (
                    "<b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>:\n"
                    f"<code>{referral_link}</code>\n\n"
                    f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {user.referrals}\n"
                    f"<a href='https://telegra.ph/‚Ñπ--Progressivnye-procenty-08-09'>–°–∫–∏–¥–∫–∞ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:</a> "
                    f"{20 if user.referrals in [0, 1, 2, 3, 4] else 30 if user.referrals in [5, 6, 7, 8, 9] else 50}%"
                )
            if user.language == 2:
                await callback.message.edit_text(text, parse_mode="HTML", disable_web_page_preview=True,
                                                 reply_markup=kb.back_to_menu_from_ref_eng)
            else:
                await callback.message.edit_text(text, parse_mode="HTML", disable_web_page_preview=True, reply_markup=kb.back_to_menu_from_ref)

        else:
            await callback.answer(
                "‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û" if user and user.language != 2 else "‚ùóÔ∏èNOT AVAILABLE",
                show_alert=True
            )

#–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@rt.callback_query(F.data == 'reg')
async def reg_gmail(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                if user.gmail == '–Ω–µ —É–∫–∞–∑–∞–Ω–æ':
                    await state.set_state(UserState.waiting_for_gmail)
                    await callback.answer('üñ® Registration')
                    await callback.message.edit_text('<strong>Enter your Gmail to register</strong>', parse_mode='HTML')
                else:
                    await callback.answer('üñ® Registration')
                    await callback.message.edit_text(
                        f'<strong>Now enter the app password</strong> (it can only be created if two-factor authentication is enabled)\n\n'
                        f'<strong>Click the button below to go directly to the required section</strong>', parse_mode="HTML",
                        reply_markup=kb.passw_eng)
                    await state.set_state(UserState.waiting_for_password)
            else:
                if user.gmail == '–Ω–µ —É–∫–∞–∑–∞–Ω–æ':
                    await state.set_state(UserState.waiting_for_gmail)
                    await callback.answer('üñ® –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
                    await callback.message.edit_text('<strong>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à Gmail –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</strong>', parse_mode='HTML')
                else:
                    await callback.answer('üñ® –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
                    await callback.message.edit_text(
                        f'<strong>–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</strong> (–µ–≥–æ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)\n\n'
                        f'<strong>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª</strong>', parse_mode="HTML",
                        reply_markup=kb.passw)
                    await state.set_state(UserState.waiting_for_password)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.message(UserState.waiting_for_gmail)
async def handle_gmail(msg: Message, state: FSMContext):
    user_id = msg.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            if user.block: 
                try:
                    await msg.delete()  
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                gmail = msg.text.strip().lower()

                if '@' not in gmail or '.' not in gmail:
                    await msg.answer('<strong>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Gmail. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</strong>',
                                     parse_mode='HTML')
                    return

                async with async_session() as session:
                    gmail_exists = await session.execute(select(User).filter(User.gmail == gmail))
                    existing_user = gmail_exists.scalar_one_or_none()

                    if existing_user:
                        await msg.answer('<strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Gmail —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</strong>',
                                         parse_mode='HTML')
                        return

                await rq.set_user(user_id, gmail=gmail)

                if user.language == 2:
                    await msg.answer(
                        f'<strong>Now enter the app password</strong> (it can only be created if two-factor authentication is enabled)\n\n'
                        f'<strong>Click the button below to go directly to the required section</strong>',
                        parse_mode="HTML", reply_markup=kb.passw_eng)
                else:
                    await msg.answer(
                        f'<strong>–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</strong> (–µ–≥–æ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)\n\n'
                        f'<strong>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª</strong>', parse_mode="HTML", reply_markup=kb.passw)
                await state.set_state(UserState.waiting_for_password)
@rt.message(UserState.waiting_for_password)
async def handle_password(msg: Message, state: FSMContext, bot: Bot):
    user_id = msg.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            if user.block:  
                try:
                    await msg.delete()  
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                password = msg.text.strip()

                if not re.fullmatch(r'[a-zA-Z0-9]{4}( [a-zA-Z0-9]{4}){3}', password):
                    if user.language == 2:
                        await msg.answer(
                            '<strong>Invalid app password. </strong>'
                            '<strong>Please try again</strong>',
                            parse_mode='HTML'
                        )
                    else:
                        await msg.answer(
                            '<strong>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. </strong>'
                            '<strong>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</strong>',
                            parse_mode='HTML'
                        )
                    return
                user = await rq.get_user(msg.from_user.id)
                await rq.set_user(user_id, password=password)
                user.subscription = 'free'
                user.mails_per_day = 25
                session.add(user)
                if user.language == 2:
                    await msg.answer(
                        '<strong>‚úÖ Registration successful. You can start now!</strong>', parse_mode='HTML',
                        reply_markup=kb.in_main_menu_eng)
                else:
                    await msg.answer(
                        '<strong>‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å!</strong>', parse_mode='HTML',
                        reply_markup=kb.in_main_menu)

                now = datetime.now()
                if user.used_referral:
                    if user.referrer_id:
                        ref_result = await session.execute(select(User).filter(User.user_id == user.referrer_id))
                        referrer = ref_result.scalar_one_or_none()

                        if referrer:
                            if referrer.block:
                                referrer.block = False
                            if referrer.subscription not in ['–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞', 'free']:
                                if referrer.notifications_reg:
                                    if referrer.language == 2:
                                        await bot.send_message(
                                            referrer.user_id,
                                            f"<b>Your referral has registered in Be Twin</b>\n\n"
                                            f"You have been credited with 1 day of {referrer.subscription} subscription",
                                            parse_mode='HTML',
                                            reply_markup=kb.turn_off_notifications_eng
                                        )
                                    else:
                                        await bot.send_message(
                                            referrer.user_id,
                                            f"<b>–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ Be Twin</b>\n\n"
                                            f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω 1 –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ {referrer.subscription}", parse_mode='HTML',
                                            reply_markup=kb.turn_off_notifications
                                        )
                                referrer.subscription_day += 1
                    expire_date = user.referral_discount_expire
                    days_left = 0
                    if expire_date:
                        delta = expire_date - now
                        days_left = max(math.ceil(delta.total_seconds() / 86400), 0)

                    if user.language == 2 and expire_date:
                        await msg.answer(
                            f'<b>The referral discount will remain active for {days_left} more days</b>\n\n'
                            'You can view it in the "üéü Subscription" section of the main menu',
                            parse_mode='HTML'
                        )
                    elif user.language in [1, 0] and expire_date:
                        await msg.answer(f'<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –µ—â–µ {days_left} –¥–Ω–µ–π</b>\n\n'
                                         '–£–≤–∏–¥–µ—Ç—å –µ–µ –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´üéü –ü–æ–¥–ø–∏—Å–∫–∞¬ª –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é',
                                         parse_mode='HTML')



                await state.clear()
                await session.commit()

#–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@rt.callback_query(F.data == 'turn_off_notifications')
async def turn_off_notifications(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('üîï Disable notifications')
                await callback.message.edit_text(
                    '<b>Do you want to disable notifications about referral registrations?</b>\n\n'
                    '‚ö†Ô∏è Notifications about referral subscription purchases will remain (if enabled)',
                    parse_mode='HTML',
                    reply_markup=kb.menu_notifications_reg_eng
                )
            else:
                await callback.answer('üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
                await callback.message.edit_text('<b>–•–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤?</b>\n\n'
                                              '‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã)',
                                              parse_mode='HTML',
                                              reply_markup=kb.menu_notifications_reg)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
                                  , show_alert=True)

@rt.callback_query(F.data == 'turn_off_notifications_sub')
async def turn_off_notifications_sub(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('üîï Disable notifications')
                await callback.message.edit_text(
                    '<b>Do you want to turn off notifications about your referrals purchasing a subscription?</b>\n\n'
                    '‚ö†Ô∏è Notifications about referral registrations will remain (if enabled)',
                    parse_mode='HTML',
                    reply_markup=kb.menu_notifications_sub_eng
                )
            else:
                await callback.answer('üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
                await callback.message.edit_text(
                    '<b>–•–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º –ø–æ–¥–ø–∏—Å–∫–∏?</b>\n\n'
                    '‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã)',
                    parse_mode='HTML',
                    reply_markup=kb.menu_notifications_sub
                )
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
                                  , show_alert=True)

@rt.callback_query(F.data == 'back_to_new_ref')
async def back_to_new_ref(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('‚Ü©Ô∏è Back')
                await callback.message.edit_text(
                    f"<b>Your referral has registered in Be Twin</b>\n\n"
                                        f"You have been credited with 1 day of {user.subscription} subscription",
                                        parse_mode='HTML',
                                        reply_markup=kb.turn_off_notifications_eng
                                    )
            else:
                await callback.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
                await callback.message.edit_text(
                    f"<b>–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ Be Twin</b>\n\n"
                    f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω 1 –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ {user.subscription}", parse_mode='HTML',
                    reply_markup=kb.turn_off_notifications
                )
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
                                  , show_alert=True)

@rt.callback_query(F.data == 'back_to_new_ref_sub')
async def back_to_new_ref_sub(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('‚Ü©Ô∏è Back')
                await callback.message.edit_text(
                    f"<b>üí∞ Your referral has subscribed to Be Twin</b>\n\n"
                                f"You have received a "
                                f"{20 if user.referrals in [1, 2, 3, 4, 5] else 30 if user.referrals in [6, 7, 8, 9, 10] else 50}% "
                                f"discount on any subscription",
                                parse_mode="HTML", reply_markup=kb.turn_off_notifications_eng_sub
                            )
            else:
                await callback.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
                await callback.message.edit_text(
                    f"<b>üí∞ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –æ—Ñ–æ—Ä–º–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –≤ Be Twin</b>\n\n"
                                f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–∞ "
                                f"{20 if user.referrals in [1, 2, 3, 4, 5] else 30 if user.referrals in [6, 7, 8, 9, 10] else 50}% "
                                f"—Å–∫–∏–¥–∫–∞ –Ω–∞ –ª—é–±—É—é –ø–æ–¥–ø–∏—Å–∫—É", parse_mode="HTML", reply_markup=kb.turn_off_notifications_sub
                            )
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
                                  , show_alert=True)

@rt.callback_query(F.data == 'confirm_off_notifications')
async def confirm_off_notifications(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            user.notifications_reg = False
            if user.language == 2:
                await callback.answer('‚úÖ Successfull')
                await callback.message.edit_text(
                    f"<b>‚úÖ Notifications about referral registrations have been disabled</b>\n\n"
                    f"To enable notifications, <a href='https://t.me/@xxx'>contact support</a>",
                    parse_mode='HTML', reply_markup=kb.support_eng
                )
            else:
                await callback.answer('‚úÖ –£—Å–ø–µ—à–Ω–æ')
                await callback.message.edit_text(
                    f"<b>‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω—ã</b>\n\n"
                    f"–ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è <a href='https://t.me/@xxx'>–Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</a>",
                    parse_mode='HTML', reply_markup=kb.support
                )
            await session.commit()
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
                                  , show_alert=True)

@rt.callback_query(F.data == 'confirm_off_notifications_sub')
async def confirm_off_notifications_sub(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            user.notifications_sub = False
            if user.language == 2:
                await callback.answer('‚úÖ Successfull')
                await callback.message.answer(
                    f"<b>‚úÖ Notifications about referrals‚Äô subscription purchases have been disabled</b>\n\n"
                    f"To enable notifications, <a href='https://t.me/@xxx'>contact support</a>",
                    parse_mode='HTML', reply_markup=kb.support_eng
                )

            else:
                await callback.answer('‚úÖ –£—Å–ø–µ—à–Ω–æ')
                await callback.message.answer(
                    f"<b>‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã</b>\n\n"
                    f"–ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è <a href='https://t.me/@xxx'>–Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</a>",
                    parse_mode='HTML', reply_markup=kb.support
                )
            await session.commit()
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
                                  , show_alert=True)

@rt.callback_query(F.data == 'support')
async def support(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('üë®‚Äçüíª Support')
                await callback.message.answer('<strong>ü´Ç For any questions, reach us at: @xxx</strong>', parse_mode='HTML',
                                     reply_markup=kb.in_main_menu_eng)

            else:
                await callback.answer('üë®‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
                await callback.message.answer('<strong>ü´Ç –ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –∂–¥–µ–º –≤–∞—Å: @xxx</strong>', parse_mode='HTML',
                                     reply_markup=kb.in_main_menu)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
                                  , show_alert=True)
#–ø–æ–¥–ø–∏—Å–∫–∞
@rt.callback_query(F.data == 'subscription')
async def subscription(callback: CallbackQuery, state: FSMContext):
    user = await rq.get_user(callback.from_user.id)  
    if user:
        await state.clear()
        if user.language == 2:
            if user.subscription == '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞':
                text = ("*You do not have an active subscription, access to the bot‚Äôs functionality is limited\\.* "
                        "Register to activate a free subscription\n\n"
                        "*Limits:*\n"
                        "‚Ä¢ up to 25 letters per day\n"
                        "‚Ä¢ up to 50 email addresses in the database\n"
                        "‚Ä¢ up to 20 beats in the database\n\n"
                        "üéü *Available subscriptions:*\n"
                        ">*premium* ‚Äì 450 letters per day, 50 urgent letters, unlimited email addresses and beats in the database\n"
                        ">*basic* ‚Äì 450 letters per day, 50 urgent letters, up to 450 email addresses in the database, up to 200 beats in the database")
            elif user.subscription == 'free':
                text = ("*You do not have an active subscription, access to the bot‚Äôs functionality is limited\\.*\n\n"
                        "*Limits:*\n"
                        "‚Ä¢ up to 25 letters per day\n"
                        "‚Ä¢ up to 50 email addresses in the database\n"
                        "‚Ä¢ up to 20 beats in the database\n\n"
                        "üéü *Available subscriptions:*\n"
                        ">*premium* ‚Äì 450 letters per day, 50 urgent letters, unlimited email addresses and beats in the database\n"
                        ">*basic* ‚Äì 450 letters per day, 50 urgent letters, up to 450 email addresses in the database, up to 200 beats in the database")
            elif user.subscription == "basic":
                text = (f"Your subscription: *basic*\n\n"
                        f"Days remaining: *{user.subscription_day}* \n\n"
                        "*Limits:*\n"
                        "‚Ä¢ up to 450 letters per day\n"
                        "‚Ä¢ 50 urgent letters\n"
                        "‚Ä¢ up to 450 addresses in the database\n"
                        "‚Ä¢ up to 200 beats in the database\n\n"
                        "üéü *Available subscriptions:*\n"
                        ">*premium* ‚Äì 450 letters per day, 50 urgent letters, unlimited address and beat database\n\n"
                        "You can upgrade to premium at no extra cost\\. The remaining days will be recalculated with a coefficient of 0\\.6")

            else:  
                text = (f"Your subscription: *premium ‚ú¶*\n\n"
                        f"Days remaining: *{user.subscription_day}*\n\n"
                        "*Limits:*\n"
                        "‚Ä¢ 450 letters per day\n"
                        "‚Ä¢ 50 urgent letters\n"
                        "‚Ä¢ unlimited address and beat database\n\n"
                        "üéü *Available subscriptions:*\n"
                        ">*basic* ‚Äì 450 letters per day, 50 urgent letters, up to 450 email addresses in the database, up to 200 beats in the database\n\n"
                        "You can upgrade to *basic* at no extra cost\\. The remaining days will be recalculated with a coefficient of 1\\.6")

            await callback.answer('üéü Subscription')
            if user.subscription == 'free' or user.subscription == '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞':
                await callback.message.edit_text(text, reply_markup=kb.if_free_sub_eng, parse_mode='MarkdownV2')
            else:
                await callback.message.edit_text(text, reply_markup=kb.if_not_free_sub_eng, parse_mode='MarkdownV2')
        else:
            if user.subscription == '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞':
                text = ("*–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω\\.* "
                        "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É\n\n"
                        "*–õ–∏–º–∏—Ç—ã:*\n"
                        "‚Ä¢ –¥–æ 25 –ø–∏—Å–µ–º –≤ –¥–µ–Ω—å\n"
                        "‚Ä¢ –¥–æ 50 –ø–æ—á—Ç –≤ –±–∞–∑–µ\n"
                        "‚Ä¢ –¥–æ 20 –±–∏—Ç–æ–≤ –≤ –±–∞–∑–µ\n\n"
                        "üéü *–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:*\n"
                        ">*premium* ‚Äì 450 –ø–∏—Å–µ–º –≤ –¥–µ–Ω—å, 50 —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º, –±–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –±–∞–∑–∞ –ø–æ—á—Ç –∏ –±–∏—Ç–æ–≤\n"
                        ">*basic* ‚Äì 450 –ø–∏—Å–µ–º –≤ –¥–µ–Ω—å, 50 —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º, –¥–æ 450 –ø–æ—á—Ç, –¥–æ 200 –±–∏—Ç–æ–≤")
            elif user.subscription == 'free':
                text = ("*–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω* \n\n"
                        "*–õ–∏–º–∏—Ç—ã:*\n"
                        "‚Ä¢ –¥–æ 25 –ø–∏—Å–µ–º –≤ –¥–µ–Ω—å\n"
                        "‚Ä¢ –¥–æ 50 –ø–æ—á—Ç –≤ –±–∞–∑–µ\n"
                        "‚Ä¢ –¥–æ 20 –±–∏—Ç–æ–≤ –≤ –±–∞–∑–µ\n\n"
                        "üéü *–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:*\n"
                        ">*premium* ‚Äì 450 –ø–∏—Å–µ–º –≤ –¥–µ–Ω—å, 50 —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º, –±–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –±–∞–∑–∞ –ø–æ—á—Ç –∏ –±–∏—Ç–æ–≤\n"
                        ">*basic* ‚Äì 450 –ø–∏—Å–µ–º –≤ –¥–µ–Ω—å, 50 —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º, –¥–æ 450 –ø–æ—á—Ç, –¥–æ 200 –±–∏—Ç–æ–≤")
            elif user.subscription == "basic":
                text = (f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: *basic*\n\n"
                        f"–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: *{user.subscription_day}* –¥–Ω–µ–π\n\n"
                        "*–õ–∏–º–∏—Ç—ã:*\n"
                        "‚Ä¢ –¥–æ 450 –ø–∏—Å–µ–º –≤ –¥–µ–Ω—å\n"
                        "‚Ä¢ 50 —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º\n"
                        "‚Ä¢ –¥–æ 450 –ø–æ—á—Ç –≤ –±–∞–∑–µ\n"
                        "‚Ä¢ –¥–æ 200 –±–∏—Ç–æ–≤ –≤ –±–∞–∑–µ\n\n"
                        "üéü *–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:*\n"
                        ">*premium* ‚Äì 450 –ø–∏—Å–µ–º –≤ –¥–µ–Ω—å, 50 —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º, –±–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –±–∞–∑–∞ –ø–æ—á—Ç –∏ –±–∏—Ç–æ–≤\n\n"
                        "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ *premium* –±–µ–∑ –¥–æ–ø–ª–∞—Ç—ã\\. –û—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—é—Ç—Å—è —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º 0\\.6")

            else: 
                text = (f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: *premium ‚ú¶*\n\n"
                        f"–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: *{user.subscription_day}* –¥–Ω–µ–π\n\n"
                        "*–õ–∏–º–∏—Ç—ã:*\n"
                        "‚Ä¢ –¥–æ 450 –ø–∏—Å–µ–º –≤ –¥–µ–Ω—å\n"
                        "‚Ä¢ 50 —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º\n"
                        "‚Ä¢ –±–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –±–∞–∑–∞ –ø–æ—á—Ç –∏ –±–∏—Ç–æ–≤\n\n"
                        "üéü *–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:*\n"
                        ">*basic* ‚Äì 450 –ø–∏—Å–µ–º –≤ –¥–µ–Ω—å, 50 —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º, –¥–æ 450 –ø–æ—á—Ç, –¥–æ 200 –±–∏—Ç–æ–≤\n\n"
                        " –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ *basic* –±–µ–∑ –¥–æ–ø–ª–∞—Ç—ã\\. –û—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—é—Ç—Å—è —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º 1\\.6")

            await callback.answer('üéü –ü–æ–¥–ø–∏—Å–∫–∞')
            if user.subscription == 'free' or user.subscription == '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞':
                await callback.message.edit_text(text, reply_markup=kb.if_free_sub, parse_mode='MarkdownV2')
            else:
                await callback.message.edit_text(text, reply_markup=kb.if_not_free_sub, parse_mode='MarkdownV2')
    else:
        await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == 'get_sub')
async def user_get_sub(callback: CallbackQuery, page: int = 1):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user:
            expire_date = user.referral_discount_expire
            days_left = False

            if expire_date:
                delta = expire_date - datetime.now()
                days_left = max(math.ceil(delta.total_seconds() / 86400), 0)
            if user.language == 2:
                if user.block == False:
                    await callback.answer('üí≤Subscribe')
                else:
                    await callback.answer('üí≤Renew')

                basic_premium_list = ['basic', 'premium']
                total_pages = len(basic_premium_list)

                page = (page - 1) % total_pages + 1

                discount_basic = 0
                discount_premium = 0
                if user.active_promo_code:
                    promo_info = await rq.get_promo_info(session, user.active_promo_code)

                    if promo_info and promo_info.promo_type == "discount":
                        if promo_info.subscription_type == 'basic':
                            discount_basic = promo_info.promo_info_discount
                            discount_premium = 0
                        elif promo_info.subscription_type == "premium":
                            discount_premium = promo_info.promo_info_discount
                            discount_basic = 0
                        elif promo_info.subscription_type == "basic+premium":
                            discount_premium = promo_info.promo_info_discount
                            discount_basic = promo_info.promo_info_discount
                if user.used_referral and not user.subscription_start and user.referral_discount_expire > datetime.now():
                    discount_premium += 20
                    discount_basic += 20
                disc = 0
                if user.referrals >= 1:
                    # –∑–∞–ø–æ–º–Ω–∏—Ç—å disc = 20 if user.referrals in [1, 2, 3, 4, 5] else 30 if user.referrals in [6, 7, 8, 9, 10] else 50
                    disc = user.referral_discount
                    discount_premium += disc
                    discount_basic += disc
                current_subscription = basic_premium_list[page - 1]
                if current_subscription == 'basic':
                    discounted_price = int(14 * (1 - discount_basic / 100))

                    discount_expiration_info = (
                        f" (promo code valid until {user.promo_expiration.strftime('%d.%m %H:%M')})"
                        if user.active_promo_code and discount_basic > 0 else f' (referral discount active for {days_left} more days)' if days_left and discounted_price != 14 else ""
                    )
                    subscription_message = ("<strong>Basic subscription</strong>\n\n"
                                            f"Cost: {f"<s>$14</s> " if discounted_price != 14 else ''}${discounted_price}/month"
                                            f"{discount_expiration_info}\n\n"
                                            "<strong>Payment methods:</strong>\n"
                                            "<strong>Telegram Wallet: </strong>@xxx\n"
                                            "<strong>BTC (bitcoin chain): </strong>\n13J81J22ufb9pVNvzVH8fz2yLnWwYzeMsE\n\n"
                                            "<strong>More payment methods here (CashApp, Apple Pay, PayPal, Zelle) ‚Äì </strong>@xxx\n\n"
                                            "‚ÑπÔ∏è To pay, send funds using any of the methods above. Then be sure to "
                                            "<a href='https://t.me/@xxx'>send us the payment receipt (clickable)</a>"
                                            )
                else:
                    discounted_price = int(24 * (1 - discount_premium / 100))

                    discount_expiration_info = (
                        f" (promo code valid until {user.promo_expiration.strftime('%d.%m %H:%M')})"
                        if user.active_promo_code and discount_premium > 0 else f' (referral discount active for {days_left} more days)' if days_left and discounted_price != 24 else ""
                    )
                    subscription_message = ("<strong>Premium subscription</strong>\n\n"
                                            f"Cost: {f"<s>$24</s> " if discounted_price != 24 else ''}${discounted_price}/month"
                                            f"{discount_expiration_info}\n\n"
                                            "<strong>Payment methods:</strong>\n"
                                            "<strong>Telegram Wallet: </strong>@xxx\n"
                                            "<strong>BTC (bitcoin chain): </strong>\n13J81J22ufb9pVNvzVH8fz2yLnWwYzeMsE\n\n"
                                            "<strong>More payment methods here (CashApp, Apple Pay, PayPal, Zelle) ‚Äì </strong>@xxx\n\n"
                                            "‚ÑπÔ∏è To pay, send funds using any of the methods above. Then be sure to "
                                            "<a href='https://t.me/@xxx'>send us the payment receipt (clickable)</a>"
                                            )
                pagination_buttons = [
                    InlineKeyboardButton(text="‚ùÆ", callback_data=f"sub_page_{(page - 2) % total_pages + 1}"),
                    InlineKeyboardButton(text=f"{current_subscription}", callback_data="sub_page_inf"),
                    InlineKeyboardButton(text="‚ùØ", callback_data=f"sub_page_{page % total_pages + 1}")
                ]
                if user.block == False:
                    buttons = [
                        pagination_buttons,
                        [InlineKeyboardButton(text='üîç Enter promo code', callback_data='promo_for_sub')],
                        [InlineKeyboardButton(text="‚Ü©Ô∏è Back", callback_data="back_to_sub")]
                    ]
                else:
                    buttons = [
                        pagination_buttons,
                        [InlineKeyboardButton(text='üîç Enter promo code', callback_data='promo_for_sub')],
                        [InlineKeyboardButton(text="‚Ü©Ô∏è Back", callback_data="back_to_end_sub")]
                    ]

                keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
                await callback.message.edit_text(
                    f"{subscription_message}",
                    parse_mode="HTML", reply_markup=keyboard, disable_web_page_preview=True
                )
            else:

                if user.block == False:
                    await callback.answer('üí≤–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è')
                else:
                    await callback.answer('üí≤–ü—Ä–æ–¥–ª–∏—Ç—å')

                basic_premium_list = ['basic', 'premium']
                total_pages = len(basic_premium_list)

                page = (page - 1) % total_pages + 1

                discount_basic = 0
                discount_premium = 0
                if user.active_promo_code:
                    promo_info = await rq.get_promo_info(session, user.active_promo_code)

                    if promo_info and promo_info.promo_type == "discount":
                        if promo_info.subscription_type == 'basic':
                            discount_basic = promo_info.promo_info_discount
                            discount_premium = 0
                        elif promo_info.subscription_type == "premium":
                            discount_premium = promo_info.promo_info_discount
                            discount_basic = 0
                        elif promo_info.subscription_type == "basic+premium":
                            discount_premium = promo_info.promo_info_discount
                            discount_basic = promo_info.promo_info_discount
                if user.used_referral and not user.subscription_start and user.referral_discount_expire > datetime.now():
                    discount_premium += 20
                    discount_basic += 20
                disc = 0
                if user.referrals >= 1:
                    disc = user.referral_discount
                    discount_premium += disc
                    discount_basic += disc
                current_subscription = basic_premium_list[page - 1]
                if current_subscription == 'basic':
                    discounted_price = int(800 * (1 - discount_basic / 100))

                    discount_expiration_info = (
                        f" (–ø—Ä–æ–º–æ–∫–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ {user.promo_expiration.strftime('%d.%m %H:%M')})"
                        if user.active_promo_code and discount_basic > 0 else f' (—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –µ—â–µ {days_left} –¥–Ω–µ–π)' if days_left and discounted_price != 800 else ""
                    )
                    subscription_message = ("–ü–æ–¥–ø–∏—Å–∫–∞ <strong>basic</strong>\n\n"
                                            f"<strong>–°—Ç–æ–∏–º–æ—Å—Ç—å: {f"<s>800</s> " if discounted_price != 800 else ""}{discounted_price} —Ä—É–±./–º–µ—Å.</strong>"
                                            f"{discount_expiration_info}\n\n"
                                            "<strong>–ú–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã:</strong>\n"
                                            "<strong>–°–±–µ—Ä–±–∞–Ω–∫: </strong>2202206380914403\n"
                                            "<strong>Telegram Wallet: </strong>@xxx\n"
                                            "(–ë–µ–ª–∞—Ä—É—Å—å)<strong> –ï–†–ò–ü –ë–µ–ª–∞–≥—Ä–æ–ø—Ä–æ–º–±–∞–Ω–∫: </strong>\n964112213447/2597\n\n"
                                            "‚ÑπÔ∏è –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ª—é–±—ã–º –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤—ã—à–µ —Å–ø–æ—Å–æ–±–æ–≤. "
                                            "–ó–∞—Ç–µ–º –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ <a href='https://t.me/@xxx'>–Ω–∞–º (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ)</a>"
                                            )
                else:
                    discounted_price = int(1300 * (1 - discount_premium / 100))

                    discount_expiration_info = (
                        f" (–ø—Ä–æ–º–æ–∫–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ {user.promo_expiration.strftime('%d.%m %H:%M')})"
                        if user.active_promo_code and discount_premium > 0 else f' (—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –µ—â–µ {days_left} –¥–Ω–µ–π)' if days_left and discounted_price != 1300 else ""
                    )
                    subscription_message = ("–ü–æ–¥–ø–∏—Å–∫–∞ <strong>premium ‚ú¶</strong>\n\n"
                                            f"<strong>–°—Ç–æ–∏–º–æ—Å—Ç—å: {f"<s>1300</s> " if discounted_price != 1300 else ""}{discounted_price} —Ä—É–±./–º–µ—Å.</strong>"
                                            f"{discount_expiration_info}\n\n"
                                            "<strong>–ú–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã:</strong>\n"
                                            "<strong>–°–±–µ—Ä–±–∞–Ω–∫: </strong>2202206380914403\n"
                                            "<strong>Telegram Wallet: </strong>@xxx\n"
                                            "(–ë–µ–ª–∞—Ä—É—Å—å)<strong> –ï–†–ò–ü –ë–µ–ª–∞–≥—Ä–æ–ø—Ä–æ–º–±–∞–Ω–∫: </strong>\n964112213447/2597\n\n"
                                            "‚ÑπÔ∏è –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ª—é–±—ã–º –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤—ã—à–µ —Å–ø–æ—Å–æ–±–æ–≤. "
                                            "–ó–∞—Ç–µ–º –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ <a href='https://t.me/xxx'>–Ω–∞–º (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ)</a>"
                                            )
                pagination_buttons = [
                    InlineKeyboardButton(text="‚ùÆ", callback_data=f"sub_page_{(page - 2) % total_pages + 1}"),
                    InlineKeyboardButton(text=f"{current_subscription}", callback_data="sub_page_inf"),
                    InlineKeyboardButton(text="‚ùØ", callback_data=f"sub_page_{page % total_pages + 1}")
                ]
                if user.block == False:
                    buttons = [
                        pagination_buttons,
                        [InlineKeyboardButton(text='üîç –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='promo_for_sub')],
                        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_sub")]
                    ]
                else:
                    buttons = [
                        pagination_buttons,
                        [InlineKeyboardButton(text='üîç –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='promo_for_sub')],
                        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_end_sub")]
                    ]


                keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
                await callback.message.edit_text(
                    f"{subscription_message}",
                    parse_mode="HTML", reply_markup=keyboard, disable_web_page_preview=True
                )
@rt.callback_query(F.data.startswith("sub_page_"))
async def change_subscription_page(callback: CallbackQuery):
    page = int(callback.data.split("_")[-1])
    await user_get_sub(callback, page)
@rt.callback_query(F.data == 'change_sub')
async def change_sub(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('Change subscription')
                if user.subscription == 'basic':
                    await callback.message.edit_text('<strong>Change subscription from basic to premium</strong> \n\n'
                                                     f'<strong>Days remaining: {round(user.subscription_day * 0.6)} </strong>',
                                                     parse_mode='HTML', reply_markup=kb.are_you_sure_eng)
                else:
                    await callback.message.edit_text('<strong>Change subscription from premium to basic</strong> \n\n'
                                                     f'<strong>Days remaining: {round(user.subscription_day * 1.6)} </strong>',
                                                     parse_mode='HTML', reply_markup=kb.are_you_sure_eng)
            else:
                await callback.answer('–°–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
                if user.subscription == 'basic':
                    await callback.message.edit_text('<strong>–°–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Å basic –Ω–∞ premium</strong> \n\n'
                                                    f'<strong>–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {round(user.subscription_day * 0.6)} –¥–Ω–µ–π</strong>', parse_mode='HTML',reply_markup=kb.are_you_sure)
                else:
                    await callback.message.edit_text('<strong>–°–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Å premium –Ω–∞ basic</strong> \n\n'
                                                     f'<strong>–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {round(user.subscription_day * 1.6)} –¥–Ω–µ–π</strong>',
                                                     parse_mode='HTML', reply_markup=kb.are_you_sure)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)

@rt.callback_query(F.data == 'user_yes')
async def user_yes(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:

            if user.subscription == 'basic':
                user.subscription_day = round(user.subscription_day * 0.6)
                user.subscription = 'premium'
            elif user.subscription == 'premium':
                user.subscription_day = round(user.subscription_day * 1.6)
                user.subscription = 'basic'

                groups_result = await session.execute(
                    select(Group).filter(Group.user_id == user_id)
                )
                groups = groups_result.scalars().all()

                group_email_counts = []
                for group in groups:
                    count = await session.scalar(
                        select(func.count(Email.id)).filter(Email.group_id == group.id)
                    )
                    group_email_counts.append((group, count))

                group_email_counts.sort(
                    key=lambda x: (-x[1], -x[0].id))  
                groups_to_keep = [g.id for g, _ in group_email_counts[:3]]

                groups_to_delete = [g.id for g, _ in group_email_counts[3:]]

                flagged_email_result = await session.execute(
                    select(Email).filter(Email.user_id == user_id, Email.flags == True,
                                         Email.group_id.in_(groups_to_delete))
                )
                flagged_email = flagged_email_result.scalar_one_or_none()

                if flagged_email:
                    next_email_result = await session.execute(
                        select(Email)
                        .filter(Email.user_id == user_id, Email.group_id.in_(groups_to_keep))
                        .order_by(Email.id.asc())
                    )
                    next_email = next_email_result.scalars().first()
                    if next_email:
                        next_email.flags = True
                    flagged_email.flags = False

                if groups_to_delete:
                    await session.execute(delete(Email).where(Email.group_id.in_(groups_to_delete)))
                    await session.execute(delete(Beat).where(Beat.group_id.in_(groups_to_delete)))
                    await session.execute(delete(Settings).where(Settings.group_id.in_(groups_to_delete)))
                    await session.execute(delete(Group).where(Group.id.in_(groups_to_delete)))

                emails_result = await session.execute(
                    select(Email).filter(Email.group_id.in_(groups_to_keep)).order_by(desc(Email.created_at))
                )
                all_emails = emails_result.scalars().all()
                if len(all_emails) > 450:
                    emails_to_delete = all_emails[450:]
                    email_ids = [e.id for e in emails_to_delete]
                    await session.execute(delete(Email).where(Email.id.in_(email_ids)))

                beats_result = await session.execute(
                    select(Beat).filter(Beat.group_id.in_(groups_to_keep)).order_by(desc(Beat.created_at))
                )
                all_beats = beats_result.scalars().all()
                if len(all_beats) > 200:
                    beats_to_delete = all_beats[200:]
                    beat_ids = [b.id for b in beats_to_delete]
                    await session.execute(delete(Beat).where(Beat.id.in_(beat_ids)))



            if user.language == 2:
                await callback.message.edit_text(f'<strong>You have successfully changed your subscription to {user.subscription}</strong>', parse_mode='HTML')
                if user.subscription in ['free', '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞']:
                    text = (f"*You do not have an active subscription, access to the bot‚Äôs functionality is limited\\.* "
                            f"{"Register to activate a free subscription\n\n" if user.subscription == 'free' else '\n\n'}"
                            f"*–õ–∏–º–∏—Ç—ã:*\n"
                            "*Limits:*\n"
                            "‚Ä¢ up to 25 letters per day\n"
                            "‚Ä¢ up to 50 email addresses in the database\n"
                            "‚Ä¢ up to 20 beats in the database\n\n"
                            "üéü *Available subscriptions:*\n"
                            ">*premium* ‚Äì 450 letters per day, 50 urgent letters, unlimited email addresses and beats in the database\n"
                            ">*basic* ‚Äì 450 letters per day, 50 urgent letters, up to 450 email addresses in the database, up to 200 beats in the database")
                elif user.subscription == "basic":
                    text = (f"Your subscription: *basic*\n\n"
                            f"Days remaining: *{user.subscription_day}* \n\n"
                            "*Limits:*\n"
                            "‚Ä¢ up to 450 letters per day\n"
                            "‚Ä¢ 50 urgent letters\n"
                            "‚Ä¢ up to 450 addresses in the database\n"
                            "‚Ä¢ up to 200 beats in the database\n\n"
                            "üéü *Available subscriptions:*\n"
                            ">*premium* ‚Äì 450 letters per day, 50 urgent letters, unlimited address and beat database\n\n"
                            "You can upgrade to premium at no extra cost\\. The remaining days will be recalculated with a coefficient of 0\\.6")
                else:
                    text = (f"Your subscription: *premium ‚ú¶*\n\n"
                            f"Days remaining: *{user.subscription_day}*\n\n"
                            "*Limits:*\n"
                            "‚Ä¢ 450 letters per day\n"
                            "‚Ä¢ 50 urgent letters\n"
                            "‚Ä¢ unlimited address and beat database\n\n"
                            "üéü *Available subscriptions:*\n"
                            ">*basic* ‚Äì 450 letters per day, 50 urgent letters, up to 450 email addresses in the database, up to 200 beats in the database\n\n"
                            "You can upgrade to *basic* at no extra cost\\. The remaining days will be recalculated with a coefficient of 1\\.6")

                await callback.answer('üéü Subscription')
                if user.subscription in ['free', '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞']:
                    await callback.message.answer(text, reply_markup=kb.if_free_sub_eng, parse_mode='MarkdownV2')
                else:
                    await callback.message.answer(text, reply_markup=kb.if_not_free_sub_eng, parse_mode='MarkdownV2')
            else:
                await callback.message.edit_text(f'–í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {user.subscription}')
                if user.subscription in ['free', '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞']:
                    text = (f"*–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω\\.* "
                            f"{"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É\n\n" if user.subscription == 'free' else '\n\n'}"
                            f"*–õ–∏–º–∏—Ç—ã:*\n"
                            f"‚Ä¢ –¥–æ 25 –ø–∏—Å–µ–º –≤ –¥–µ–Ω—å\n"
                            f"‚Ä¢ –¥–æ 50 –ø–æ—á—Ç –≤ –±–∞–∑–µ\n"
                            f"‚Ä¢ –¥–æ 20 –±–∏—Ç–æ–≤ –≤ –±–∞–∑–µ\n\n"
                            f"üéü *–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:*\n"
                            f">*premium* ‚Äì 450 –ø–∏—Å–µ–º –≤ –¥–µ–Ω—å, 50 —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º, –±–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –±–∞–∑–∞ –ø–æ—á—Ç –∏ –±–∏—Ç–æ–≤\n"
                            f">*basic* ‚Äì 450 –ø–∏—Å–µ–º –≤ –¥–µ–Ω—å, 50 —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º, –¥–æ 450 –ø–æ—á—Ç, –¥–æ 200 –±–∏—Ç–æ–≤")
                elif user.subscription == "basic":
                    text = (f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: *basic*\n\n"
                            f"–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: *{user.subscription_day}* –¥–Ω–µ–π\n\n"
                            "*–õ–∏–º–∏—Ç—ã:*\n"
                            "‚Ä¢ –¥–æ 450 –ø–∏—Å–µ–º –≤ –¥–µ–Ω—å\n"
                            "‚Ä¢ 50 —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º\n"
                            "‚Ä¢ –¥–æ 450 –ø–æ—á—Ç –≤ –±–∞–∑–µ\n"
                            "‚Ä¢ –¥–æ 200 –±–∏—Ç–æ–≤ –≤ –±–∞–∑–µ\n\n"
                            "üéü *–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:*\n"
                            ">*premium* ‚Äì 450 –ø–∏—Å–µ–º –≤ –¥–µ–Ω—å, 50 —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º, –±–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –±–∞–∑–∞ –ø–æ—á—Ç –∏ –±–∏—Ç–æ–≤\n\n"
                            " –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ *premium* –±–µ–∑ –¥–æ–ø–ª–∞—Ç—ã\\. –û—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—é—Ç—Å—è —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º 0\\.6")
                else:
                    text = (f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: *premium ‚ú¶*\n\n"
                            f"–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: *{user.subscription_day}* –¥–Ω–µ–π\n\n"
                            "*–õ–∏–º–∏—Ç—ã:*\n"
                            "‚Ä¢ –¥–æ 450 –ø–∏—Å–µ–º –≤ –¥–µ–Ω—å\n"
                            "‚Ä¢ 50 —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º\n"
                            "‚Ä¢ –±–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –±–∞–∑–∞ –ø–æ—á—Ç –∏ –±–∏—Ç–æ–≤\n\n"
                            "üéü *–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:*\n"
                            ">*basic* ‚Äì 450 –ø–∏—Å–µ–º –≤ –¥–µ–Ω—å, 50 —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º, –¥–æ 450 –ø–æ—á—Ç, –¥–æ 200 –±–∏—Ç–æ–≤\n\n"
                            " –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ *basic* –±–µ–∑ –¥–æ–ø–ª–∞—Ç—ã\\. –û—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—é—Ç—Å—è —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º 1\\.6")

                await callback.answer('üéü –ü–æ–¥–ø–∏—Å–∫–∞')
                if user.subscription in ['free', '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞']:
                    await callback.message.answer(text, reply_markup=kb.if_free_sub, parse_mode='MarkdownV2')
                else:
                    await callback.message.answer(text, reply_markup=kb.if_not_free_sub, parse_mode='MarkdownV2')
            await session.commit()
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == 'back_to_end_sub')
async def back_to_end_sub(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user.language == 2:
            await callback.answer('‚Ü©Ô∏è Back')
            await callback.message.edit_text(
                            '<strong>ü™´ Your subscription has ended!</strong> Mailing has been paused.\n\n'
                            'To continue using the service, choose an action using the buttons below:',
                            parse_mode='HTML', reply_markup=kb.end_sub_eng
                        )
        else:
            await callback.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
            await callback.message.edit_text('<strong>ü™´ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å!</strong> –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n\n'
                                        '–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:',
                                         parse_mode='HTML', reply_markup=kb.end_sub
                                )

@rt.callback_query(F.data == 'back_to_sub')
async def back_to_sub(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('‚Ü©Ô∏è Back')
            else:
                await callback.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
            await subscription(callback, state)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)


@rt.callback_query(F.data == 'adm_back')
async def abm_back(callback: CallbackQuery, state: FSMContext):
    await callback.answer('‚öôÔ∏è ADMIN PANEL')
    await callback.message.edit_text('<strong>–í–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</strong>', reply_markup=kb.adm_start,
                                     parse_mode='HTML')
    await state.clear()


@rt.callback_query(F.data == 'auto')
async def auto(callback: CallbackQuery):
    user_id = callback.from_user.id
    await rq.set_group(callback.from_user.id)
    await callback.answer('Auto')
    user = await rq.get_user(callback.from_user.id)
    if user and not user.block:
        async with async_session() as session:
            result = await session.execute(select(Group).filter(Group.user_id == user_id))
            groups = result.scalars().all()

            if not groups:
                if user.language == 2:
                    await callback.message.edit_text("<strong>You don't have groups</strong>", parse_mode="HTML")
                    return
                else:
                    await callback.message.edit_text("<strong>–£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø.</strong>", parse_mode="HTML")
                    return

            active_group = await session.scalar(select(Group).filter(Group.user_id == user_id, Group.active == True))

            if not active_group:
                active_group = groups[0]
                active_group.active = True
            if user.language == 2:
                await callback.message.edit_text("<strong>Choose an action using the buttons below:</strong>",
                                                 parse_mode="HTML",
                                                 reply_markup=kb.auto_navigation_eng(active_group.name, user))
            else:
                await callback.message.edit_text("<strong>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:</strong>", parse_mode="HTML",
                                                 reply_markup=kb.auto_navigation(active_group.name, user))

            await session.commit()
    else:
        await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == 'auto_page_prev')
async def auto_page_prev(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = await rq.get_user(callback.from_user.id)
    if user and not user.block:
        async with async_session() as session:
            result = await session.execute(select(Group).filter(Group.user_id == user_id))
            groups = result.scalars().all()

            active_group = await session.scalar(select(Group).filter(Group.user_id == user_id, Group.active == True))
            if not active_group:
                active_group = groups[0]

            current_index = groups.index(active_group) if active_group in groups else 0
            prev_group = groups[current_index - 1] if current_index > 0 else groups[-1]

            active_group.active = False
            prev_group.active = True
            try:
                if user.language == 2:
                    await callback.message.edit_text("<strong>Choose an action using the buttons below:</strong>",
                                                     parse_mode="HTML",
                                                     reply_markup=kb.auto_navigation_eng(prev_group.name, user))
                else:
                    await callback.message.edit_text("<strong>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:</strong>", parse_mode="HTML",
                                                     reply_markup=kb.auto_navigation(prev_group.name, user))
            except TelegramBadRequest:
                await check_group(callback)
            await session.commit()
    else:
        await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == 'auto_page_next')
async def auto_page_next(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = await rq.get_user(callback.from_user.id)
    if user and not user.block:
        async with async_session() as session:
            result = await session.execute(select(Group).filter(Group.user_id == user_id))
            groups = result.scalars().all()

            active_group = await session.scalar(select(Group).filter(Group.user_id == user_id, Group.active == True))
            if not active_group:
                active_group = groups[0]

            current_index = groups.index(active_group) if active_group in groups else 0
            next_group = groups[current_index + 1] if current_index < len(groups) - 1 else groups[0]

            active_group.active = False
            next_group.active = True
            try:
                if user.language == 2:
                    await callback.message.edit_text("<strong>Choose an action using the buttons below:</strong>",
                                                     parse_mode="HTML",
                                                     reply_markup=kb.auto_navigation_eng(next_group.name, user))
                else:
                    await callback.message.edit_text("<strong>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:</strong>", parse_mode="HTML",
                                                     reply_markup=kb.auto_navigation(next_group.name, user))
            except TelegramBadRequest:
                await check_group(callback)
            await session.commit()
    else:
        await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)


@rt.callback_query(F.data.startswith('page_auto_info'))
async def check_group(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            async with async_session() as session:
                result = await session.execute(select(Group).filter(Group.user_id == user_id))
                groups = result.scalars().all()

                if not groups:
                    if user.language == 2:
                        await callback.message.edit_text("<strong>You don't have groups</strong>", parse_mode="HTML")
                        return
                    else:
                        await callback.message.edit_text("<strong>–£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø.</strong>", parse_mode="HTML")
                        return

                data_parts = callback.data.split('_')
                page = int(data_parts[-1]) if len(data_parts) > 2 and data_parts[-1].isdigit() else 1

                groups_per_page = 5
                start_index = (page - 1) * groups_per_page
                end_index = start_index + groups_per_page
                groups_to_show = groups[start_index:end_index]

                group_len = len(groups)
                buttons = []
                for group in groups_to_show:
                    buttons.append([InlineKeyboardButton(text=group.name, callback_data=f"group_{group.id}")])
                if user.language == 2:
                    buttons.append(
                        [InlineKeyboardButton(text='‚öôÔ∏è Group actions', callback_data='button_actions')])
                else:
                    buttons.append([InlineKeyboardButton(text='‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è —Å –≥—Ä—É–ø–ø–∞–º–∏', callback_data='button_actions')])

                pagination_buttons = []
                total_pages = (len(groups) + groups_per_page - 1) // groups_per_page

                next_page = 1 if page >= total_pages else page + 1
                prev_page = total_pages if page <= 1 else page - 1

                if user.subscription == 'premium':
                    if group_len > 5:
                        pagination_buttons.append(
                            InlineKeyboardButton(text="‚ùÆ", callback_data=f"page_auto_info_{prev_page}"))
                        pagination_buttons.append(
                            InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="nenujno"))
                        pagination_buttons.append(
                            InlineKeyboardButton(text="‚ùØ", callback_data=f"page_auto_info_{next_page}"))
                if pagination_buttons:
                    buttons.append(pagination_buttons)
                if user.language == 2:
                    buttons.append(
                        [InlineKeyboardButton(text="‚Ü©Ô∏è Back", callback_data="back_to_auto")])
                else:
                    buttons.append(
                        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_auto")])

                keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
                if user.language == 2:
                    await callback.message.edit_text(
                        "<strong>Choose the group you want to work with below:</strong>", reply_markup=keyboard,
                        parse_mode='HTML')
                else:
                    await callback.message.edit_text(
                        "<strong>–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, —Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏–∂–µ:</strong>", reply_markup=keyboard,
                        parse_mode='HTML')
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == 'create_group')
async def create_group(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:

            async with async_session() as session:
                user = await session.scalar(select(User).filter(User.user_id == user_id))

                if not user:
                    await callback.answer(f"{'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.' if user.language in [0, 1] else 'User now found'}")
                    return

                if user.subscription == 'free':
                    if user.language == 2:
                        await callback.answer("You cannot create groups because you have a Free subscription.")
                        return
                    else:
                        await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –≥—Ä—É–ø–ø—ã, —Ç–∞–∫ –∫–∞–∫ —É –≤–∞—Å –ø–æ–¥–ø–∏—Å–∫–∞ Free.")
                        return
                elif user.subscription == 'basic':
                    groups_result = await session.execute(select(Group).filter(Group.user_id == user_id))
                    groups = groups_result.scalars().all()
                    if len(groups) >= 3:
                        await callback.answer(f"‚ùóÔ∏è–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç {len(groups)}/3", show_alert=True)
                        return

            if user.language == 2:
                await callback.answer("Enter the group name")
                await callback.message.edit_text("<strong>Enter the name of the new group</strong>",
                                                 reply_markup=kb.back_to_actions_eng, parse_mode='HTML')
            else:
                await callback.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
                await callback.message.edit_text("<strong>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã</strong>",
                                                 reply_markup=kb.back_to_actions, parse_mode='HTML')

            await state.set_state(GroupState.waiting_for_group_name)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.message(GroupState.waiting_for_group_name)
async def handle_group_name(message: Message, state: FSMContext):
    user_id = message.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            if user.block:  
                try:
                    await message.delete()  
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                group_name = message.text.strip()

                if not group_name:
                    if user.language == 2:
                        await message.answer("Group name cannot be empty.")
                    else:
                        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
                    return

                user_id = message.from_user.id

                async with async_session() as session:
                    new_group = Group(user_id=user_id, name=group_name, active=False)
                    session.add(new_group)
                    await session.commit()

                    result = await session.execute(select(Group).filter(Group.user_id == user_id))
                    groups = result.scalars().all()

                if user.language == 2:
                    await message.answer(f"<strong>‚úÖ Group successfully created</strong>", parse_mode='HTML')
                else:
                    await message.answer(f"<strong>‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞</strong>", parse_mode='HTML')

                if not groups:
                    await message.answer("<strong>–£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø.</strong>", parse_mode="HTML")
                    return

                page = 1
                groups_per_page = 5
                start_index = (page - 1) * groups_per_page
                end_index = start_index + groups_per_page
                groups_to_show = groups[start_index:end_index]

                group_len = len(groups)
                buttons = []
                for group in groups_to_show:
                    buttons.append([InlineKeyboardButton(text=group.name, callback_data=f"group_{group.id}")])


                if user.language == 2:
                    buttons.append(
                        [InlineKeyboardButton(text='‚öôÔ∏è Group actions', callback_data='button_actions')])
                else:
                    buttons.append(
                        [InlineKeyboardButton(text='‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è —Å –≥—Ä—É–ø–ø–∞–º–∏', callback_data='button_actions')])

                pagination_buttons = []
                total_pages = (len(groups) + groups_per_page - 1) // groups_per_page

                next_page = 1 if page >= total_pages else page + 1
                prev_page = total_pages if page <= 1 else page - 1

                if user.subscription == 'premium':
                    if group_len > 5:
                        pagination_buttons.append(
                            InlineKeyboardButton(text="‚ùÆ", callback_data=f"page_auto_info_{prev_page}"))
                        pagination_buttons.append(
                            InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="nenujno"))
                        pagination_buttons.append(
                            InlineKeyboardButton(text="‚ùØ", callback_data=f"page_auto_info_{next_page}"))
                if pagination_buttons:
                    buttons.append(pagination_buttons)

                if user.language == 2:
                    buttons.append(
                        [InlineKeyboardButton(text="‚Ü©Ô∏è Back", callback_data="back_to_auto")])
                else:
                    buttons.append(
                        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_auto")])

                keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
                if user.language == 2:
                    await message.answer("<strong>Choose the group you want to work with below:</strong>",
                                         reply_markup=keyboard, parse_mode='HTML')
                else:
                    await message.answer("<strong>–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, —Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏–∂–µ:</strong>",
                                         reply_markup=keyboard, parse_mode='HTML')
                await state.clear()
async def show_group(message: Message, state: FSMContext):
    user_id = message.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            if user.block:  
                try:
                    await message.delete()  
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                group_name = message.text.strip()

                if not group_name:
                    if user.language == 2:
                        await message.answer("Group name cannot be empty.")
                    else:
                        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
                    return

                user_id = message.from_user.id

                async with async_session() as session:

                    result = await session.execute(select(Group).filter(Group.user_id == user_id))
                    groups = result.scalars().all()

                if not groups:
                    if user.language == 2:
                        await message.answer("<strong>You don't have groups</strong>", parse_mode="HTML")
                    else:
                        await message.answer("<strong>–£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø.</strong>", parse_mode="HTML")
                    return

                page = 1
                groups_per_page = 5
                start_index = (page - 1) * groups_per_page
                end_index = start_index + groups_per_page
                groups_to_show = groups[start_index:end_index]

                group_len = len(groups)
                buttons = []
                for group in groups_to_show:
                    buttons.append([InlineKeyboardButton(text=group.name, callback_data=f"group_{group.id}")])


                if user.language == 2:
                    buttons.append(
                        [InlineKeyboardButton(text='‚öôÔ∏è Group actions', callback_data='button_actions')])
                else:
                    buttons.append(
                        [InlineKeyboardButton(text='‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è —Å –≥—Ä—É–ø–ø–∞–º–∏', callback_data='button_actions')])

                pagination_buttons = []
                total_pages = (len(groups) + groups_per_page - 1) // groups_per_page
                next_page = 1 if page >= total_pages else page + 1
                prev_page = total_pages if page <= 1 else page - 1

                if user.subscription == 'premium':
                    if group_len > 5:
                        pagination_buttons.append(
                            InlineKeyboardButton(text="‚ùÆ", callback_data=f"page_auto_info_{prev_page}"))
                        pagination_buttons.append(
                            InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="nenujno"))
                        pagination_buttons.append(
                            InlineKeyboardButton(text="‚ùØ", callback_data=f"page_auto_info_{next_page}"))
                if pagination_buttons:
                    buttons.append(pagination_buttons)
                if user.language == 2:
                    buttons.append(
                        [InlineKeyboardButton(text="‚Ü©Ô∏è Back", callback_data="back_to_auto")])
                else:
                    buttons.append(
                        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_auto")])

                keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
                if user.language == 2:
                    await message.answer("<strong>Choose the group you want to work with below:</strong>",
                                         reply_markup=keyboard, parse_mode='HTML')
                else:
                    await message.answer("<strong>–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, —Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏–∂–µ:</strong>", reply_markup=keyboard, parse_mode='HTML')
                await state.clear()
@rt.callback_query(F.data == 'button_actions')
async def button_actions(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('‚öôÔ∏è Group actions')
                buttons = []
                buttons.append(
                    [InlineKeyboardButton(text="üì† Rename group", callback_data="rename_group"),
                     InlineKeyboardButton(text='‚ÑπÔ∏è What are groups for?', url='https://telegra.ph/‚Ñπ--Gruppy-05-23')])
                buttons.append([InlineKeyboardButton(text="üóë Delete group", callback_data="delete_group"),
                                InlineKeyboardButton(text="‚ûï Add group", callback_data="create_group")])
                buttons.append(
                    [InlineKeyboardButton(text="‚Ü©Ô∏è Back", callback_data="back_to_group")])
                keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
                await callback.message.edit_text('<strong>Choose group actions using the buttons below:</strong>',
                                                 parse_mode='HTML', reply_markup=keyboard)
            else:
                await callback.answer('‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è —Å –≥—Ä—É–ø–ø–∞–º–∏')
                buttons = []
                buttons.append(
                    [InlineKeyboardButton(text="üì† –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –≥—Ä—É–ø–ø—ã", callback_data="rename_group"), InlineKeyboardButton(text='‚ÑπÔ∏è –î–ª—è —á–µ–≥–æ –Ω—É–∂–Ω—ã –≥—Ä—É–ø–ø—ã?', url='https://telegra.ph/‚Ñπ--Gruppy-05-23')])
                buttons.append([InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="delete_group"),
                                InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data="create_group")])
                buttons.append(
                    [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_group")])
                keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
                await callback.message.edit_text('<strong>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:</strong>', parse_mode='HTML', reply_markup=keyboard)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == 'back_to_group')
async def back_to_group(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            await callback.answer(f'‚Ü©Ô∏è {"–ù–∞–∑–∞–¥" if user.language in [0, 1] else "Back"}')
            await check_group(callback)
            await state.clear()
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == 'back_to_actions')
async def back_to_actions(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('‚Ü©Ô∏è Back')
            else:
                await callback.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
            await button_actions(callback, state)
            await state.clear()
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == 'rename_group')
async def rename_group(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            async with async_session() as session:
                result = await session.execute(select(Group).filter(Group.user_id == user_id))
                groups = result.scalars().all()

                if not groups:
                    if user.language == 2:
                        await callback.message.edit_text("‚ùå You don't have any groups to rename.")
                    else:
                        await callback.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è.")
                    return

                await state.update_data(rename_page=1)
                await state.set_state(GroupState.renaming_group)
                await show_rename_group_page(callback.message, groups, 1, user_id=user_id)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
async def show_rename_group_page(message, groups, page, user_id: int = 0):

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            if user.block:  
                try:
                    await message.delete()  
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                groups_per_page = 5
                total_pages = (len(groups) + groups_per_page - 1) // groups_per_page
                page = max(1, min(page, total_pages))

                start = (page - 1) * groups_per_page
                end = start + groups_per_page
                groups_to_show = groups[start:end]

                buttons = [
                    [InlineKeyboardButton(text=group.name, callback_data=f"rename_selected_{group.id}")]
                    for group in groups_to_show
                ]

                prev_page = total_pages if page == 1 else page - 1
                next_page = 1 if page == total_pages else page + 1
                if user.subscription == "premium":
                    if total_pages > 1:
                        buttons.append([
                            InlineKeyboardButton(text="‚ùÆ", callback_data=f"rename_page_{prev_page}"),
                            InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="noop"),
                            InlineKeyboardButton(text="‚ùØ", callback_data=f"rename_page_{next_page}")
                        ])
                if user.language == 2:
                    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è Back", callback_data="back_to_actions")])
                else:
                    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_actions")])

                keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
                if user.language == 2:
                    await message.edit_text(
                        "<strong>Choose the group you want to rename</strong>",
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
                else:
                    await message.edit_text(
                        "<strong>–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –∏–º—è –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å</strong>",
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
@rt.callback_query(F.data.startswith("rename_page_"))
async def rename_pagination(callback: CallbackQuery, state: FSMContext):
    page = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:

            async with async_session() as session:
                result = await session.execute(select(Group).filter(Group.user_id == user_id))
                groups = result.scalars().all()

            await state.update_data(rename_page=page)
            await show_rename_group_page(callback.message, groups, page)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data.startswith("rename_selected_"))
async def rename_selected(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            group_id = int(callback.data.split("_")[-1])
            await state.update_data(group_to_rename=group_id)
            if user.language == 2:
                await callback.message.edit_text("<b>Enter the new group name</b>", reply_markup=kb.back_to_actions_eng,
                                                 parse_mode='HTML')
            else:
                await callback.message.edit_text("<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –≥—Ä—É–ø–ø—ã</b>", reply_markup=kb.back_to_actions, parse_mode='HTML')
            await state.set_state(GroupState.waiting_for_group_name_swap)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.message(GroupState.waiting_for_group_name_swap)
async def apply_new_group_name(message: Message, state: FSMContext):
    user_id = message.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            if user.block: 
                try:
                    await message.delete()  
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                data = await state.get_data()
                group_id = data.get("group_to_rename")
                new_name = message.text.strip()

                if not new_name:
                    await message.answer("‚ùó –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
                    return

                async with async_session() as session:
                    group = await session.get(Group, group_id)
                    if group:
                        group.name = new_name
                        if user.language == 2:
                            await message.answer(f"‚úÖ <b>Group name successfully changed</b>", parse_mode="HTML")
                        else:
                            await message.answer(f"‚úÖ <b>–ò–º—è –≥—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ</b>", parse_mode="HTML")
                        await session.commit()
                    else:
                        if user.language == 2:
                            await message.answer("‚ùå Group not found.")
                        else:
                            await message.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                await show_group(message, state)
                await state.clear()
GROUPS_PER_PAGE = 5
@rt.callback_query(F.data == 'delete_group')
async def delete_group(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer(
                    '‚ö†Ô∏è After deletion, all data linked to the deleted group ‚Äî beats, addresses, and settings ‚Äî will be permanently removed.'
                    '\n\nRecovery of this data will be impossible!', show_alert=True)
            else:
                await callback.answer('‚ö†Ô∏è –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —É–¥–∞–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–æ–π ‚Äî –±–∏—Ç—ã, –ø–æ—á—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã.'
                                      '\n\n–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!', show_alert=True)
            async with async_session() as session:
                user_result = await session.execute(select(User).filter(User.user_id == user_id))
                user = user_result.scalar_one_or_none()

                result = await session.execute(select(Group).filter(Group.user_id == user_id))
                groups = result.scalars().all()

            if not groups:
                if user.language == 2:
                    await callback.message.edit_text("‚ùå You don't have a group to delete..")
                else:
                    await callback.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                return

            if user.subscription == "basic":
                buttons = [
                    [InlineKeyboardButton(text=group.name, callback_data=f"delgrp_{group.id}")]
                    for group in groups[:3]
                ]
                if user.language == 2:
                    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è Back", callback_data="back_to_actions")])
                else:
                    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_actions")])
                keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
                if user.language == 2:
                    await callback.message.edit_text(
                        "<strong>üî¥ Select the groups you want to delete</strong>",
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
                else:
                    await callback.message.edit_text(
                        "<strong>üî¥ –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å</strong>",
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
            else:
                await state.update_data(delete_page=0)
                await send_delete_group_page(callback.message, user_id, groups, 0)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
async def send_delete_group_page(message, user_id, groups, page):

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            if user.block:  
                try:
                    await message.delete()  
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                total = len(groups)
                total_pages = (total + GROUPS_PER_PAGE - 1) // GROUPS_PER_PAGE

                page = page % total_pages 
                start = page * GROUPS_PER_PAGE
                end = start + GROUPS_PER_PAGE
                groups_to_show = groups[start:end]

                group_len = len(groups)
                buttons = [
                    [InlineKeyboardButton(text=group.name, callback_data=f"delgrp_{group.id}")]
                    for group in groups_to_show
                ]
                if user.subscription == 'premium':
                    if group_len > 5:
                        nav_buttons = [
                            InlineKeyboardButton(text = "‚ùÆ", callback_data=f"delete_page_{page - 1}"),
                            InlineKeyboardButton(text = f"{page + 1}/{total_pages}", callback_data="noop"),
                            InlineKeyboardButton(text = "‚ùØ", callback_data=f"delete_page_{page + 1}"),
                        ]
                        buttons.append(nav_buttons)
                if user.language == 2:
                    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è Back", callback_data="back_to_actions")])
                else:
                    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_actions")])
                keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

                if user.language == 2:
                    await message.edit_text(
                        "<strong>üî¥ Select the groups you want to delete</strong>",
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
                else:
                    await message.edit_text(
                        "<strong>üî¥ –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å</strong>",
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
@rt.callback_query(F.data.startswith("delete_page_"))
async def paginate_delete_group(callback: CallbackQuery, state: FSMContext):
    page = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            async with async_session() as session:
                result = await session.execute(select(Group).filter(Group.user_id == user_id))
                groups = result.scalars().all()

            await send_delete_group_page(callback.message, user_id, groups, page)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data.startswith("delgrp_"))
async def delete_selected_group(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            group_id = int(callback.data.split("_")[1])

            async with async_session() as session:
                group = await session.scalar(select(Group).filter(Group.id == group_id, Group.user_id == user_id))
                if group:
                    result = await session.execute(select(Group).filter(Group.user_id == user_id))
                    groups = result.scalars().all()

                    if len(groups) == 1:
                        if user.language == 2:
                            await callback.answer(
                                "‚ùå You cannot delete the last group",
                                show_alert=True
                            )
                        else:
                            await callback.answer(
                                "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É",
                                show_alert=True
                            )
                        return
                    group_ids = [g.id for g in groups]

                    flagged_email_result = await session.execute(
                        select(Email).filter(Email.user_id == user_id, Email.flags == True)
                    )
                    flagged_email = flagged_email_result.scalar_one_or_none()

                    if flagged_email and flagged_email.group_id in group_ids:
                        next_email_result = await session.execute(
                            select(Email)
                            .filter(Email.user_id == user_id, Email.group_id != flagged_email.group_id)
                            .order_by(Email.id.asc())
                        )
                        next_email = next_email_result.scalars().first()
                        if next_email:
                            next_email.flags = True
                        flagged_email.flags = False

                    group_name = group.name
                    await session.delete(group)
                    if user.language == 2:
                        text = f"‚úÖ Group <strong>{group_name}</strong> successfully deleted."
                    else:
                        text = f"‚úÖ –ì—Ä—É–ø–ø–∞ <strong>{group_name}</strong> —É–¥–∞–ª–µ–Ω–∞."
                    await session.commit()
                else:
                    if user.language == 2:
                        text = "‚ùå Group not found."
                    else:
                        text = "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

                result = await session.execute(select(Group).filter(Group.user_id == user_id))
                groups = result.scalars().all()

            if not groups:
                if user.language == 2:
                    await callback.message.edit_text(f"{text}\n\n<strong>No more groups exist.</strong>",
                                                     parse_mode="HTML")
                else:
                    await callback.message.edit_text(f"{text}\n\n<strong>–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –≥—Ä—É–ø–ø.</strong>", parse_mode="HTML")
                return

            if user.subscription == "basic":
                buttons = [
                    [InlineKeyboardButton(text=group.name, callback_data=f"delgrp_{group.id}")]
                    for group in groups[:3]
                ]
                if user.language == 2:
                    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è Back", callback_data="back_to_actions")])
                else:
                    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_actions")])
                keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

                if user.language == 2:
                    await callback.message.edit_text(
                        f"<strong>üî¥ Select the groups you want to delete</strong>",
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
                else:
                    await callback.message.edit_text(
                        f"<strong>üî¥ –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å</strong>",
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
            else:
                data = await state.get_data()
                current_page = data.get("delete_page", 0)
                await send_delete_group_page(callback.message, user_id, groups, current_page)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == 'back_to_group')
async def back_to_group(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('‚Ü©Ô∏è Back')
            else:
                await callback.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
            await check_group(callback)
            await state.clear()
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data.startswith('group_'))
async def switch_group(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = await rq.get_user(callback.from_user.id)
    group_id = int(callback.data.split('_')[1])
    if user and not user.block:
        async with async_session() as session:
            group = await session.scalar(select(Group).filter(Group.user_id == user_id, Group.id == group_id))
            if group:
                await session.execute(update(Group).filter(Group.user_id == user_id).values({"active": False}))

                group.active = True
                if user.language == 2:
                    await callback.message.edit_text(f"<strong>Choose an action using the buttons below::</strong>",
                                                     parse_mode="HTML",
                                                     reply_markup=kb.auto_navigation_eng(group.name, user))
                else:
                    await callback.message.edit_text(f"<strong>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:</strong>", parse_mode="HTML",
                                                     reply_markup=kb.auto_navigation(group.name, user))
            else:
                if user.language == 2:
                    await callback.answer("Group not found.")
                else:
                    await callback.answer("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await session.commit()
    else:
        await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)

#–ü–æ—á—Ç–∞
@rt.callback_query(F.data == 'mail')
async def mail(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('‚úâÔ∏è Addresses')
            else:
                await callback.answer('‚úâÔ∏è –ü–æ—á—Ç—ã')

            async with async_session() as session:
                active_group = await session.scalar(select(Group).filter(Group.user_id == user_id, Group.active == True))

            if not active_group:
                if user.language == 2:
                    await callback.answer('‚ùå You do not have an active group to display mail.')
                else:
                    await callback.answer('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—á—Ç.')
                return

            async with async_session() as session:
                result = await session.execute(select(Email).filter(Email.user_id == user_id, Email.group_id == active_group.id))
                emails = result.scalars().all()

                if not emails:
                    if user.language == 2:
                        await callback.message.edit_text('ü§∑üèª‚Äç‚ôÇÔ∏è <strong>Your address list is empty</strong>',
                                                         reply_markup=kb.zero_mail_eng, parse_mode='HTML')
                    else:
                        await callback.message.edit_text('ü§∑üèª‚Äç‚ôÇÔ∏è <strong>–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ—á—Ç –ø—É—Å—Ç</strong>',
                                                         reply_markup=kb.zero_mail, parse_mode='HTML')
                    return

                emails_per_page = 30
                total_pages = (len(emails) + emails_per_page - 1) // emails_per_page

                page = 1

                if callback.data.startswith("page_"):
                    page = int(callback.data.split("_")[1])

                start_index = (page - 1) * emails_per_page
                end_index = page * emails_per_page
                current_page_emails = emails[start_index:end_index]

                email_list = '\n'.join([f'{email.email}' for email in current_page_emails])

                if user.language == 2:
                    buttons = kb.mail_navigation_eng(page, total_pages)
                    await callback.message.edit_text(
                        f'<strong>Your address list ({len(emails)})</strong>\n\n{email_list}',
                        parse_mode='HTML', reply_markup=buttons)
                else:
                    buttons = kb.mail_navigation(page, total_pages)
                    await callback.message.edit_text(
                        f'<strong>–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ—á—Ç ({len(emails)})</strong>\n\n{email_list}',
                        parse_mode='HTML', reply_markup=buttons)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)

@rt.callback_query(F.data == 'back_to_auto')
async def back_to_auto(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('‚Ü©Ô∏è Back')
            else:
                await callback.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
            await auto(callback)
            await state.clear()
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == 'mail_back')
async def mail_back(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('‚Ü©Ô∏è Back')
            else:
                await callback.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
            await auto(callback)
            await state.clear()
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)

@rt.callback_query(F.data == 'add_mail')
async def add_mail(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:

            async with async_session() as session:
                active_group = await session.scalar(select(Group).filter(Group.user_id == user_id, Group.active == True))

            if not active_group:
                if user.language == 2:
                    await callback.answer('‚ùå You do not have an active group to add mail.',
                                          reply_markup=kb.back_to_mail_eng)
                else:
                    await callback.answer('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—á—Ç.', reply_markup=kb.back_to_mail)
                return

            async with async_session() as session:
                result = await session.execute(select(User).filter(User.user_id == user_id))
                user = result.scalars().first()

            async with async_session() as session:
                result = await session.execute(select(Email).filter(Email.user_id == user_id, Email.group_id == active_group.id))
                emails = result.scalars().all()

            async with async_session() as session:
                total_emails_count = await session.scalar(select(func.count(Email.id)).filter(Email.user_id == user_id))

            if user.subscription == 'free':
                max_emails = 50
            elif user.subscription == 'basic':
                max_emails = 450
            elif user.subscription == 'premium':
                max_emails = 999999999

            remaining_space = max_emails - total_emails_count
            if user.language == 2:
                if remaining_space <= 0:
                    await callback.answer(
                        f'‚ùóÔ∏è Limit reached {max_emails}/{max_emails}', show_alert=True)
                    return
                await callback.answer('üì© Add')
                await state.set_state(UserState.waiting_for_emails)
                await callback.message.edit_text(f'<strong>Send the addresses you want to add</strong>', parse_mode="HTML",reply_markup=kb.back_to_mail_with_complete_eng)
            else:
                if remaining_space <= 0:
                    await callback.answer(
                        f'‚ùóÔ∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç {max_emails}/{max_emails}', show_alert=True)
                    return
                await callback.answer('üì© –ü–æ–ø–æ–ª–Ω–∏—Ç—å')
                await state.set_state(UserState.waiting_for_emails)
                await callback.message.edit_text(f'<strong>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—á—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å</strong>', parse_mode="HTML",reply_markup=kb.back_to_mail_with_complete)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.message(UserState.waiting_for_emails)
async def handle_emails(msg: Message, state: FSMContext):
    user_id = msg.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            if user.block:  
                try:
                    await msg.delete()  
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:

                email_pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}'
                found_emails = [email.lower() for email in re.findall(email_pattern, msg.text)]

                data = await state.get_data()
                current_emails = data.get("pending_emails", [])
                for email in found_emails:
                    if email not in current_emails:
                        current_emails.append(email)
                await state.update_data(pending_emails=list(current_emails))
@rt.callback_query(F.data == 'finish_mail_upload', UserState.waiting_for_emails)
async def finish_email_upload(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            data = await state.get_data()
            pending_emails = data.get("pending_emails", [])

            if not pending_emails:
                if user.language == 2:
                    await callback.answer("‚ùóÔ∏èNo valid addresses added", show_alert=True)
                else:
                    await callback.answer("‚ùóÔ∏è–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞", show_alert=True)
                return

            async with async_session() as session:
                active_group = await session.scalar(select(Group).where(Group.user_id == user_id, Group.active == True))

                if not active_group or not user:
                    if user.language == 2:
                        await callback.message.edit_text("‚ùå You do not have an active group to add mails.", reply_markup=kb.back_to_mail_eng)
                    else:
                        await callback.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—á—Ç.", reply_markup=kb.back_to_mail)
                    return

                existing_result = await session.execute(
                    select(Email.email).filter(Email.user_id == user_id, Email.group_id == active_group.id)
                )
                existing_emails = set(email.lower() for email in existing_result.scalars().all())

                total_emails_count = await session.scalar(select(func.count(Email.id)).filter(Email.user_id == user_id))
                max_emails = {"free": 50, "basic": 450, "premium": 999999999}.get(user.subscription, 50)
                remaining_space = max_emails - total_emails_count

                if remaining_space <= 0:
                    if user.language == 2:
                        await callback.answer(f'‚ùóÔ∏èLimit reached {max_emails}/{max_emails}', show_alert=True)
                    else:
                        await callback.answer(f'‚ùóÔ∏è–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç {max_emails}/{max_emails}', show_alert=True)
                    return

                all_user_emails_result = await session.execute(
                    select(Email.email).where(Email.user_id == user_id)
                )
                all_user_emails = set(email.lower() for email in all_user_emails_result.scalars().all())

                emails_to_add = []
                for email in pending_emails:
                    if email not in all_user_emails:
                        emails_to_add.append(email)

                emails_to_add = emails_to_add[:remaining_space]
                remaining_unadded = set(pending_emails) - set(emails_to_add)

                for email in emails_to_add:
                    session.add(Email(user_id=user_id, email=email, group_id=active_group.id))

                await session.commit()

            if emails_to_add:
                if user.language == 2:
                    await callback.message.answer(
                        f'<strong>‚úÖ {len(emails_to_add)} addresses added</strong>',
                        parse_mode='HTML'
                    )
                else:
                    await callback.message.answer(
                        f'<strong>‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(emails_to_add)} –ø–æ—á—Ç</strong>',
                        parse_mode='HTML'
                    )

            if remaining_unadded:
                MAX_DISPLAY = 100
                not_added_list = list(remaining_unadded)
                display_part = "\n".join(not_added_list[:MAX_DISPLAY])
                extra_count = len(not_added_list) - MAX_DISPLAY

                if user.language == 2:
                    msg = f"<strong>‚ùóÔ∏èNOT ADDED:</strong>\n\n{display_part}"
                    if extra_count > 0:
                        msg += f"\n<strong>... and {extra_count} more</strong>"
                else:
                    msg = f"<strong>‚ùóÔ∏è–ù–ï –ë–´–õ–ò –î–û–ë–ê–í–õ–ï–ù–´:</strong>\n\n{display_part}"
                    if extra_count > 0:
                        msg += f"\n<strong>... –∏ –µ—â–µ {extra_count}</strong>"

                await callback.message.answer(msg, parse_mode='HTML')

            await state.clear()
            await show_emails(callback.message, user_id=user_id)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)



@rt.callback_query(F.data == 'back_to_mail')
async def back_to_mail(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('‚Ü©Ô∏è Back')
            else:
                await callback.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
            await mail(callback)
            await state.clear()
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)

async def show_emails(msg: Message, page: int = 1, user_id: int = 1):
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
    async with async_session() as session:
        active_group = await session.scalar(select(Group).filter(Group.user_id == user_id, Group.active == True))

    if not active_group:
        if user.language == 2:
            await msg.answer('‚ùå You do not have an active group to display mail.')
        else:
            await msg.answer('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—á—Ç.')
        return

    async with async_session() as session:
        result = await session.execute(select(Email).filter(Email.user_id == user_id, Email.group_id == active_group.id))
        emails = result.scalars().all()

    emails_per_page = 30
    total_pages = (len(emails) + emails_per_page - 1) // emails_per_page

    start = (page - 1) * emails_per_page
    end = page * emails_per_page
    current_page_emails = emails[start:end]

    email_list = '\n'.join([f'{email.email}' for email in current_page_emails])
    if not emails:
        if user.language == 2:
            await msg.answer('ü§∑üèª‚Äç‚ôÇÔ∏è <strong>Your address list is empty</strong>',
                             reply_markup=kb.zero_mail_eng, parse_mode='HTML')
        else:
            await msg.answer('ü§∑üèª‚Äç‚ôÇÔ∏è <strong>–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ—á—Ç –ø—É—Å—Ç</strong>',
                                             reply_markup=kb.zero_mail, parse_mode='HTML')
        return
    if user.language == 2:
        buttons = kb.mail_navigation_eng(page, total_pages)
        await msg.answer(f'<strong>Your address list ({len(emails)})</strong>\n\n{email_list}', parse_mode='HTML',
                         reply_markup=buttons)
    else:
        buttons = kb.mail_navigation(page, total_pages)
        await msg.answer(f'<strong>–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ—á—Ç ({len(emails)})</strong>\n\n{email_list}', parse_mode='HTML', reply_markup=buttons)
@rt.callback_query(F.data.startswith('mailpage_'))
async def page_navigation(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            data = callback.data.split("_") 

            if len(data) != 2:
                if user.language == 2:
                    await callback.answer('‚ùå Error in navigation data.')
                else:
                    await callback.answer('‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.')
                return

            try:
                page = int(data[1])  
            except ValueError:
                if user.language == 2:
                    await callback.answer('‚ùå Invalid data format for page.')
                else:
                    await callback.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã.')
                return

            async with async_session() as session:
                active_group = await session.scalar(select(Group).filter(Group.user_id == user_id, Group.active == True))

                if not active_group:
                    if user.language == 2:
                        await callback.answer('‚ùå You do not have an active group to display mails.')
                    else:
                        await callback.answer('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—á—Ç.')
                    return

                result = await session.execute(select(Email).filter(Email.user_id == user_id, Email.group_id == active_group.id))
                emails = result.scalars().all()

            if not emails:
                if user.language == 2:
                    await callback.message.edit_text('ü§∑üèª‚Äç‚ôÇÔ∏è <strong>Your address list is empty</strong>',
                                                     reply_markup=kb.zero_mail_eng, parse_mode='HTML')
                else:
                    await callback.message.edit_text('ü§∑üèª‚Äç‚ôÇÔ∏è <strong>–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ—á—Ç –ø—É—Å—Ç</strong>',
                                                 reply_markup=kb.zero_mail, parse_mode='HTML')
                return

            emails_per_page = 30
            total_pages = (len(emails) + emails_per_page - 1) // emails_per_page

            page = max(1, min(page, total_pages))

            start_index = (page - 1) * emails_per_page
            end_index = page * emails_per_page
            current_page_emails = emails[start_index:end_index]

            email_list = '\n'.join([f'{email.email}' for email in current_page_emails])

            if user.language == 2:
                buttons = kb.mail_navigation_eng(page, total_pages)
                await callback.message.edit_text(
                    f'<strong>Your address list  ({len(emails)})</strong>\n\n{email_list}',
                    parse_mode='HTML',
                    reply_markup=buttons
                )
            else:
                buttons = kb.mail_navigation(page, total_pages)
                await callback.message.edit_text(
                    f'<strong>–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ—á—Ç ({len(emails)})</strong>\n\n{email_list}',
                    parse_mode='HTML',
                    reply_markup=buttons
                )
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == "page_info")
async def ask_page_number(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer("Enter the page number")
                await callback.message.answer("<strong>Enter the page number you want to go to:</strong>",
                                              parse_mode='HTML', reply_markup=kb.back_to_mail_eng)
            else:
                await callback.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                await callback.message.answer("<strong>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏:</strong>", parse_mode='HTML', reply_markup=kb.back_to_mail)
            await state.set_state(UserState.waiting_for_page_number)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.message(UserState.waiting_for_page_number)
async def go_to_page(msg: Message, state: FSMContext):
    user_id = msg.from_user.id
    page_text = msg.text.strip()
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
    if not page_text.isdigit():
        if user.language == 2:
            await msg.answer("‚ùå Enter a valid value")
        else:
            await msg.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—á–∏—Å–ª–æ).")
        return

    page = int(page_text)

    async with async_session() as session:
        active_group = await session.scalar(
            select(Group).filter(Group.user_id == user_id, Group.active == True)
        )

        if not active_group:
            if user.language == 2:
                await msg.answer("‚ùå You don't have active group")
            else:
                await msg.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≥—Ä—É–ø–ø—ã.")
            await state.clear()
            return

        result = await session.execute(
            select(Email).filter(Email.user_id == user_id, Email.group_id == active_group.id)
        )
        emails = result.scalars().all()

    if not emails:
        if user.language == 2:
            await msg.answer('ü§∑üèª‚Äç‚ôÇÔ∏è <strong>Your address list is empty</strong>',
                             reply_markup=kb.zero_mail_eng, parse_mode='HTML')
        else:
            await msg.answer('ü§∑üèª‚Äç‚ôÇÔ∏è <strong>–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ—á—Ç –ø—É—Å—Ç</strong>',
                                                 reply_markup=kb.zero_mail, parse_mode='HTML')
        await state.clear()
        return

    emails_per_page = 30
    total_pages = (len(emails) + emails_per_page - 1) // emails_per_page

    if page < 1 or page > total_pages:
        if user.language == 2:
            await msg.answer(f"‚ö†Ô∏è Enter a number from 1 to {total_pages}")
        else:
            await msg.answer(f"‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {total_pages}")
        return

    start_index = (page - 1) * emails_per_page
    end_index = page * emails_per_page
    current_page_emails = emails[start_index:end_index]

    email_list = '\n'.join([f'{email.email}' for email in current_page_emails])


    if user.language == 2:
        buttons = kb.mail_navigation_eng(page, total_pages)
        await msg.answer(f'<strong>Your address list ({len(emails)})</strong>\n\n{email_list}', parse_mode='HTML',
                         reply_markup=buttons)
    else:
        buttons = kb.mail_navigation(page, total_pages)
        await msg.answer(f'<strong>–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ—á—Ç ({len(emails)})</strong>\n\n{email_list}', parse_mode='HTML',
                         reply_markup=buttons)
    await state.clear()



@rt.callback_query(F.data=="delete_mail")
async def delete_pack_start(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await call.message.answer(
                    "<strong>Send the addresses you want to delete ‚Äî each on a new line or separated by commas</strong>",
                    parse_mode='HTML', reply_markup=kb.back_to_mail_with_complete_eng)
            else:
                await call.message.answer(
                    "<strong>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—á—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ‚Äî –∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é</strong>",
                    parse_mode='HTML',reply_markup=kb.back_to_mail_with_complete)
            await state.set_state(UserState.waiting_for_delete_emails)
        else:
            await call.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.message(UserState.waiting_for_delete_emails)
async def handle_delete_emails(msg: Message, state: FSMContext):
    user_id = msg.from_user.id
    async with async_session() as session:
        user = await session.scalar(select(User).filter(User.user_id == user_id))

        if user:
            if user.block:
                try:
                    await msg.delete()
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                emails = [email.strip().lower() for email in re.split(r'[\n,]+', msg.text)]
                valid_emails = [email for email in emails if '@' in email and '.' in email]

                data = await state.get_data()
                current_emails = set(data.get("pending_emails", []))
                current_emails.update(valid_emails)
                await state.update_data(pending_emails=list(current_emails))
@rt.callback_query(F.data == 'finish_mail_upload', UserState.waiting_for_delete_emails)
async def finish_email_delete(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            user_id = callback.from_user.id
            data = await state.get_data()
            pending_emails = set(data.get("pending_emails", []))

            if not pending_emails:
                if user.language == 2:
                    await callback.answer("‚ùóÔ∏èNo valid addresses added", show_alert=True)
                else:
                    await callback.answer("‚ùóÔ∏è–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞", show_alert=True)
                return

            user = await session.scalar(select(User).where(User.user_id == user_id))
            if not user:
                if user.language == 2:
                    await callback.message.edit_text("Error: User not found.")
                else:
                    await callback.message.edit_text("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            result = await session.execute(
                select(Email)
                .where(Email.user_id == user_id)
                .order_by(Email.id)
            )
            emails = result.scalars().all()
            email_map = {email.email.lower(): email for email in emails}

            existing_email_set = set(email_map.keys())
            emails_to_remove = list(pending_emails & existing_email_set)

            flagged_email = next((email for email in emails if email.flags), None)

            if flagged_email and flagged_email.email.lower() in emails_to_remove:
                next_email = None
                for email in emails:
                    if email.email.lower() not in emails_to_remove and email.id+1 == flagged_email.id:
                        next_email = email
                        break
                if next_email:
                    next_email.flags = True
                    session.add(next_email)
                else:
                    for email in reversed(emails):
                        if email.email.lower() not in emails_to_remove and email.id < flagged_email.id:
                            email.flags = True
                            session.add(email)
                            break
                flagged_email.flags = False
                session.add(flagged_email)

            if emails_to_remove:
                await session.execute(
                    delete(Email)
                    .where(Email.user_id == user_id, Email.email.in_(emails_to_remove))
                )



            if emails_to_remove:
                if user.language == 2:
                    await callback.message.answer(
                        f'‚úÖ <strong>{len(emails_to_remove)} addresses deleted</strong>', parse_mode='HTML'
                    )
                else:
                    await callback.message.answer(
                        f'‚úÖ <strong>–£–¥–∞–ª–µ–Ω–æ {len(emails_to_remove)} –ø–æ—á—Ç</strong>', parse_mode='HTML'
                    )
            await session.commit()
            await state.clear()
            await show_emails(callback.message, user_id=user_id)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
            , show_alert=True)


#–ë–∏—Ç—ã

@rt.callback_query(F.data == 'back_to_beat')
async def back_to_beat(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('‚Ü©Ô∏è Back')
            else:
                await callback.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
            await beat(callback)
            await state.clear()
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == 'beat_back')
async def beat_back(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('‚Ü©Ô∏è Back')
            else:
                await callback.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
            await auto(callback)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == 'beats')
async def beat(callback: CallbackQuery, page: int = 1):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('üéµ Beats')
            else:
                await callback.answer('üéµ –ë–∏—Ç—ã')

            async with async_session() as session:
                active_group = await session.scalar(select(Group).filter(Group.user_id == user_id, Group.active == True))

            if not active_group:
                if user.language == 2:
                    await callback.message.edit_text('‚ùå You do not have an active group to display bits.')
                else:
                    await callback.message.edit_text('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∏—Ç–æ–≤.')
                return

            async with async_session() as session:
                result = await session.execute(select(Beat).filter(Beat.user_id == user_id, Beat.group_id == active_group.id))
                beats = result.scalars().all()

                if not beats:
                    if user.language == 2:
                        await callback.message.edit_text('ü§∑üèª‚Äç‚ôÇÔ∏è <strong>Your beat list is empty</strong>',
                                                         reply_markup=kb.zero_beats_eng, parse_mode='HTML')
                    else:
                        await callback.message.edit_text('ü§∑üèª‚Äç‚ôÇÔ∏è <strong>–í–∞—à —Å–ø–∏—Å–æ–∫ –±–∏—Ç–æ–≤ –ø—É—Å—Ç</strong>',
                                     reply_markup=kb.zero_beats, parse_mode='HTML')
                    return

                beats_per_page = 10
                total_pages = (len(beats) + beats_per_page - 1) // beats_per_page

                page = max(1, min(page, total_pages))

                start_index = (page - 1) * beats_per_page
                end_index = page * beats_per_page
                current_page_beats = beats[start_index:end_index]

                buttons = []

                for beat in current_page_beats:
                    beat_button = InlineKeyboardButton(text=beat.name, callback_data=f"beat_{beat.id}")
                    buttons.append([beat_button])

                pagination_buttons = [
                    InlineKeyboardButton(
                        text="‚ùÆ",
                        callback_data=f"page_{total_pages if page == 1 else page - 1}"
                    ),
                    InlineKeyboardButton(
                        text=f"{page}/{total_pages}",
                        callback_data="nenujno"
                    ),
                    InlineKeyboardButton(
                        text="‚ùØ",
                        callback_data=f"page_{1 if page == total_pages else page + 1}"
                    )
                ]

                if pagination_buttons:
                    buttons.append(pagination_buttons)
                if user.language == 2:
                    buttons.append([
                        InlineKeyboardButton(text="üóë Delete", callback_data="delete_beat"),
                        InlineKeyboardButton(text="‚ûï Add", callback_data="add_beat")
                    ])

                    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è Back", callback_data="beat_back")])

                    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

                    await callback.message.edit_text(
                        f'<strong>Your beat list ({len(beats)})</strong>\n\n',
                        parse_mode='HTML', reply_markup=keyboard)
                else:
                    buttons.append([
                        InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data="delete_beat"),
                        InlineKeyboardButton(text="‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="add_beat")
                    ])

                    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="beat_back")])

                    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

                    await callback.message.edit_text(
                        f'<strong>–í–∞—à —Å–ø–∏—Å–æ–∫ –±–∏—Ç–æ–≤ ({len(beats)})</strong>\n\n',
                        parse_mode='HTML', reply_markup=keyboard)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == "nenujno")
async def ask_for_page(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.message.answer("<strong>Enter the page number you want to go to:</strong>",
                                              reply_markup=kb.back_to_beat_eng, parse_mode='HTML')
            else:
                await callback.message.answer("<strong>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏:</strong>",
                                              reply_markup=kb.back_to_beat, parse_mode='HTML')
            await state.set_state(UserState.waiting_for_page_number_beats)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.message(UserState.waiting_for_page_number_beats)
async def process_page_input(message: Message, state: FSMContext):
    user_id = message.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            if user.block:
                try:
                    await message.delete()
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                try:
                    page = int(message.text)
                    active_group = await session.scalar(
                        select(Group).filter(Group.user_id == user_id, Group.active == True)
                    )
                    beats_result = await session.execute(
                        select(Beat).filter(Beat.user_id == user_id, Beat.group_id == active_group.id)  
                    )
                    beats = beats_result.scalars().all()
                    total_pages = max((len(beats) + 9) // 10, 1) 

                    if page < 1 or page > total_pages:
                        if user.language == 2:
                            await message.answer(f"‚ö†Ô∏è Enter a number from 1 to {total_pages}")
                        else:
                            await message.answer(f"‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {total_pages}")
                        return

                    await state.clear()
                    await show_beats(message, state, page=page, user_id=user_id)

                except ValueError:
                    if user.language == 2:
                        await message.answer("‚ùóÔ∏èEnter a valid value")
                    else:
                        await message.answer("üö´ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
@rt.callback_query(F.data == 'add_beat')
async def add_beat(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:

            async with async_session() as session:
                active_group = await session.scalar(select(Group).filter(Group.user_id == user_id, Group.active == True))

            if not active_group:
                if user.language == 2:
                    await callback.message.edit_text("‚ùå You don't have an active group to add beats to.",
                                                     reply_markup=kb.back_to_beat_eng)
                else:
                    await callback.message.edit_text('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∏—Ç–æ–≤.', reply_markup=kb.back_to_beat)
                return

            async with async_session() as session:
                total_beats_count = await session.scalar(select(func.count(Beat.id)).filter(Beat.user_id == user_id))

            if user.subscription == 'free':
                max_beats = 20
            elif user.subscription == 'basic':
                max_beats = 200
            elif user.subscription == 'premium':
                max_beats = 9999999999

            if user.language == 2:
                remaining_space = max_beats - total_beats_count
                if remaining_space <= 0:
                    await callback.answer(
                        f'‚ùóÔ∏èLimit reached {total_beats_count}/{max_beats}', show_alert=True)
                    return
                await callback.answer('‚ûï Add')
                await state.set_state(GroupState.waiting_for_beat)
                if user.subscription == 'premium':
                    await callback.message.answer(f'<strong>Send the beats you want to add</strong>',
                                                  parse_mode='HTML', reply_markup=kb.confirm_upload_beat_eng)
                else:
                    await callback.message.answer(f'<strong>Send the beats you want to add</strong>',
                                                  parse_mode='HTML', reply_markup=kb.confirm_upload_beat_eng)
            else:
                remaining_space = max_beats - total_beats_count
                if remaining_space <= 0:
                    await callback.answer(
                        f'‚ùóÔ∏è–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç {total_beats_count}/{max_beats}', show_alert=True)
                    return
                await callback.answer('‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å')
                await state.set_state(GroupState.waiting_for_beat)
                if user.subscription == 'premium':
                    await callback.message.answer(f'<strong>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–∏—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å</strong>', parse_mode='HTML',reply_markup=kb.confirm_upload_beat)
                else:
                    await callback.message.answer(f'<strong>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–∏—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å</strong>', parse_mode='HTML',reply_markup=kb.confirm_upload_beat)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(GroupState.waiting_for_beat, F.data == "finish_beat_upload")
async def finish_upload(callback: CallbackQuery, state: FSMContext):
    message = callback.message
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            data = await state.get_data()
            beats = data.get("beats", [])

            if not beats:
                await state.clear()
                if user.language == 2:
                    await callback.answer("‚ùóÔ∏èYou didn‚Äôt send any beats", show_alert=True)
                else:
                    await callback.answer("‚ùóÔ∏è–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–∏—Ç–∞", show_alert=True)
                return

            print(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            async with async_session() as session:
                result = await session.execute(
                    select(Group).filter(Group.user_id == user_id, Group.active == True)
                )
                active_group = result.scalars().first()
            if active_group:
                print(f"–ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞: {active_group.id}")
            else:
                await state.clear()
                if user.language == 2:
                    await message.answer("‚ùå You don't have an active group to add beats to.",
                                         reply_markup=kb.back_to_beat_eng)
                else:
                    await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∏—Ç–æ–≤.", reply_markup=kb.back_to_beat)
                print("–ê–∫—Ç–∏–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            async with async_session() as session:
                total_beats_count = await session.scalar(
                    select(func.count(Beat.id)).filter(Beat.user_id == user_id)
                )

            max_beats = {
                "free": 20,
                "basic": 200,
                "premium": 9999999999
            }.get(user.subscription, 20)

            remaining_space = max_beats - total_beats_count
            added = 0
            duplicates = []
            skipped_due_to_limit = []

            for beat in beats:
                if remaining_space <= 0:
                    skipped_due_to_limit.append(beat["file_name"])
                    continue

                async with async_session() as session:
                    existing = await session.scalar(
                        select(Beat).filter(Beat.user_id == user_id, Beat.group_id==active_group.id, Beat.file_id == beat["file_id"])
                    )

                if existing:
                    duplicates.append(beat["file_name"])
                    continue

                async with async_session() as session:
                    new_beat = Beat(
                        user_id=user_id,
                        file_id=beat["file_id"],
                        file_format=beat["file_format"],
                        name=beat["file_name"],
                        group_id=active_group.id
                    )
                    session.add(new_beat)
                    await session.commit()

                added += 1
                remaining_space -= 1

            await state.clear()
            if user.language == 2:
                if added > 0:
                    response = f"‚úÖ <b>{added} beats added</b>"
                    await message.answer(response, parse_mode='HTML')
                await callback.answer('‚úÖ Ready')

                if duplicates or skipped_due_to_limit:
                    text = "‚ùóÔ∏è<b>Ô∏èNOT ADDED:</b>"

                    keyboard = InlineKeyboardMarkup(
                        inline_keyboard=[
                            *[[InlineKeyboardButton(text=name, callback_data="beat_info_ignore")] for name in
                              duplicates],
                            *[[InlineKeyboardButton(text=name, callback_data="beat_info_ignore")] for name in
                              skipped_due_to_limit]
                        ]
                    )

                    await message.answer(text, reply_markup=keyboard, parse_mode='HTML')
            else:
                if added > 0:
                    response = f"‚úÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ {added} –±–∏—Ç–æ–≤</b>"
                    await message.answer(response, parse_mode='HTML')
                await callback.answer('‚úÖ –ì–æ—Ç–æ–≤–æ')

                if duplicates or skipped_due_to_limit:
                    text = "‚ùóÔ∏è<b>–ù–ï –ë–´–õ–ò –î–û–ë–ê–í–õ–ï–ù–´:</b>"

                    keyboard = InlineKeyboardMarkup(
                        inline_keyboard=[
                            *[[InlineKeyboardButton(text=name, callback_data="beat_info_ignore")] for name in duplicates],
                            *[[InlineKeyboardButton(text=name, callback_data="beat_info_ignore")] for name in
                              skipped_due_to_limit]
                        ]
                    )

                    await message.answer(text, reply_markup=keyboard, parse_mode='HTML')

            await show_beats(callback.message, state, user_id=user_id)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == "delete_temp_msg")
async def delete_temp_message(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            await callback.message.delete()
            await callback.answer()
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.message(GroupState.waiting_for_beat)
async def handle_beats(msg: Message, state: FSMContext):
    user_id = msg.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            if user.block:  
                try:
                    await msg.delete()  
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                if msg.audio or msg.document:
                    file = msg.audio or msg.document
                    file_format = file.file_name.split('.')[-1].lower() if file.file_name else ''

                    if user.language == 2:
                        if file_format not in ['mp3', 'wav']:
                            return await msg.answer("Only .mp3 or .wav files are accepted.")
                    else:
                        if file_format not in ['mp3', 'wav']:
                            return await msg.answer("–¢–æ–ª—å–∫–æ .mp3 –∏–ª–∏ .wav —Ñ–∞–π–ª—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.")

                    data = await state.get_data()
                    if "beats" not in data:
                        data["beats"] = []
                    data["beats"].append({
                        "file_id": file.file_id,
                        "file_name": file.file_name,
                        "file_format": file_format
                    })
                    await state.update_data(beats=data["beats"])
async def show_beats(msg: Message, state: FSMContext, page: int = 1, user_id: int = 0):

    print(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    async with async_session() as session:
        result = await session.execute(
            select(Group).filter(Group.user_id == user_id, Group.active == True)
        )
        active_group = result.scalars().first()
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()


    if active_group:
        print(f"–ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞: {active_group.id}")
    else:
        await state.clear()
        if user.language == 2:
            await msg.answer("‚ùå You don't have an active group to display bits.", reply_markup=kb.back_to_beat_eng)
        else:
            await msg.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∏—Ç–æ–≤.", reply_markup=kb.back_to_beat)
        print(f"–ê–∫—Ç–∏–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        return

    async with async_session() as session:
        result = await session.execute(select(Beat).filter(Beat.user_id == user_id, Beat.group_id == active_group.id))
        beats = result.scalars().all()

        if not beats:
            if user.language == 2:
                await msg.answer('ü§∑üèª‚Äç‚ôÇÔ∏è <strong>Your beat list is empty</strong>',
                                 reply_markup=kb.zero_beats_eng, parse_mode='HTML')
            else:
                await msg.answer('ü§∑üèª‚Äç‚ôÇÔ∏è <strong>–í–∞—à —Å–ø–∏—Å–æ–∫ –±–∏—Ç–æ–≤ –ø—É—Å—Ç</strong>',
                                                 reply_markup=kb.zero_beats, parse_mode='HTML')
            return


        beats_per_page = 10
        total_pages = (len(beats) + beats_per_page - 1) // beats_per_page

        page = max(1, min(page, total_pages))

        start_index = (page - 1) * beats_per_page
        end_index = page * beats_per_page
        current_page_beats = beats[start_index:end_index]

        buttons = []

        for beat in current_page_beats:
            beat_button = InlineKeyboardButton(text=beat.name, callback_data=f"beat_{beat.id}")
            buttons.append([beat_button])

        pagination_buttons = [
            InlineKeyboardButton(
                text="‚ùÆ",
                callback_data=f"page_{total_pages if page == 1 else page - 1}"
            ),
            InlineKeyboardButton(
                text=f"{page}/{total_pages}",
                callback_data="nenujno"
            ),
            InlineKeyboardButton(
                text="‚ùØ",
                callback_data=f"page_{1 if page == total_pages else page + 1}"
            )
        ]

        if pagination_buttons:
            buttons.append(pagination_buttons)

        if user.language == 2:
            buttons.append([
                InlineKeyboardButton(text="üóë Delete", callback_data="delete_beat"),
                InlineKeyboardButton(text="‚ûï Add", callback_data="add_beat")
            ])

            buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è Back", callback_data="beat_back")])

            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

            await msg.answer(
                f'<strong>Your beat list ({len(beats)})</strong>\n\n',
                parse_mode='HTML', reply_markup=keyboard)
        else:
            buttons.append([
                InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data="delete_beat"),
                InlineKeyboardButton(text="‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="add_beat")
            ])

            buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="beat_back")])

            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

            await msg.answer(
                f'<strong>–í–∞—à —Å–ø–∏—Å–æ–∫ –±–∏—Ç–æ–≤ ({len(beats)})</strong>\n\n',
                parse_mode='HTML', reply_markup=keyboard)
        await state.clear()
@rt.callback_query(F.data.startswith("beat_"))
async def send_beat(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            beat_id = int(callback.data.split("_")[1])

            async with async_session() as session:
                beat = await session.scalar(select(Beat).filter(Beat.id == beat_id))

            if not beat:
                if user.language == 2:
                    await callback.answer("‚ùå Beat not found", show_alert=True)
                else:
                    await callback.answer("‚ùå –ë–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            await callback.message.answer_audio(audio=beat.file_id)
            await callback.answer()
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == "delete_beat")
async def start_delete_beat(callback: CallbackQuery, state: FSMContext, page: int = 1):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            await state.update_data(delete_beat_page=page)
            await state.set_state(UserState.waiting_for_delete_beat)
            async with async_session() as session:
                active_group = await session.scalar(select(Group).filter(Group.user_id == user_id, Group.active == True))
            async with async_session() as session:
                beats = await session.scalars(select(Beat).filter(Beat.user_id == user_id, Beat.user_id == user_id, Beat.group_id == active_group.id))
                beats = list(beats)

            if not beats:
                if user.language == 2:
                    await callback.answer("You have no bits available.", show_alert=True)
                else:
                    await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏—Ç–æ–≤.", show_alert=True)
                return

            beats_per_page = 10
            total_pages = (len(beats) + beats_per_page - 1) // beats_per_page
            page = max(1, min(page, total_pages))

            start_idx = (page - 1) * beats_per_page
            end_idx = page * beats_per_page
            beats_on_page = beats[start_idx:end_idx]

            keyboard = InlineKeyboardMarkup(inline_keyboard=[])

            for beat in beats_on_page:
                keyboard.inline_keyboard.append([InlineKeyboardButton(text=beat.name, callback_data=f"delete_beat_{beat.id}")])

            pagination_buttons = [
                InlineKeyboardButton(
                    text="‚ùÆ",
                    callback_data=f"delete_beat_page_{total_pages if page == 1 else page - 1}"
                ),
                InlineKeyboardButton(
                    text=f"{page}/{total_pages}",
                    callback_data="nenujno_delete"
                ),
                InlineKeyboardButton(
                    text="‚ùØ",
                    callback_data=f"delete_beat_page_{1 if page == total_pages else page + 1}"
                )
            ]

            if pagination_buttons:
                keyboard.inline_keyboard.append(pagination_buttons)

            if user.language == 2:
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(text="üóë Delete via import", callback_data="start_mass_delete")
                ])
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(text="‚Ü©Ô∏è Back", callback_data="cancel_delete_beat")
                ])
                await callback.answer("üóë Delete")
                await callback.message.edit_text("üî¥ <strong>Select the beats you want to delete</strong>",
                                                 parse_mode="HTML", reply_markup=keyboard)
                await callback.answer()
            else:
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –∏–º–ø–æ—Ä—Ç", callback_data="start_mass_delete")
                ])
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="cancel_delete_beat")
                ])
                await callback.answer("üóë –£–¥–∞–ª–∏—Ç—å")
                await callback.message.edit_text("üî¥ <strong>–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å</strong>", parse_mode="HTML",reply_markup=keyboard)
                await callback.answer()
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == "nenujno_delete")
async def ask_for_page_delete(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.message.answer("<strong>Enter the page number you want to go to:</strong>",
                                              reply_markup=kb.back_to_beat_eng, parse_mode='HTML')
            else:
                await callback.message.answer("<strong>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏:</strong>", reply_markup=kb.back_to_beat, parse_mode='HTML')
            await state.set_state(UserState.waiting_for_page_number_beats_delete)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.message(UserState.waiting_for_page_number_beats_delete)
async def process_page_input_delete(message: Message, state: FSMContext):
    user_id = message.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            if user.block:  
                try:
                    await message.delete() 
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                try:
                    page = int(message.text)
                    await state.clear()
                    await show_start_delete_beat(message, state, page=page, user_id=user_id)
                except ValueError:
                    if user.language == 2:
                        await message.answer("‚ùóÔ∏èEnter a valid value")
                    else:
                        await message.answer("üö´ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
async def show_start_delete_beat(message: Message, state: FSMContext, page: int = 1, user_id: int = 0):
    await state.update_data(delete_beat_page=page)
    await state.set_state(UserState.waiting_for_delete_beat)
    async with async_session() as session:
        print(f'user id: {user_id}')
        active_group = await session.scalar(select(Group).filter(Group.user_id == user_id, Group.active == True))
        print(f'Active group: {active_group}')
        beats = await session.scalars(select(Beat).filter(Beat.user_id == user_id, Beat.group_id == active_group.id))
        beats = list(beats)
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

    beats_per_page = 10
    total_pages = (len(beats) + beats_per_page - 1) // beats_per_page
    page = max(1, min(page, total_pages))

    start_idx = (page - 1) * beats_per_page
    end_idx = page * beats_per_page
    beats_on_page = beats[start_idx:end_idx]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    for beat in beats_on_page:
        keyboard.inline_keyboard.append([InlineKeyboardButton(text=beat.name, callback_data=f"delete_beat_{beat.id}")])

    pagination_buttons = [
        InlineKeyboardButton(
            text="‚ùÆ",
            callback_data=f"delete_beat_page_{total_pages if page == 1 else page - 1}"
        ),
        InlineKeyboardButton(
            text=f"{page}/{total_pages}",
            callback_data="nenujno_delete"
        ),
        InlineKeyboardButton(
            text="‚ùØ",
            callback_data=f"delete_beat_page_{1 if page == total_pages else page + 1}"
        )
    ]

    if pagination_buttons:
        keyboard.inline_keyboard.append(pagination_buttons)
    if user.language == 2:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="üóë Delete via import", callback_data="start_mass_delete")
        ])
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="‚Ü©Ô∏è Back", callback_data="cancel_delete_beat")
        ])
        if not beats:
            await message.answer("You have no bits available.", show_alert=True)
            await show_beats(message, state, user_id=user_id)
            return
        await message.answer("<strong>üî¥ Select the beats you want to delete</strong>", parse_mode='HTML',
                             reply_markup=keyboard)
    else:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –∏–º–ø–æ—Ä—Ç", callback_data="start_mass_delete")
        ])
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="cancel_delete_beat")
        ])
        if not beats:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏—Ç–æ–≤.", show_alert=True)
            await show_beats(message, state, user_id=user_id)
            return
        await message.answer("üî¥ <strong>–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å</strong>", parse_mode='HTML',reply_markup=keyboard)
@rt.callback_query(F.data == "start_mass_delete")
async def start_mass_delete(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            await state.set_state(UserState.waiting_for_delete_beat)
            await state.update_data(beats_to_delete=[])

            if user.language == 2:
                await callback.message.answer(
                    "<strong>Send the beats you want to delete</strong>", parse_mode="HTML",
                    reply_markup=kb.confirm_upload_beat_eng
                )
            else:
                await callback.message.answer(
                    "<strong>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–∏—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å</strong>", parse_mode="HTML",reply_markup=kb.confirm_upload_beat
                )
            await callback.answer()
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.message(F.audio, UserState.waiting_for_delete_beat)
async def collect_audio(message: Message, state: FSMContext):
    user_id = message.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            if user.block:  
                try:
                    await message.delete()  
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                audio_file = message.audio  
                logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ: {audio_file.file_id}")  

                audio_name = audio_file.file_name  

                user_data = await state.get_data()
                audio_files = user_data.get("audio_files", [])
                audio_files.append(audio_name)  
                await state.update_data(audio_files=audio_files)
@rt.callback_query(F.data == "finish_beat_upload", UserState.waiting_for_delete_beat)
async def delete_selected_beats(callback: CallbackQuery, state: FSMContext):
    message = callback.message
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            user_data = await state.get_data()
            beats_to_delete = user_data.get("audio_files", [])
            async with async_session() as session:
                active_group = await session.scalar(select(Group).filter(Group.user_id == user_id, Group.active == True))
            if not beats_to_delete:
                if user.language == 2:
                    await callback.answer("‚ùóÔ∏èYou didn‚Äôt send any beats")
                else:
                    await callback.answer("‚ùóÔ∏è–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–∏—Ç–∞")
                return

            async with async_session() as session:
                beats = await session.scalars(
                    select(Beat).filter(Beat.user_id == user_id, Beat.group_id == active_group.id, Beat.name.in_(beats_to_delete))
                )
                beats = list(beats)

                if not beats:
                    await state.clear()
                    await show_start_delete_beat(message, state, user_id=user_id)
                    return

                for beat in beats:
                    await session.delete(beat)
                if beats:
                    if user.language == 2:
                        await callback.message.answer(f'<strong>‚úÖ {len(beats)} beats deleted</strong>',
                                                      parse_mode='HTML')
                    else:
                        await callback.message.answer(f'<strong>‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(beats)} –±–∏—Ç–æ–≤</strong>', parse_mode='HTML')
                await session.commit()

            await state.clear()
            await show_start_delete_beat(message, state, user_id=user_id)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data.startswith("delete_beat_page_"))
async def change_delete_beat_page(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            page = int(callback.data.split("_")[-1])
            await start_delete_beat(callback, state, page)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data.startswith("delete_beat_"))
async def delete_beat(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            beat_id = int(callback.data.split("_")[2])

            async with async_session() as session:
                beat = await session.scalar(select(Beat).filter(Beat.id == beat_id))
                if not beat:
                    await callback.answer("‚ùå –ë–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return

                await session.delete(beat)
                await session.commit()

            if user.language == 2:
                await callback.answer("‚úÖ Beat removed")
            else:
                await callback.answer("‚úÖ –ë–∏—Ç —É–¥–∞–ª–µ–Ω")

            async with async_session() as session:
                active_group = await session.scalar(select(Group).filter(Group.user_id == user_id, Group.active == True))
                beats = await session.scalars(select(Beat).filter(Beat.user_id == user_id, Beat.group_id == active_group.id))
                beats = list(beats)

            if not beats:
                await callback.message.delete()
                await show_beats(callback.message, state, user_id=user_id)
                return

            user_data = await state.get_data()
            current_page = user_data.get("delete_beat_page", 1)

            beats_per_page = 10  
            total_pages = (len(beats) + beats_per_page - 1) // beats_per_page

            if current_page > total_pages:
                current_page = total_pages

            await start_delete_beat(callback, state, current_page)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == "cancel_delete_beat")
async def cancel_delete_beat(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            await state.clear()
            await beat(callback)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data.startswith("page_"))
async def change_page(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('üéµ Beats')
            else:
                await callback.answer('üéµ –ë–∏—Ç—ã')

            try:
                page = int(callback.data.split("_")[1])
            except ValueError:
                return

            async with async_session() as session:
                active_group = await session.scalar(select(Group).filter(Group.user_id == user_id, Group.active == True))

            if not active_group:
                if user.language == 2:
                    await callback.answer("‚ùå You don't have an active group to display bits.")
                else:
                    await callback.answer('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∏—Ç–æ–≤.')
                return

            async with async_session() as session:
                result = await session.execute(select(Beat).filter(Beat.user_id == user_id, Beat.group_id == active_group.id))
                beats = result.scalars().all()

                if not beats:
                    if user.language == 2:
                        await callback.message.edit_text('ü§∑üèª‚Äç‚ôÇÔ∏è <strong>Your beat list is empty</strong>',
                                                         reply_markup=kb.zero_beats_eng, parse_mode='HTML')
                    else:
                        await callback.message.edit_text('ü§∑üèª‚Äç‚ôÇÔ∏è <strong>–í–∞—à —Å–ø–∏—Å–æ–∫ –±–∏—Ç–æ–≤ –ø—É—Å—Ç</strong>',
                                                         reply_markup=kb.zero_beats, parse_mode='HTML')
                    return

                beats_per_page = 10
                total_pages = (len(beats) + beats_per_page - 1) // beats_per_page

                page = max(1, min(page, total_pages))

                start_index = (page - 1) * beats_per_page
                end_index = page * beats_per_page
                current_page_beats = beats[start_index:end_index]

                buttons = []

                for beat in current_page_beats:
                    beat_button = InlineKeyboardButton(text=beat.name, callback_data=f"beat_{beat.id}")
                    buttons.append([beat_button])

                pagination_buttons = [
                    InlineKeyboardButton(
                        text="‚ùÆ",
                        callback_data=f"page_{total_pages if page == 1 else page - 1}"
                    ),
                    InlineKeyboardButton(
                        text=f"{page}/{total_pages}",
                        callback_data="nenujno"
                    ),
                    InlineKeyboardButton(
                        text="‚ùØ",
                        callback_data=f"page_{1 if page == total_pages else page + 1}"
                    )
                ]

                if pagination_buttons:
                    buttons.append(pagination_buttons)

                if user.language == 2:
                    buttons.append([
                        InlineKeyboardButton(text="üóë Delete", callback_data="delete_beat"),
                        InlineKeyboardButton(text="‚ûï Add", callback_data="add_beat")
                    ])

                    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è Back", callback_data="beat_back")])

                    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

                    await callback.message.edit_text(
                        f'<strong>Your beat list ({len(beats)})</strong>\n\n',
                        parse_mode='HTML', reply_markup=keyboard)
                else:
                    buttons.append([
                        InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data="delete_beat"),
                        InlineKeyboardButton(text="‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="add_beat")
                    ])

                    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="beat_back")])

                    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

                    await callback.message.edit_text(
                        f'<strong>–í–∞—à —Å–ø–∏—Å–æ–∫ –±–∏—Ç–æ–≤ ({len(beats)})</strong>\n\n',
                        parse_mode='HTML', reply_markup=keyboard)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)



#–ù–∞—Å—Ç—Ä–æ–π–∫–∏
@rt.callback_query(F.data == 'settings_back')
async def settings_back(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('‚Ü©Ô∏è Back')
            else:
                await callback.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
            await auto(callback)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == 'back_to_settings')
async def back_to_settings(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('‚Ü©Ô∏è Back')
            else:
                await callback.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
            await setting(callback)
            await state.clear()
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == 'back_to_interval')
async def back_to_interval(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('‚Ü©Ô∏è Back')
            else:
                await callback.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
            await pack_interval(callback)
            await state.clear()
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == 'back_to_dispatch_time')
async def back_to_interval(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('‚Ü©Ô∏è Back')
            else:
                await callback.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
            await dispatch_time(callback, state)
            await state.clear()
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)

@rt.callback_query(F.data == 'settings')
async def setting(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('‚öôÔ∏è Settings')
            else:
                await callback.answer('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
            async with async_session() as session:
                active_group = await session.scalar(select(Group).filter(Group.user_id == user_id, Group.active == True))

            async with async_session() as session:
                one_on_off = False
                result = await session.execute(select(Settings).where(Settings.group_id == active_group.id))
                settings = result.scalars().first()
                one_active_group = await session.scalar(
                    select(Group).filter(Group.user_id == callback.from_user.id, Group.active == True))
                one_result = await session.execute(
                    select(OneTimeSettings).where(OneTimeSettings.group_id == one_active_group.id))
                one_settings = one_result.scalars().first()
                if one_settings:
                    one_on_off = one_settings.on_of_auto

                if not settings:
                    other_settings_result = await session.execute(
                        select(Settings).where(Settings.user_id == user_id, Settings.group_id != active_group.id)
                    )
                    other_settings = other_settings_result.scalars().first()

                    settings = Settings(
                        group_id=active_group.id,
                        periodicity=other_settings.periodicity if other_settings else 'everyday',
                        send_time=other_settings.send_time if other_settings else datetime.combine(datetime.today(),
                                                                                                   time(19, 0)),
                        quantity_beat=other_settings.quantity_beat if other_settings else 2,
                        interval=other_settings.interval if other_settings else 0,
                        user_id=user_id
                    )
                    session.add(settings)

                if user.language == 2:
                    if settings.periodicity == 'everyday':
                        settings_periodicity = 'daily'
                    elif settings.periodicity == 'everyday_2':
                        settings_periodicity = 'every 2 days'
                    elif settings.periodicity == 'everyday_3':
                        settings_periodicity = 'every 3 days'
                    elif settings.periodicity == 'everyday_4':
                        settings_periodicity = 'every 4 days'
                    else:
                        settings_periodicity = 'not set'

                    on_off = 'üü© Active' if settings.on_of_auto else 'üü• Disabled'
                    formatted_time = settings.send_time.strftime("%H:%M") if settings.send_time else "unspecified"
                    await callback.message.edit_text(
                        f'*Current email settings:*\n\n'
                        f'*üìã Email subject:* '
                        f'{f'\n{format_as_quote(settings.subject)}\n' if settings.subject and settings.subject != "–ë–µ–∑ —Ç–µ–º—ã" else "__not set__"}\n\n'
                        f'*üìÑ Email body:* '
                        f'{f'\n{format_as_quote(settings.message)}\n' if settings.message and settings.message != "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞" else "__not set__"}\n\n'
                        f'*üóì Sending frequency:* {settings_periodicity}\n\n'
                        f'*‚è∞ Sending time:* {formatted_time if formatted_time else "–ù–µ –∑–∞–¥–∞–Ω–æ"}\n\n'
                        f'*üîâ Number of audio files per email:* {settings.quantity_beat}\n'
                        f'{f'\n*‚ÜîÔ∏è Interval:* {'no interval' if settings.interval == 0 or settings.interval == "none" else f'{settings.interval} minutes' if settings.interval in [1] else f'{settings.interval} minutes' if settings.interval in [2, 3, 4] else f'{settings.interval} minutes'}\n‚Äî‚Äî‚Äî\n\n' if user.subscription not in ['free', '–ù–µ—É–∫–∞–∑–∞–Ω–æ', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'] else '‚Äî‚Äî‚Äî\n\n'}'
                        f'*‚öôÔ∏è Choose the settings you want to change using the buttons below:*',
                        reply_markup=kb.settings_button_eng(on_off, user.subscription, one_on_off),
                        parse_mode='MarkdownV2', disable_web_page_preview=True
                    )
                else:
                    if settings.periodicity == 'everyday':
                        settings_periodicity = '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ'
                    elif settings.periodicity == 'everyday_2':
                        settings_periodicity = '—Ä–∞–∑ –≤ 2 –¥–Ω—è'
                    elif settings.periodicity == 'everyday_3':
                        settings_periodicity = '—Ä–∞–∑ –≤ 3 –¥–Ω—è'
                    elif settings.periodicity == 'everyday_4':
                        settings_periodicity = '—Ä–∞–∑ –≤ 4 –¥–Ω—è'
                    else:
                        settings_periodicity = '–Ω–µ—É–∫–∞–∑–∞–Ω–æ'

                    on_off = 'üü© –í–∫–ª—é—á–µ–Ω–æ' if settings.on_of_auto else 'üü• –í—ã–∫–ª—é—á–µ–Ω–æ'
                    formatted_time = settings.send_time.strftime("%H:%M") if settings.send_time else "–ù–µ –∑–∞–¥–∞–Ω–æ"
                    await callback.message.edit_text(
                        f'*–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∏—Å—å–º–∞:*\n\n'
                        f'*üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞:* '
                        f'{f'\n{format_as_quote(settings.subject)}\n' if settings.subject and settings.subject != "–ë–µ–∑ —Ç–µ–º—ã" else "__–Ω–µ –∑–∞–¥–∞–Ω–æ__"}\n\n'
                        f'*üìÑ –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:* '
                        f'{f'\n{format_as_quote(settings.message)}\n' if settings.message and settings.message != "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞" else "__–Ω–µ –∑–∞–¥–∞–Ω–æ__"}\n\n'
                        f'*üóì –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏:* {settings_periodicity}\n\n'
                        f'*‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:* {formatted_time if formatted_time else "–ù–µ –∑–∞–¥–∞–Ω–æ"}\n\n'
                        f'*üîâ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ –≤ –æ–¥–Ω–æ–º –ø–∏—Å—å–º–µ:* {settings.quantity_beat}\n'
                        f'{f'\n*‚ÜîÔ∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª:* {'–±–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞' if settings.interval == 0 or settings.interval == "none" else f'{settings.interval} –º–∏–Ω—É—Ç–∞' if settings.interval in [1] else f'{settings.interval} –º–∏–Ω—É—Ç—ã' if settings.interval in [2, 3, 4] else f'{settings.interval} –º–∏–Ω—É—Ç'}\n‚Äî‚Äî‚Äî\n\n' if user.subscription not in ['free','–ù–µ—É–∫–∞–∑–∞–Ω–æ','–Ω–µ —É–∫–∞–∑–∞–Ω–æ'] else '‚Äî‚Äî‚Äî\n\n'}'
                        f'*‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:*',
                        reply_markup=kb.settings_button(on_off, user.subscription, one_on_off),
                        parse_mode='MarkdownV2', disable_web_page_preview=True
                    )

                await session.commit()
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
async def send_settings_message(user_id: int, message: Message):
    async with async_session() as session:
        active_group = await session.scalar(select(Group).filter(Group.user_id == user_id, Group.active == True))
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        one_on_off = False
        result = await session.execute(select(Settings).where(Settings.group_id == active_group.id))
        settings = result.scalars().first()
        one_active_group = await session.scalar(
            select(Group).filter(Group.user_id == user_id, Group.active == True))
        one_result = await session.execute(
            select(OneTimeSettings).where(OneTimeSettings.group_id == one_active_group.id))
        one_settings = one_result.scalars().first()
        if one_settings:
            one_on_off = one_settings.on_of_auto

        if not settings:
            other_settings_result = await session.execute(
                select(Settings).where(Settings.user_id == user_id, Settings.group_id != active_group.id)
            )
            other_settings = other_settings_result.scalars().first()

            settings = Settings(
                group_id=active_group.id,
                periodicity=other_settings.periodicity if other_settings else 'everyday',
                send_time=other_settings.send_time if other_settings else datetime.combine(datetime.today(),
                                                                                           time(19, 0)),
                quantity_beat=other_settings.quantity_beat if other_settings else 2,
                interval=other_settings.interval if other_settings else 0,
                user_id=user_id
            )
            session.add(settings)

        if user.language == 2:
            if settings.periodicity == 'everyday':
                settings_periodicity = 'daily'
            elif settings.periodicity == 'everyday_2':
                settings_periodicity = 'every 2 days'
            elif settings.periodicity == 'everyday_3':
                settings_periodicity = 'every 3 days'
            elif settings.periodicity == 'everyday_4':
                settings_periodicity = 'every 4 days'
            else:
                settings_periodicity = 'not set'

            on_off = 'üü© Active' if settings.on_of_auto else 'üü• Disabled'
            formatted_time = settings.send_time.strftime("%H:%M") if settings.send_time else "unspecified"
            await message.answer(
                f'*Current email settings:*\n\n'
                f'*üìã Email subject:* '
                f'{f'\n{format_as_quote(settings.subject)}\n' if settings.subject and settings.subject != "–ë–µ–∑ —Ç–µ–º—ã" else "__not set__"}\n\n'
                f'*üìÑ Email body:* '
                f'{f'\n{format_as_quote(settings.message)}\n' if settings.message and settings.message != "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞" else "__not set__"}\n\n'
                f'*üóì Sending frequency:* {settings_periodicity}\n\n'
                f'*‚è∞ Sending time:* {formatted_time if formatted_time else "–ù–µ –∑–∞–¥–∞–Ω–æ"}\n\n'
                f'*üîâ Number of audio files per email:* {settings.quantity_beat}\n'
                f'{f'\n*‚ÜîÔ∏è Interval:* {'no interval' if settings.interval == 0 or settings.interval == "none" else f'{settings.interval} minutes' if settings.interval in [1] else f'{settings.interval} minutes' if settings.interval in [2, 3, 4] else f'{settings.interval} minutes'}\n‚Äî‚Äî‚Äî\n\n' if user.subscription not in ['free', '–ù–µ—É–∫–∞–∑–∞–Ω–æ', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'] else '‚Äî‚Äî‚Äî\n\n'}'
                f'*‚öôÔ∏è Choose the settings you want to change using the buttons below:*',
                reply_markup=kb.settings_button_eng(on_off, user.subscription, one_on_off),
                parse_mode='MarkdownV2', disable_web_page_preview=True
            )
        else:
            if settings.periodicity == 'everyday':
                settings_periodicity = '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ'
            elif settings.periodicity == 'everyday_2':
                settings_periodicity = '—Ä–∞–∑ –≤ 2 –¥–Ω—è'
            elif settings.periodicity == 'everyday_3':
                settings_periodicity = '—Ä–∞–∑ –≤ 3 –¥–Ω—è'
            elif settings.periodicity == 'everyday_4':
                settings_periodicity = '—Ä–∞–∑ –≤ 4 –¥–Ω—è'
            else:
                settings_periodicity = '–Ω–µ—É–∫–∞–∑–∞–Ω–æ'

            on_off = 'üü© –í–∫–ª—é—á–µ–Ω–æ' if settings.on_of_auto else 'üü• –í—ã–∫–ª—é—á–µ–Ω–æ'
            formatted_time = settings.send_time.strftime("%H:%M") if settings.send_time else "–ù–µ –∑–∞–¥–∞–Ω–æ"
            await message.answer(
                        f'*–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∏—Å—å–º–∞:*\n\n'
                        f'*üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞:* '
                        f'{f'\n{format_as_quote(settings.subject)}\n' if settings.subject and settings.subject != "–ë–µ–∑ —Ç–µ–º—ã" else "__–Ω–µ –∑–∞–¥–∞–Ω–æ__"}\n\n'
                        f'*üìÑ –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:* '
                        f'{f'\n{format_as_quote(settings.message)}\n' if settings.message and settings.message != "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞" else "__–Ω–µ –∑–∞–¥–∞–Ω–æ__"}\n\n'
                        f'*üóì –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏:* {settings_periodicity}\n\n'
                        f'*‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:* {formatted_time if formatted_time else "–ù–µ –∑–∞–¥–∞–Ω–æ"}\n\n'
                        f'*üîâ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ –≤ –æ–¥–Ω–æ–º –ø–∏—Å—å–º–µ:* {settings.quantity_beat}\n'
                        f'{f'\n*‚ÜîÔ∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª:* {'–±–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞' if settings.interval == 0 or settings.interval == "none" else f'{settings.interval} –º–∏–Ω—É—Ç–∞' if settings.interval in [1] else f'{settings.interval} –º–∏–Ω—É—Ç—ã' if settings.interval in [2, 3, 4] else f'{settings.interval} –º–∏–Ω—É—Ç'}\n‚Äî‚Äî‚Äî\n\n' if user.subscription not in ['free','–ù–µ—É–∫–∞–∑–∞–Ω–æ','–Ω–µ —É–∫–∞–∑–∞–Ω–æ'] else '‚Äî‚Äî‚Äî\n\n'}'
                        f'*‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:*',
                        reply_markup=kb.settings_button(on_off, user.subscription, one_on_off),
                        parse_mode='MarkdownV2', disable_web_page_preview=True
                    )
def format_as_quote(text: str) -> str:
    lines = text.splitlines()
    escaped_lines = [
        '> ' + line
        .replace('\\', '\\\\')
        .replace('_', '\\_')
        .replace('*', '\\*')
        .replace('[', '\\[')
        .replace(']', '\\]')
        .replace('(', '\\(')
        .replace(')', '\\)')
        .replace('~', '\\~')
        .replace('`', '\\`')
        .replace('>', '\\>')
        .replace('#', '\\#')
        .replace('+', '\\+')
        .replace('-', '\\-')
        .replace('=', '\\=')
        .replace('|', '\\|')
        .replace('{', '\\{')
        .replace('}', '\\}')
        .replace('.', '\\.')
        .replace('!', '\\!')
        for line in lines
    ]
    return '\n'.join(escaped_lines)


@rt.callback_query(F.data == 'letter_header') 
async def letter_header(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:

            if user.language == 2:
                await callback.answer('üìã Email subject')
                await callback.message.edit_text('<strong>Enter the email subject</strong>',
                                                 reply_markup=kb.letter_title_eng, parse_mode='HTML')
            else:
                await callback.answer('üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞')
                await callback.message.edit_text('<strong>–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞</strong>',
                                                 reply_markup=kb.letter_title, parse_mode='HTML')
            await state.set_state(GroupState.editing_subject)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.message(GroupState.editing_subject)
async def process_letter_header(message: Message, state: FSMContext):
    user_id = message.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            if user.block:  
                try:
                    await message.delete()  
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                async with async_session() as session:
                    active_group = await session.scalar(
                        select(Group).filter(Group.user_id == message.from_user.id, Group.active == True))
                    result = await session.execute(select(Settings).where(Settings.group_id == active_group.id))
                    settings = result.scalars().first()

                    if settings:
                        settings.subject = message.text
                        await session.commit()
                        if user.language == 2:
                            await message.answer(f'<strong>‚úÖ Email subject updated</strong>',
                                                 parse_mode='HTML', disable_web_page_preview=True)
                        else:
                            await message.answer(f'<strong>‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω</strong>',
                                                 parse_mode='HTML', disable_web_page_preview=True)
                    else:
                        if user.language == 2:
                            await message.answer('Error. Settings not found.')
                        else:
                            await message.answer('–û—à–∏–±–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

                await send_settings_message(message.from_user.id, message)
                await state.clear()

@rt.callback_query(F.data == 'letter_text') 
async def letter_text(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('üìÑ Email body')
                await callback.message.edit_text('<strong>Enter the email body</strong>', reply_markup=kb.letter_text_eng,
                                                 parse_mode='HTML')
            else:
                await callback.answer('üìÑ –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞')
                await callback.message.edit_text('<strong>–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞</strong>', reply_markup=kb.letter_text,
                                                 parse_mode='HTML')
            await state.set_state(GroupState.editing_message)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.message(GroupState.editing_message)
async def process_letter_text(message: Message, state: FSMContext):
    user_id = message.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            if user.block:  
                try:
                    await message.delete() 
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                async with async_session() as session:
                    active_group = await session.scalar(
                        select(Group).filter(Group.user_id == message.from_user.id, Group.active == True))
                    result = await session.execute(select(Settings).where(Settings.group_id == active_group.id))
                    settings = result.scalars().first()

                    if settings:
                        settings.message = message.text
                        await session.commit()
                        if user.language == 2:
                            await message.answer('<strong>‚úÖ Email body updated</strong>', parse_mode='HTML')
                        else:
                            await message.answer('<strong>‚úÖ –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω</strong>', parse_mode='HTML')
                    else:
                        if user.language == 2:
                            await message.answer('Error: Settings not found.')
                        else:
                            await message.answer('–û—à–∏–±–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

                await send_settings_message(message.from_user.id, message)
                await state.clear()

@rt.callback_query(F.data == 'dispatch_frequency') 
async def dispatch_frequency(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('üóì Sending frequency')
                await callback.message.edit_text(
                    '<strong>Choose the sending frequency using the buttons below:</strong>',
                    reply_markup=kb.dispatch_frequency_eng, parse_mode='HTML')
            else:
                await callback.answer('üóì –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏')
                await callback.message.edit_text('<strong>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:</strong>',
                                                 reply_markup=kb.dispatch_frequency, parse_mode='HTML')
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data.in_(['everyday', 'everyday_2', 'everyday_3', 'everyday_4']))
async def dispatch_frequency_buttons(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            dispatch = callback.data 
            if user.language == 2:
                if dispatch == 'everyday':
                    dispatch_answer = 'daily'
                elif dispatch == 'everyday_2':
                    dispatch_answer = 'every 2 days '
                elif dispatch == 'everyday_3':
                    dispatch_answer = 'every 3 days '
                elif dispatch == 'everyday_4':
                    dispatch_answer = 'every 4 days '
                else:
                    dispatch_answer = 'not set'
                async with async_session() as session:
                    user_groups = await session.scalars(select(Group.id).filter(Group.user_id == callback.from_user.id))
                    group_ids = user_groups.all()

                    if not group_ids:
                        await callback.answer('Error: Groups not found')
                        return

                    await session.execute(
                        update(Settings).where(Settings.group_id.in_(group_ids)).values(periodicity=dispatch)
                    )
                    await session.commit()

                    await callback.answer(
                        f'‚úÖ Sending frequency: {dispatch_answer if user.subscription == "free" else f"{dispatch_answer} (for all groups)"}',
                        show_alert=True)

            else:
                if dispatch == 'everyday':
                    dispatch_answer = '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ'
                elif dispatch == 'everyday_2':
                    dispatch_answer = '—Ä–∞–∑ –≤ 2 –¥–Ω—è'
                elif dispatch == 'everyday_3':
                    dispatch_answer = '—Ä–∞–∑ –≤ 3 –¥–Ω—è'
                elif dispatch == 'everyday_4':
                    dispatch_answer = '—Ä–∞–∑ –≤ 4 –¥–Ω—è'
                else:
                    dispatch_answer = '–Ω–µ—É–∫–∞–∑–∞–Ω–æ'
                async with async_session() as session:
                    user_groups = await session.scalars(select(Group.id).filter(Group.user_id == callback.from_user.id))
                    group_ids = user_groups.all()

                    if not group_ids:
                        await callback.answer('–û—à–∏–±–∫–∞: –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
                        return

                    await session.execute(
                        update(Settings).where(Settings.group_id.in_(group_ids)).values(periodicity=dispatch)
                    )
                    await session.commit()

                    await callback.answer(f'‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏: {dispatch_answer if user.subscription == "free" else f"{dispatch_answer} (–¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø)"}', show_alert=True)

            await setting(callback)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)

@rt.callback_query(F.data == 'dispatch_time') 
async def dispatch_time(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('‚è∞ Sending time')
                await callback.message.edit_text('<strong>Choose the sending time using the buttons below:</strong>',
                                                 reply_markup=kb.dispatch_time_eng, parse_mode='HTML')
            else:
                await callback.answer('‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
                await callback.message.edit_text('<strong>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:</strong>',
                                                 reply_markup=kb.dispatch_time, parse_mode='HTML')
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data.in_(['19pm', '20pm', '21pm', '22pm']))
async def dispatch_time_buttons(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            send_hour = int(callback.data.replace("pm", ""))
            send_time = datetime.combine(date.today(), time(send_hour, 0))

            async with async_session() as session:
                user_groups = await session.scalars(select(Group.id).filter(Group.user_id == callback.from_user.id))
                group_ids = user_groups.all()

                if not group_ids:
                    if user.language == 2:
                        await callback.answer('Error: Groups not found')
                    else:
                        await callback.answer('–û—à–∏–±–∫–∞: –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
                    return

                await session.execute(
                    update(Settings).where(Settings.group_id.in_(group_ids)).values(send_time=send_time)
                )
                await session.execute(
                    update(OneTimeSettings).where(OneTimeSettings.group_id.in_(group_ids)).values(send_time=send_time)
                )
                await session.commit()
                if user.language == 2:
                    await callback.answer(
                        f'‚úÖ Sending time: {send_time.strftime("%H:%M") if user.subscription == "free" else f"{send_time.strftime("%H:%M")}"}',
                        show_alert=True)
                else:
                    await callback.answer(f'‚úÖ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {send_time.strftime("%H:%M") if user.subscription == "free" else f"{send_time.strftime("%H:%M")} (–¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø)"}',
                                                      show_alert=True)

            await setting(callback)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == 'main_time_choise')
async def main_time_choise(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.message.edit_text('<strong>Enter the sending time (in HH:MM format) ‚Äî Moscow time (UTC+3)</strong>',
                                                 parse_mode="HTML", reply_markup=kb.back_to_dispatch_time_eng)
            else:
                await callback.message.edit_text('<strong>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º (–≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM)</strong>', parse_mode="HTML", reply_markup=kb.back_to_dispatch_time)
            await state.set_state(UserState.waiting_for_main_time_choise)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.message(UserState.waiting_for_main_time_choise)
async def handle_main_time_input(message: Message, state: FSMContext):
    user_id = message.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            if user.block:  
                try:
                    await message.delete()  
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                input_text = message.text.strip().replace(' ', '').replace(':', '')

                if not re.fullmatch(r'\d{4}', input_text):
                    if user.language == 2:
                        await message.answer('<strong>‚ùóInvalid format</strong>', parse_mode='HTML')
                    else:
                        await message.answer('<strong>‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</strong>', parse_mode='HTML')
                    return

                try:
                    hour = int(input_text[:2])
                    minute = int(input_text[2:])

                    if not (0 <= hour < 24 and 0 <= minute < 60):
                        raise ValueError

                    send_time = datetime.combine(date.today(), time(hour, minute))

                    async with async_session() as session:
                        result = await session.execute(select(User).filter(User.user_id == message.from_user.id))
                        user = result.scalar_one_or_none()

                        if user and not user.block:
                            user_groups = await session.scalars(select(Group.id).filter(Group.user_id == user.user_id))
                            group_ids = user_groups.all()

                            if not group_ids:
                                await message.answer('–û—à–∏–±–∫–∞: –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
                                return

                            await session.execute(
                                update(Settings).where(Settings.group_id.in_(group_ids)).values(send_time=send_time)
                            )
                            await session.execute(
                                update(OneTimeSettings).where(OneTimeSettings.group_id.in_(group_ids)).values(send_time=send_time)
                            )



                            if user.language == 2:
                                await message.answer(
                                    f'‚úÖ <strong>Sending time: {send_time.strftime("%H:%M")}</strong>',
                                    parse_mode='HTML')
                            else:
                                await message.answer(f'‚úÖ <strong>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {send_time.strftime("%H:%M")} (–¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø)</strong>', parse_mode='HTML')
                            await session.commit()
                        else:
                            await message.answer('‚õîÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.')
                    await state.clear()
                    await send_settings_message(message.from_user.id, message)

                except ValueError:
                    if user.language == 2:
                        await message.answer('<strong>‚ùóÔ∏èInvalid format</strong>', parse_mode='HTML')
                    else:
                        await message.answer('<strong>‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</strong>', parse_mode='HTML')

@rt.callback_query(F.data == 'audio_quantity')
async def audio_quantity(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('üîâ Number of audio files')
                await callback.message.edit_text(
                    '<strong>Choose the number of audio files per email using the buttons below:</strong>',
                    reply_markup=kb.audio_quantity_eng, parse_mode='HTML')
            else:
                await callback.answer('üîâ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ')
                await callback.message.edit_text('<strong>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ –≤ –æ–¥–Ω–æ–º –ø–∏—Å—å–º–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:</strong>',
                                                 reply_markup=kb.audio_quantity, parse_mode='HTML')
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data.in_(['two', 'three', 'four', 'five']))
async def audio_quantity(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if callback.data == 'two':
                quantity = '2'
            elif callback.data == 'three':
                quantity = '3'
            elif callback.data == 'four':
                quantity = '4'
            else:
                quantity = '5'
            async with async_session() as session:
                active_group = await session.scalar(
                    select(Group).filter(Group.user_id == callback.from_user.id, Group.active == True))
                result = await session.execute(select(Settings).where(Settings.group_id == active_group.id))
                settings = result.scalars().first()

                if settings:
                    settings.quantity_beat = int(quantity)
                    await session.commit()
                    await callback.answer(f'‚úÖ Number of audio files per email: {quantity}', show_alert=True)
                else:
                    await callback.answer('–û—à–∏–±–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

            await setting(callback)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)

@rt.callback_query(F.data == 'on_off_data')
async def on_off_data(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            async with async_session() as session:
                active_group = await session.scalar(
                    select(Group).filter(Group.user_id == callback.from_user.id, Group.active == True))
                result = await session.execute(select(Settings).where(Settings.group_id == active_group.id))
                settings = result.scalars().first()

                if settings:
                    one_on_off = False
                    result = await session.execute(select(Settings).where(Settings.group_id == active_group.id))
                    settings = result.scalars().first()
                    one_active_group = await session.scalar(
                        select(Group).filter(Group.user_id == callback.from_user.id, Group.active == True))
                    one_result = await session.execute(
                        select(OneTimeSettings).where(OneTimeSettings.group_id == one_active_group.id))
                    one_settings = one_result.scalars().first()
                    if settings.on_of_auto and one_settings:
                        if one_settings.on_of_auto:

                            if user.language == 2:
                                await callback.answer(
                                    '‚ùóÔ∏èYou can‚Äôt stop mailing for this group while a one-time email is active',
                                    show_alert=True)
                            else:
                                await callback.answer('‚ùóÔ∏è–ù–µ–ª—å–∑—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã, –ø–æ–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑–æ–≤–æ–µ –ø–∏—Å—å–º–æ', show_alert=True)
                            return
                    settings.on_of_auto = not settings.on_of_auto
                    if one_settings:
                        one_on_off = one_settings.on_of_auto

                    if user.language == 2:
                        on_off = 'üü© Active' if settings.on_of_auto else 'üü• Disabled'
                        await callback.message.edit_reply_markup(
                            reply_markup=kb.settings_button_eng(on_off, user.subscription, one_on_off))
                        await callback.answer(
                            f'{"üü© Auto mailing is active" if settings.on_of_auto else "üü• Auto mailing is disabled"}')
                    else:
                        on_off = 'üü© –í–∫–ª—é—á–µ–Ω–æ' if settings.on_of_auto else 'üü• –í—ã–∫–ª—é—á–µ–Ω–æ'
                        await callback.message.edit_reply_markup(reply_markup=kb.settings_button(on_off, user.subscription, one_on_off))
                        await callback.answer(f'{"üü© –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞" if settings.on_of_auto else "üü• –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞"}')
                else:
                    await callback.answer('–û—à–∏–±–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
                await session.commit()
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)

@rt.callback_query(F.data == 'pack_interval')
async def pack_interval(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('‚ÜîÔ∏è Interval')
                await callback.message.edit_text(
                    '<strong>Enter the interval (in minutes)</strong>',
                    reply_markup=kb.pack_interval_eng, parse_mode='HTML')
            else:
                await callback.answer('‚ÜîÔ∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª')
                await callback.message.edit_text(
                    '<strong>–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª (–≤ –º–∏–Ω—É—Ç–∞—Ö)</strong>',
                    reply_markup=kb.pack_interval, parse_mode='HTML')
            await state.set_state(UserState.waiting_for_interval)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == 'no_interval')
async def pack_interval_call(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            quantity = 0
            async with async_session() as session:
                result = await session.execute(select(Settings).where(Settings.user_id == user_id))
                settings = result.scalars().all()

                if settings:
                    for sett in settings:
                        sett.interval = int(quantity)
                    await session.commit()
                    if user.language == 2:
                        if quantity == 0:
                            await callback.answer('‚úÖ Interval updated (for all groups)', show_alert=True)
                        else:
                            await callback.answer(f'‚úÖ Interval updated (for all groups)', show_alert=True)
                    else:
                        if quantity == 0:
                            await callback.answer('‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω (–¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø)', show_alert=True)
                        else:
                            await callback.answer(f'‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω (–¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø)', show_alert=True)
                else:
                    await callback.answer('–û—à–∏–±–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

            await setting(callback)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.message(UserState.waiting_for_interval)
async def process_interval(message: Message, state: FSMContext):
    user_id = message.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            if user.block:  
                try:
                    await message.delete()  
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                async with async_session() as session:
                    result = await session.execute(select(Settings).where(Settings.user_id == user_id))
                    settings = result.scalars().all()
                    result = await session.execute(select(OneTimeSettings).where(OneTimeSettings.user_id == user_id))
                    one_settings = result.scalars().all()

                    if settings:

                        if user.language == 2:
                            try:
                                interval = int(message.text)
                                if interval <= 240:
                                    for sett in settings:
                                        sett.interval = interval
                                    for one_sett in one_settings:
                                        one_sett.interval = interval
                                    await session.commit()
                                    await message.answer('<strong>Interval updated</strong> (for all groups)', parse_mode='HTML')
                                else:
                                    await message.answer('<strong>‚ùóÔ∏èInterval cannot be greater than 240 minutes</strong>',
                                                         parse_mode='HTML', reply_markup=kb.for_what_eng)
                                    return
                            except ValueError:
                                await message.answer('<strong>‚ùóÔ∏èEnter a valid value</strong>',
                                                     parse_mode='HTML', reply_markup=kb.for_what_eng)
                                return
                        else:
                            try:
                                interval = int(message.text)
                                if interval <= 240:
                                    for sett in settings:
                                        sett.interval = interval
                                    for one_sett in one_settings:
                                        one_sett.interval = interval
                                    await session.commit()
                                    await message.answer('<strong>‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω</strong> (–¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø)', parse_mode='HTML')
                                else:
                                    await message.answer('<strong>‚ùóÔ∏è–ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 240 –º–∏–Ω—É—Ç</strong>',
                                                         parse_mode='HTML', reply_markup=kb.for_what)
                                    return
                            except ValueError:
                                await message.answer('<strong>‚ùóÔ∏è–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ</strong>',
                                                     parse_mode='HTML', reply_markup=kb.for_what)
                                return
                    else:
                        await message.answer('–û—à–∏–±–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

                await send_settings_message(message.from_user.id, message)
                await state.clear()


@rt.callback_query(F.data == 'without_title')
async def without_title(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            async with async_session() as session:
                active_group = await session.scalar(
                    select(Group).filter(Group.user_id == user_id, Group.active == True)
                )
                if not active_group:
                    await callback.answer("–û—à–∏–±–∫–∞: –∞–∫—Ç–∏–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
                    return

                settings = await session.scalar(select(Settings).where(Settings.group_id == active_group.id))
                if settings:
                    settings.subject = '–ë–µ–∑ —Ç–µ–º—ã'
                    if user.language == 2:
                        await callback.answer('‚úÖ Email subject updated', show_alert=True)
                    else:
                        await callback.answer('‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω', show_alert=True)
                    await session.commit()
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)

    await setting(callback)
@rt.callback_query(F.data == 'without_text')
async def without_text(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            async with async_session() as session:
                active_group = await session.scalar(
                    select(Group).filter(Group.user_id == user_id, Group.active == True)
                )
                if not active_group:
                    await callback.answer("–û—à–∏–±–∫–∞: –∞–∫—Ç–∏–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
                    return

                settings = await session.scalar(select(Settings).where(Settings.group_id == active_group.id))
                if settings:
                    settings.message = '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞'
                    if user.language == 2:
                        await callback.answer('‚úÖ Email body updated', show_alert=True)
                    else:
                        await callback.answer('‚úÖ –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω', show_alert=True)
                    await session.commit()

            await setting(callback)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)

#—Ä–∞–∑–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
@rt.callback_query(F.data == 'one_time_message')
async def one_time_message_settings(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('‚öôÔ∏è Settings')
            else:
                await callback.answer('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
            async with async_session() as session:
                active_group = await session.scalar(
                    select(Group).filter(Group.user_id == user_id, Group.active == True))
            async with async_session() as session:
                result = await session.execute(select(Settings).where(Settings.group_id == active_group.id))
                settings_main = result.scalars().first()
            async with async_session() as session:
                result = await session.execute(select(OneTimeSettings).where(OneTimeSettings.group_id == active_group.id))
                settings = result.scalars().first()

                if not settings:
                    settings = OneTimeSettings(
                        group_id=active_group.id,
                        send_time=settings_main.send_time,
                        quantity_beat=False,
                        user_id = user_id,
                        interval=settings_main.interval
                    )
                    session.add(settings)

                if user.language == 2:
                    quantity_on_off = 'üü¢üîá No audio' if settings.quantity_beat else 'üîá No audio'
                    on_off = 'üü© Active' if settings.on_of_auto else 'üü• Disabled'
                    formatted_time = settings.send_time.strftime("%H:%M") if settings.send_time else "unspecified"
                    await callback.message.edit_text(
                        f'*Current one\\-time email settings:*\n\n'
                        f'*üìã Email subject:* '
                        f'{f'\n{format_as_quote(settings.subject)}\n' if settings.subject and settings.subject != "–ë–µ–∑ —Ç–µ–º—ã" else "__not set__"}\n\n'
                        f'*üìÑ Email body:* '
                        f'{f'\n{format_as_quote(settings.message)}\n' if settings.message and settings.message != "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞" else "__not set__"}\n\n'
                        f'*‚è∞ Scheduled time:* {formatted_time if formatted_time else "Not set"}\n\n'
                        f'*‚öôÔ∏è Choose the settings you want to change using the buttons below:*',
                        reply_markup=kb.one_time_settings_button_eng(on_off, quantity_on_off),
                        parse_mode='MarkdownV2', disable_web_page_preview=True
                    )
                else:
                    quantity_on_off = 'üü¢üîá –ë–µ–∑ –∞—É–¥–∏–æ' if settings.quantity_beat else 'üîá –ë–µ–∑ –∞—É–¥–∏–æ'
                    on_off = 'üü© –í–∫–ª—é—á–µ–Ω–æ' if settings.on_of_auto else 'üü• –í—ã–∫–ª—é—á–µ–Ω–æ'
                    formatted_time = settings.send_time.strftime("%H:%M") if settings.send_time else "–ù–µ –∑–∞–¥–∞–Ω–æ"
                    await callback.message.edit_text(
                        f'*–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–∑–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞:*\n\n'
                        f'*üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞:* '
                        f'{f'\n{format_as_quote(settings.subject)}\n' if settings.subject and settings.subject != "–ë–µ–∑ —Ç–µ–º—ã" else "__–Ω–µ –∑–∞–¥–∞–Ω–æ__"}\n\n'
                        f'*üìÑ –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:* '
                        f'{f'\n{format_as_quote(settings.message)}\n' if settings.message and settings.message != "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞" else "__–Ω–µ –∑–∞–¥–∞–Ω–æ__"}\n\n'
                        f'*‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:* {formatted_time if formatted_time else "–ù–µ –∑–∞–¥–∞–Ω–æ"}\n\n'
                        f'*‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:*',
                        reply_markup=kb.one_time_settings_button(on_off, quantity_on_off),
                        parse_mode='MarkdownV2', disable_web_page_preview=True
                    )

                await session.commit()
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
async def send_one_time_message_settings(user_id: int, message: Message):
    async with async_session() as session:
        active_group = await session.scalar(
            select(Group).filter(Group.user_id == user_id, Group.active == True))
        result = await session.execute(select(Settings).where(Settings.group_id == active_group.id))
        settings_main = result.scalars().first()
        result = await session.execute(select(OneTimeSettings).where(OneTimeSettings.group_id == active_group.id))
        settings = result.scalars().first()
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if not settings:
            settings = OneTimeSettings(
                group_id=active_group.id,
                send_time=settings_main.send_time,
                quantity_beat=False,
                interval=settings_main.interval,
                user_id = user_id
            )
            session.add(settings)

        if user.language == 2:
            quantity_on_off = 'üü¢üîá No audio' if settings.quantity_beat else 'üîá No audio'
            on_off = 'üü© Active' if settings.on_of_auto else 'üü• Disabled'
            formatted_time = settings.send_time.strftime("%H:%M") if settings.send_time else "unspecified"

            await message.answer(
                f'*Current one\\-time email settings:*\n\n'
                f'*üìã Email subject:* '
                f'{f'\n{format_as_quote(settings.subject)}\n' if settings.subject and settings.subject != "–ë–µ–∑ —Ç–µ–º—ã" else "__not set__"}\n\n'
                f'*üìÑ Email body:* '
                f'{f'\n{format_as_quote(settings.message)}\n' if settings.message and settings.message != "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞" else "__not set__"}\n\n'
                f'*‚è∞ Scheduled time:* {formatted_time if formatted_time else "Not set"}\n\n'
                f'*‚öôÔ∏è Choose the settings you want to change using the buttons below:*',
                reply_markup=kb.one_time_settings_button_eng(on_off, quantity_on_off),
                parse_mode='MarkdownV2', disable_web_page_preview=True
            )

        else:
            quantity_on_off = 'üü¢üîá –ë–µ–∑ –∞—É–¥–∏–æ' if settings.quantity_beat else 'üîá –ë–µ–∑ –∞—É–¥–∏–æ'
            on_off = 'üü© –í–∫–ª—é—á–µ–Ω–æ' if settings.on_of_auto else 'üü• –í—ã–∫–ª—é—á–µ–Ω–æ'
            formatted_time = settings.send_time.strftime("%H:%M") if settings.send_time else "–ù–µ –∑–∞–¥–∞–Ω–æ"

            await message.answer(
                        f'*–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–∑–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞:*\n\n'
                        f'*üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞:* '
                        f'{f'\n{format_as_quote(settings.subject)}\n' if settings.subject and settings.subject != "–ë–µ–∑ —Ç–µ–º—ã" else "__–Ω–µ –∑–∞–¥–∞–Ω–æ__"}\n\n'
                        f'*üìÑ –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:* '
                        f'{f'\n{format_as_quote(settings.message)}\n' if settings.message and settings.message != "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞" else "__–Ω–µ –∑–∞–¥–∞–Ω–æ__"}\n\n'
                        f'*‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:* {formatted_time if formatted_time else "–ù–µ –∑–∞–¥–∞–Ω–æ"}\n\n'
                        f'*‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:*',
                        reply_markup=kb.one_time_settings_button(on_off, quantity_on_off),
                        parse_mode='MarkdownV2', disable_web_page_preview=True
                    )

@rt.callback_query(F.data == 'back_to_one_time_settings')
async def back_to_one_time_settings(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('‚Ü©Ô∏è Back')
            else:
                await callback.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
            await one_time_message_settings(callback)
            await state.clear()
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == 'back_to_one_time_interval')
async def back_to_one_time_interval(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('‚Ü©Ô∏è Back')
            else:
                await callback.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
            await one_pack_interval(callback)
            await state.clear()
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == 'back_to_onetime_time')
async def back_to_onetime_time(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('‚Ü©Ô∏è Back')
            else:
                await callback.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
            await one_time_time(callback, state)
            await state.clear()
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)

@rt.callback_query(F.data == 'one_time_subject') 
async def one_time_subject(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('üìã Email subject')
                await callback.message.edit_text('<strong>Enter the email subject</strong>',
                                                 reply_markup=kb.one_time_letter_title_eng, parse_mode='HTML')
            else:
                await callback.answer('üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞')
                await callback.message.edit_text('<strong>–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞</strong>',
                                                 reply_markup=kb.one_time_letter_title, parse_mode='HTML')
            await state.set_state(GroupState.editing_one_time_subject)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.message(GroupState.editing_one_time_subject)
async def process_one_time_subject(message: Message, state: FSMContext):
    user_id = message.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            if user.block:  
                try:
                    await message.delete() 
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                async with async_session() as session:
                    active_group = await session.scalar(
                        select(Group).filter(Group.user_id == message.from_user.id, Group.active == True))
                    result = await session.execute(select(OneTimeSettings).where(OneTimeSettings.group_id == active_group.id))
                    settings = result.scalars().first()

                    if settings:
                        settings.subject = message.text
                        await session.commit()
                        if user.language == 2:
                            await message.answer(f'<strong>‚úÖ Email subject updated</strong>',
                                                 parse_mode='HTML', disable_web_page_preview=True)
                        else:
                            await message.answer(f'<strong>‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω</strong>',
                                                parse_mode='HTML', disable_web_page_preview=True)
                    else:
                        await message.answer('–û—à–∏–±–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

                await send_one_time_message_settings(message.from_user.id, message)
                await state.clear()

@rt.callback_query(F.data == 'one_time_message_text') 
async def one_time_message(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('üìÑ Email body')
                await callback.message.edit_text('<strong>Enter the email body</strong>',
                                                 reply_markup=kb.one_time_letter_text_eng,
                                                 parse_mode='HTML')
            else:
                await callback.answer('üìÑ –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞')
                await callback.message.edit_text('<strong>–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞</strong>', reply_markup=kb.one_time_letter_text,
                                                 parse_mode='HTML')
            await state.set_state(GroupState.editing_one_time_message)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.message(GroupState.editing_one_time_message)
async def process_one_time_message(message: Message, state: FSMContext):
    user_id = message.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            if user.block:  
                try:
                    await message.delete()  
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                async with async_session() as session:
                    active_group = await session.scalar(
                        select(Group).filter(Group.user_id == message.from_user.id, Group.active == True))
                    result = await session.execute(select(OneTimeSettings).where(OneTimeSettings.group_id == active_group.id))
                    settings = result.scalars().first()

                    if settings:
                        settings.message = message.text
                        await session.commit()
                        if user.language == 2:
                            await message.answer('<strong>‚úÖ Email body updated</strong>', parse_mode='HTML')
                        else:
                            await message.answer('<strong>‚úÖ –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω</strong>', parse_mode='HTML')
                    else:
                        await message.answer('–û—à–∏–±–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

                await send_one_time_message_settings(message.from_user.id, message)
                await state.clear()


@rt.callback_query(F.data == 'one_time_time')
async def one_time_time(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('‚è∞ Sending time')
                await callback.message.edit_text('<strong>Choose the sending time using the buttons below:</strong>',
                                                 reply_markup=kb.one_time_dispatch_time_eng, parse_mode='HTML')
            else:
                await callback.answer('‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
                await callback.message.edit_text('<strong>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:</strong>',
                                                 reply_markup=kb.one_time_dispatch_time, parse_mode='HTML')
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data.in_(['onetime_19pm', 'onetime_20pm', 'onetime_21pm', 'onetime_22pm']))
async def dispatch_one_time_time(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            send_hour = int(callback.data.replace("pm", "").replace("onetime_", ""))
            send_time = datetime.combine(date.today(), time(send_hour, 0))

            async with async_session() as session:
                user_groups = await session.scalars(select(Group.id).filter(Group.user_id == callback.from_user.id))
                group_ids = user_groups.all()

                if not group_ids:
                    await callback.answer('–û—à–∏–±–∫–∞: –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
                    return

                await session.execute(
                    update(Settings).where(Settings.group_id.in_(group_ids)).values(send_time=send_time)
                )
                await session.execute(
                    update(OneTimeSettings).where(OneTimeSettings.group_id.in_(group_ids)).values(send_time=send_time)
                )
                await session.commit()
                if user.language == 2:
                    await callback.answer(
                        f'‚úÖ Sending time: {send_time.strftime("%H:%M") if user.subscription == "free" else f"{send_time.strftime("%H:%M")}"}',
                        show_alert=True)
                else:
                    await callback.answer(f'‚úÖ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {send_time.strftime("%H:%M") if user.subscription == "free" else f"{send_time.strftime("%H:%M")} (–¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø)"}',
                                                  show_alert=True)

            await one_time_message_settings(callback)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == 'onetime_choise')
async def onetime_choise(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.message.edit_text('<strong>Enter the sending time (in HH:MM format) ‚Äî Moscow time (UTC+3)</strong>',
                                                 parse_mode="HTML", reply_markup=kb.back_to_onetime_time_eng)
            else:
                await callback.message.edit_text('<strong>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º (–≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM)</strong>', parse_mode="HTML", reply_markup=kb.back_to_onetime_time)
            await state.set_state(UserState.waiting_for_onetime_choise)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.message(UserState.waiting_for_onetime_choise)
async def handle_main_time_input(message: Message, state: FSMContext):
    user_id = message.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            if user.block: 
                try:
                    await message.delete() 
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                input_text = message.text.strip().replace(' ', '').replace(':', '')

                if not re.fullmatch(r'\d{4}', input_text):
                    if user.language == 2:
                        await message.answer('<strong>‚ùóÔ∏èInvalid format</strong>', parse_mode='HTML')
                    else:
                        await message.answer('<strong>‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</strong>', parse_mode='HTML')
                    return

                try:
                    hour = int(input_text[:2])
                    minute = int(input_text[2:])

                    if not (0 <= hour < 24 and 0 <= minute < 60):
                        raise ValueError

                    send_time = datetime.combine(date.today(), time(hour, minute))

                    async with async_session() as session:
                        result = await session.execute(select(User).filter(User.user_id == message.from_user.id))
                        user = result.scalar_one_or_none()

                        if user and not user.block:
                            user_groups = await session.scalars(select(Group.id).filter(Group.user_id == user.user_id))
                            group_ids = user_groups.all()

                            if not group_ids:
                                await message.answer('–û—à–∏–±–∫–∞: –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
                                return

                            await session.execute(
                                update(Settings).where(Settings.group_id.in_(group_ids)).values(send_time=send_time)
                            )
                            await session.execute(
                                update(OneTimeSettings).where(OneTimeSettings.group_id.in_(group_ids)).values(send_time=send_time)
                            )


                            if user.language == 2:
                                await message.answer(
                                    f'‚úÖ <strong>Sending time: {send_time.strftime("%H:%M")}</strong>',
                                    parse_mode='HTML')
                            else:
                                await message.answer(f'‚úÖ <strong>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {send_time.strftime("%H:%M")} (–¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø)</strong>', parse_mode='HTML')
                            await session.commit()
                        else:
                            await message.answer('‚õîÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.')

                    await send_one_time_message_settings(message.from_user.id, message)
                    await state.clear()

                except ValueError:
                    if user.language == 2:
                        await message.answer('<strong>‚ùóÔ∏èInvalid format</strong>', parse_mode='HTML')
                    else:
                        await message.answer('<strong>‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</strong>', parse_mode='HTML')

@rt.callback_query(F.data == 'one_time_quantity') 
async def one_time_quantity(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            async with async_session() as session:
                active_group = await session.scalar(
                    select(Group).filter(Group.user_id == callback.from_user.id, Group.active == True))
                result = await session.execute(select(OneTimeSettings).where(OneTimeSettings.group_id == active_group.id))
                settings = result.scalars().first()

                if user.language == 2:
                    if settings:
                        settings.quantity_beat = not settings.quantity_beat
                        on_off = 'üü© Active' if settings.on_of_auto else 'üü• Disabled'
                        quantity_on_off = 'üü¢üîá No audio' if settings.quantity_beat else 'üîá No audio'
                        await callback.message.edit_reply_markup(
                            reply_markup=kb.one_time_settings_button_eng(on_off, quantity_on_off))
                        if settings.quantity_beat:
                            await callback.answer('‚úÖ The next mailing will have no audio', show_alert=True)
                    else:
                        await callback.answer('Error: Settings not found.')

                else:
                    if settings:
                        settings.quantity_beat = not settings.quantity_beat
                        on_off = 'üü© –í–∫–ª—é—á–µ–Ω–æ' if settings.on_of_auto else 'üü• –í—ã–∫–ª—é—á–µ–Ω–æ'
                        quantity_on_off = 'üü¢üîá –ë–µ–∑ –∞—É–¥–∏–æ' if settings.quantity_beat else 'üîá –ë–µ–∑ –∞—É–¥–∏–æ'
                        await callback.message.edit_reply_markup(reply_markup=kb.one_time_settings_button(on_off, quantity_on_off))
                        if settings.quantity_beat:
                            await callback.answer('‚úÖ –í —Å–ª–µ–¥—É—é—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–µ –Ω–µ –±—É–¥–µ—Ç –∞—É–¥–∏–æ', show_alert=True)
                    else:
                        await callback.answer('–û—à–∏–±–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
                await session.commit()
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data.in_(['onetime_two', 'onetime_three', 'onetime_four', 'onetime_five', 'one_time_without_beat']))
async def process_one_time_quantity(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if callback.data == 'one_time_without_beat':
                quantity = '0'
            elif callback.data == 'onetime_two':
                quantity = '2'
            elif callback.data == 'onetime_three':
                quantity = '3'
            elif callback.data == 'onetime_four':
                quantity = '4'
            else:
                quantity = '5'
            async with async_session() as session:
                active_group = await session.scalar(
                    select(Group).filter(Group.user_id == callback.from_user.id, Group.active == True))
                result = await session.execute(select(OneTimeSettings).where(OneTimeSettings.group_id == active_group.id))
                settings = result.scalars().first()

                if settings:
                    settings.quantity_beat = int(quantity)
                    await session.commit()
                    if user.language == 2:
                        await callback.answer(f'‚úÖ Number of audio files per email: {quantity}', show_alert=True)
                    else:
                        await callback.answer(f'‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ –≤ –æ–¥–Ω–æ–º –ø–∏—Å—å–º–µ: {quantity}', show_alert=True)
                else:
                    await callback.answer('–û—à–∏–±–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

            await one_time_message_settings(callback)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)

@rt.callback_query(F.data == 'one_time_toggle')
async def one_time_toggle(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            async with async_session() as session:
                active_group = await session.scalar(
                    select(Group).filter(Group.user_id == callback.from_user.id, Group.active == True))
                result = await session.execute(select(OneTimeSettings).where(OneTimeSettings.group_id == active_group.id))
                settings = result.scalars().first()
                result = await session.execute(
                    select(Settings).where(Settings.group_id == active_group.id))
                normal_settings = result.scalars().first()
                if user.language == 2:
                    if settings:
                        settings.on_of_auto = not settings.on_of_auto
                        if settings.on_of_auto:
                            normal_settings.on_of_auto = True
                        quantity_on_off = 'üü¢üîá No audio' if settings.quantity_beat else 'üîá No audio'
                        on_off = 'üü© Active' if settings.on_of_auto else 'üü• Disabled'
                        if user.language == 2:
                            await callback.message.edit_reply_markup(
                                reply_markup=kb.one_time_settings_button_eng(on_off, quantity_on_off))
                        else:
                            await callback.message.edit_reply_markup(
                                reply_markup=kb.one_time_settings_button(on_off, quantity_on_off))
                        await callback.answer(
                            f'{"üü© One-time mailing is active" if settings.on_of_auto else "üü• One-time mailing is disabled"}')
                    else:
                        await callback.answer('Error: Settings not found.')

                else:
                    if settings:
                        settings.on_of_auto = not settings.on_of_auto
                        if settings.on_of_auto:
                            normal_settings.on_of_auto = True
                        quantity_on_off = 'üü¢üîá –ë–µ–∑ –∞—É–¥–∏–æ' if settings.quantity_beat else 'üîá –ë–µ–∑ –∞—É–¥–∏–æ'
                        on_off = 'üü© –í–∫–ª—é—á–µ–Ω–æ' if settings.on_of_auto else 'üü• –í—ã–∫–ª—é—á–µ–Ω–æ'
                        await callback.message.edit_reply_markup(reply_markup=kb.one_time_settings_button(on_off, quantity_on_off))
                        await callback.answer(f'{"üü© –†–∞–∑–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞" if settings.on_of_auto else "üü• –†–∞–∑–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞"}')
                    else:
                        await callback.answer('–û—à–∏–±–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
                await session.commit()
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)

@rt.callback_query(F.data == 'one_time_interval')
async def one_pack_interval(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await callback.answer('‚ÜîÔ∏è Interval')
                await callback.message.edit_text(
                    '<strong>Enter the interval (in minutes)</strong>',
                    reply_markup=kb.pack_interval_one_time_eng, parse_mode='HTML')
            else:
                await callback.answer('‚ÜîÔ∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª')
                await callback.message.edit_text(
                    '<strong>–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª (–≤ –º–∏–Ω—É—Ç–∞—Ö)</strong>',
                    reply_markup=kb.pack_interval_one_time, parse_mode='HTML')
            await state.set_state(UserState.waiting_for_one_time_interval)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == 'one_no_interval')
async def pack_interval_call(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            quantity = '0'
            async with async_session() as session:
                result = await session.execute(select(OneTimeSettings).where(OneTimeSettings.user_id == user_id))
                settings = result.scalars().all()

                if user.language == 2:
                    if settings:
                        for sett in settings:
                            sett.interval = int(quantity)
                        await session.commit()
                        if quantity == 0:
                            await callback.answer('‚úÖ Interval updated (for all groups)', show_alert=True)
                        else:
                            await callback.answer(f'‚úÖ Interval updated (for all groups)', show_alert=True)
                    else:
                        await callback.answer('Error: Settings not found.')
                else:
                    if settings:
                        for sett in settings:
                            sett.interval = int(quantity)
                        await session.commit()
                        if quantity == 0:
                            await callback.answer('‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω (–¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø)', show_alert=True)
                        else:
                            await callback.answer(f'‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω (–¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø)', show_alert=True)
                    else:
                        await callback.answer('–û—à–∏–±–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

            await setting(callback)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.message(UserState.waiting_for_one_time_interval)
async def process_one_interval(message: Message, state: FSMContext):
    user_id = message.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            if user.block: 
                try:
                    await message.delete()  
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                async with async_session() as session:
                    result = await session.execute(select(OneTimeSettings).where(OneTimeSettings.user_id == user_id))
                    settings = result.scalars().all()

                    if user.language == 2:
                        if settings:
                            try:
                                interval = int(message.text)
                                if interval <= 240:
                                    for sett in settings:
                                        sett.interval = interval
                                    await session.commit()
                                    await message.answer('<strong>Interval updated</strong> (for all groups)', parse_mode='HTML')
                                else:
                                    await message.answer('<strong>‚ùóÔ∏èInterval cannot be greater than 240 minutes</strong>',
                                                         parse_mode='HTML', reply_markup=kb.for_what_eng)
                                    return
                            except ValueError:
                                await message.answer('<strong>‚ùóÔ∏èEnter a valid value</strong>',
                                                     parse_mode='HTML', reply_markup=kb.for_what_eng)
                                return
                        else:
                            await message.answer('Error: Settings not found.')
                    else:
                        if settings:
                            try:
                                interval = int(message.text)
                                if interval <= 240:
                                    for sett in settings:
                                        sett.interval = interval
                                    await session.commit()
                                    await message.answer('<strong>‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω</strong> (–¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø)', parse_mode='HTML')
                                else:
                                    await message.answer('<strong>‚ùóÔ∏è–ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 240 –º–∏–Ω—É—Ç</strong>',
                                                         parse_mode='HTML', reply_markup=kb.for_what)
                                    return
                            except ValueError:
                                await message.answer('<strong>‚ùóÔ∏è–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ</strong>',
                                                     parse_mode='HTML', reply_markup=kb.for_what)
                                return
                        else:
                            await message.answer('–û—à–∏–±–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

                await send_one_time_message_settings(message.from_user.id, message)
                await state.clear()

@rt.callback_query(F.data == 'one_time_without_title')
async def one_time_without_title(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            async with async_session() as session:
                active_group = await session.scalar(
                    select(Group).filter(Group.user_id == user_id, Group.active == True)
                )
                if not active_group:
                    await callback.answer("–û—à–∏–±–∫–∞: –∞–∫—Ç–∏–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
                    return

                settings = await session.scalar(select(OneTimeSettings).where(OneTimeSettings.group_id == active_group.id))
                if settings:
                    settings.subject = '–ë–µ–∑ —Ç–µ–º—ã'
                    if user.language == 2:
                        await callback.answer('‚úÖ Email subject updated', show_alert=True)
                    else:
                        await callback.answer('‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω', show_alert=True)
                    await session.commit()
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)

    await one_time_message_settings(callback)
@rt.callback_query(F.data == 'one_time_without_text')
async def one_time_without_text(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            async with async_session() as session:
                active_group = await session.scalar(
                    select(Group).filter(Group.user_id == user_id, Group.active == True)
                )
                if not active_group:
                    await callback.answer("–û—à–∏–±–∫–∞: –∞–∫—Ç–∏–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
                    return

                settings = await session.scalar(select(OneTimeSettings).where(OneTimeSettings.group_id == active_group.id))
                if settings:
                    settings.message = '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞'
                    if user.language == 2:
                        await callback.answer('‚úÖ Email body updated', show_alert=True)
                    else:
                        await callback.answer('‚úÖ –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω', show_alert=True)
                    await session.commit()

            await one_time_message_settings(callback)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)

#–æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å–µ–º
async def send_email(user_email, user_password, bcc_list, subject, message_text, beats, bot, email_records, user_id):
    msg = MIMEMultipart()
    msg['From'] = user_email
    if subject != "–ë–µ–∑ —Ç–µ–º—ã":
        msg['Subject'] = subject

    if message_text != "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞":
        msg.attach(MIMEText(message_text, 'plain', "UTF-8"))

    ssl_context = ssl.create_default_context()
    ssl_context.check_hostname = False
    ssl_context.verify_mode = ssl.CERT_NONE

    total_size = 0
    final_beats = []
    excluded_beats = []

    for beat in beats:
        if not beat.file_id:
            print(f"–ë–∏—Ç {beat.name} –Ω–µ –∏–º–µ–µ—Ç file_id, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        try:
            file_info = await bot.get_file(beat.file_id)
            file_path = f"https://api.telegram.org/file/bot{bot.token}/{file_info.file_path}"

            async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=ssl_context)) as session:
                async with session.get(file_path) as resp:
                    if resp.status == 200:
                        file_data = await resp.read()
                        size_mb = len(file_data) / (1024 * 1024)

                        if total_size + size_mb > 25:
                            excluded_beats.append(beat)
                            continue

                        total_size += size_mb
                        final_beats.append(beat)

                        part = MIMEBase('audio', 'mp3')
                        part.set_payload(file_data)
                        encoders.encode_base64(part)
                        filename = encode_rfc2231(beat.name, 'utf-8')
                        part.add_header('Content-Disposition', f'attachment; filename*={filename}')
                        msg.attach(part)
                    else:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {beat.name}: {resp.status}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {beat.name}: {e}")

    if excluded_beats:
        try:
            async with async_session() as session:
                result = await session.execute(select(User).filter(User.user_id == user_id))
                user = result.scalar_one_or_none()
            if user.language == 2:
                await bot.send_message(
                    user_id,
                    f"‚ö†Ô∏è Some beats were not attached because the total size exceeds 25 MB:\n" +
                    "\n".join(f"‚Ä¢ {beat.name}" for beat in excluded_beats)
                )
            else:
                await bot.send_message(
                    user_id,
                    f"‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –±–∏—Ç—ã –Ω–µ –±—ã–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –ø—Ä–µ–≤—ã—à–∞–µ—Ç 25 –ú–ë:\n" +
                    "\n".join(f"‚Ä¢ {beat.name}" for beat in excluded_beats)
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞: {e}")



    max_retries = 3
    retry_delay = 10
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
    for attempt in range(max_retries):
        try:
            def sync_send():
                try:
                    server = smtplib.SMTP('smtp.gmail.com', 587)
                    server.starttls()
                    server.login(user_email, user_password)

                    if len(bcc_list) <= 100:
                        server.sendmail(user_email, bcc_list, msg.as_string())
                    else:
                        for recipient in bcc_list:
                            server.sendmail(user_email, recipient, msg.as_string())
                            std_time.sleep(1)

                    server.quit()
                except Exception as e:
                    raise e

            await asyncio.to_thread(sync_send)

            for email_record in email_records:
                email_record.received_beats = list(
                    set(email_record.received_beats + [beat.id for beat in final_beats if beat.id])
                )
            return True
        except smtplib.SMTPAuthenticationError as e:
            error_msg = str(e)
            if user.language == 2:
                reason = "‚ùå Error: incorrect Gmail or app password." if "Username and Password not accepted" in error_msg else f"‚ùå Authorization error: {error_msg}"
            else:
                reason = "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Gmail –∏–ª–∏ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è." if "Username and Password not accepted" in error_msg else f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {error_msg}"
        except smtplib.SMTPRecipientsRefused:
            if user.language == 2:
                reason = "‚ùå Error: all recipients were rejected. Please check the email addresses."
            else:
                reason = "‚ùå –û—à–∏–±–∫–∞: –≤—Å–µ –∞–¥—Ä–µ—Å–∞—Ç—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å email-–∞–¥—Ä–µ—Å–æ–≤."
        except smtplib.SMTPException as e:
            if user.language == 2:
                reason = f"‚ùå SMTP error: {str(e)}"
            else:
                reason = f"‚ùå –û—à–∏–±–∫–∞ SMTP: {str(e)}"
        except Exception as e:
            if user.language == 2:
                reason = f"‚ùå Unknown error: {str(e)}"
            else:
                reason = f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"

        print(reason)

        if attempt < max_retries - 1:
            print(f"‚ö°Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫...")
            await asyncio.sleep(retry_delay)
        else:
            try:
                if user.language == 2:
                    await bot.send_message(email_records[0].user_id, f"{reason}\nEmail was not sent.")
                else:
                    await bot.send_message(email_records[0].user_id, f"{reason}\n–ü–∏—Å—å–º–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            print("‚ùóÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω–æ.")
            return False

async def send_user_emails(user_id: int, bot: Bot, bot_message):
    async with async_session() as session:
        user_result = await session.execute(select(User).where(User.user_id == user_id))
        user = user_result.scalars().first()
        current_time = datetime.now(pytz.timezone("Europe/Moscow"))
        if not user.block:
            if not user or not user.gmail or not user.password:
                try:
                    await bot.delete_message(user_id, bot_message.message_id)
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ: {e}")
                await bot.send_message(user_id, f"<strong>‚ùóÔ∏è–ù–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω Gmail/–ø–∞—Ä–æ–ª—å.</strong>",
                                       parse_mode='HTML')
                print(f"‚õîÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω Gmail/–ø–∞—Ä–æ–ª—å.")
                return

            if user.mails_per_day <= 0:
                try:
                    await bot.delete_message(user_id, bot_message.message_id)
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ: {e}")
                await bot.send_message(user_id, f"<strong>‚ùóÔ∏è –õ–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω ({user.mails_per_day}).</strong>",
                                       parse_mode='HTML')
                print(f"‚ùóÔ∏è –õ–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω ({user.mails_per_day}).")
                return

            groups_result = await session.execute(
                select(Group).where(Group.user_id == user_id).order_by(Group.id)
            )
            groups = groups_result.scalars().all()

            if not groups:
                print("‚ùóÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≥—Ä—É–ø–ø.")
                return

            flagged_email = await session.execute(
                select(Email).join(Group).where(Group.user_id == user_id, Email.flags == True)
            )
            flagged_email = flagged_email.scalars().first()

            started = not flagged_email
            emails_queue = []
            total_sent = 0
            batch_size = 100
            priority_groups = []
            regular_groups = []
            email_for_interval = 0
            skip_to_group_id = None
            flag_was_in_one_time_group = False
            any_sent = False

            for group in groups:
                result = await rq.get_group_data(group.id, session)
                if not result:
                    continue

                current_settings, emails, _, use_one_time = result

                if not emails:
                    continue

                if use_one_time:
                    priority_groups.append((group, result))
                else:
                    regular_groups.append((group, result))

            ordered_groups = priority_groups + regular_groups
            last_email_sent = None
            for group, result in ordered_groups:
                if skip_to_group_id:
                    if group.id != skip_to_group_id:
                        continue
                    else:
                        skip_to_group_id = None
                if user.mails_per_day <= 0:
                    break

                current_settings, emails, _, use_one_time = result

                if not emails:
                    continue

                if not started:
                    try:
                        start_index = next(i for i, e in enumerate(emails) if e.id == flagged_email.id) + 1
                        started = True
                    except StopIteration:
                        start_index = 0
                        started = True
                else:
                    start_index = 0

                emails_to_send = emails[start_index:]
                remaining = user.mails_per_day - len(emails_to_send)
                if remaining > 0:
                    emails_to_send += emails[:min(remaining, start_index)]

                emails_to_send = emails_to_send[:user.mails_per_day]
                if not emails_to_send:
                    continue

                print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑ –≥—Ä—É–ø–ø—ã {group.id} ‚Äî {len(emails_to_send)} –ø–æ—á—Ç")
                beats = []
                email_beat_map = {}
                for email in emails_to_send:
                    received_ids = set(email.received_beats or [])
                    if use_one_time and not current_settings.quantity_beat:
                        active_group = await session.scalar(
                            select(Group).filter(Group.user_id == user_id, Group.active == True))
                        result = await session.execute(select(Settings).where(Settings.group_id == active_group.id))
                        settings = result.scalars().first()
                        beats_result = await session.execute(
                            select(Beat)
                            .where(Beat.group_id == group.id)
                            .where(Beat.id.notin_(received_ids))
                            .limit(settings.quantity_beat)
                        )
                        beats = beats_result.scalars().all()
                    if not use_one_time:
                        beats_result = await session.execute(
                            select(Beat)
                            .where(Beat.group_id == group.id)
                            .where(Beat.id.notin_(received_ids))
                            .limit(current_settings.quantity_beat)
                        )
                        beats = beats_result.scalars().all()

                    email_beat_map[email] = beats

                grouped_emails = defaultdict(list)
                for email, beats_list in email_beat_map.items():
                    beat_ids_key = frozenset(beat.id for beat in beats_list)
                    grouped_emails[beat_ids_key].append((email, beats_list))

                pending_batches = []

                for beat_ids_key, email_data in grouped_emails.items():
                    for email, beats in email_data:
                        pending_batches.append((email, beats))
                i = 0

                while i < len(pending_batches):
                    batch_emails = []
                    beat_map = defaultdict(list)

                    while i < len(pending_batches) and len(batch_emails) < 100:
                        email, beats = pending_batches[i]
                        beat_key = frozenset(b.id for b in beats)
                        beat_map[beat_key].append((email, beats))
                        batch_emails.append(email)
                        i += 1
                        email_for_interval += 1

                        if email_for_interval == 100:
                            break  

                    for beat_key, grouped in beat_map.items():
                        if len(beat_key) < current_settings.quantity_beat and not use_one_time:
                            print(
                                f"‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø–∞—á–∫–∞: —Ç–æ–ª—å–∫–æ {len(beat_key)} –±–∏—Ç–æ–≤, —Ç—Ä–µ–±—É–µ—Ç—Å—è {current_settings.quantity_beat}")
                            continue
                        if len(beat_key) == 0 and not current_settings.quantity_beat:
                            print(
                                f"‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø–∞—á–∫–∞: —Ç–æ–ª—å–∫–æ {len(beat_key)} –±–∏—Ç–æ–≤, —Ä–∞–∑–æ–≤–∞—è")
                            email_for_interval -= len(batch_emails)
                            continue
                        for j in range(0, len(grouped), batch_size):
                            sub_batch = grouped[j:j + batch_size]
                            bcc_list = [email.email for email, _ in sub_batch]
                            beats_to_send = sub_batch[0][1]

                            print(f"–ü–∞—á–∫–∞, {len(sub_batch)} –∞–¥—Ä–µ—Å–æ–≤ —Å –±–∏—Ç–∞–º–∏ {list(beat_key)}")
                            
                            success = await send_email(
                                user.gmail,
                                user.password,
                                bcc_list,
                                current_settings.subject,
                                current_settings.message,
                                beats_to_send,
                                bot,
                                [email for email, _ in sub_batch],
                                user_id
                            )

                            if success:
                                total_sent += len(sub_batch)
                                user.mails_per_day -= len(sub_batch)
                                last_email_sent = sub_batch[-1][0]
                                any_sent = True
                                emails_queue.append(last_email_sent)
                                current_settings.last_sent_date = current_time
                            else:
                                print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º.")
                                return

                            await asyncio.sleep(2)

                    if email_for_interval >= 100:
                        interval = current_settings.interval
                        print(f"‚è∏ –ò–Ω—Ç–µ—Ä–≤–∞–ª {interval} –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ 100 email-–æ–≤")
                        await asyncio.sleep(interval * 60)
                        email_for_interval = 0

                remaining_email = None
                if use_one_time:
                    if last_email_sent:
                        remaining_emails_result = await session.execute(
                            select(Email)
                            .where(Email.group_id == group.id)
                            .where(Email.id > last_email_sent.id)
                            .limit(1)
                        )
                        remaining_email = remaining_emails_result.scalars().first()
                    if flagged_email and flagged_email.group_id == group.id:
                        flagged_email.flags = False
                        session.add(flagged_email)
                        flag_was_in_one_time_group = True

                    if not remaining_email:
                        await reset_one_time_settings(group.id)
                        group_index = groups.index(group)
                        if group_index + 1 < len(groups):
                            skip_to_group_id = groups[group_index + 1].id
                    else:
                        print(f"–†–∞–∑–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group.id} –Ω–µ —Å–±—Ä–æ—à–µ–Ω–∞, –æ—Å—Ç–∞–ª–∏—Å—å –ø–æ—á—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")

            if flagged_email:
                flagged_email.flags = False
                session.add(flagged_email)
            if emails_queue:
                last_email = emails_queue[-1]
                last_email.flags = True
                session.add(last_email)
                print(f"üìç –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ñ–ª–∞–≥: {last_email.email}")

            session.add(user)
            print(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {total_sent} –ø–∏—Å–µ–º.")
            if any_sent:
                try:
                    await bot.send_message(user_id, "‚úÖ", parse_mode='HTML')
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
            if not any_sent:
                try:
                    await bot.delete_message(user_id, bot_message.message_id)
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ: {e}")

                all_emails_result = await session.execute(
                    select(Email).join(Group).where(Group.user_id == user_id)
                )
                all_emails = all_emails_result.scalars().all()
                async with async_session() as session:
                    user_result = await session.execute(select(User).where(User.user_id == user_id))
                    user = user_result.scalars().first()
                if user.language == 2:
                    if not all_emails:
                        await bot.send_message(user_id,
                                               "<strong>‚ùóÔ∏èFailed to start the mailing: no emails added</strong>",
                                               parse_mode='HTML')
                    else:
                        await bot.send_message(user_id,
                                               "<strong>‚ùóÔ∏èFailed to start the mailing: not enough beats to send</strong>",
                                               parse_mode='HTML')
                else:
                    if not all_emails:
                        await bot.send_message(user_id,
                                               "<strong>‚ùóÔ∏è–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É: –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –ø–æ—á—Ç—ã</strong>",
                                               parse_mode='HTML')
                    else:
                        await bot.send_message(user_id,
                                               "<strong>‚ùóÔ∏è–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –±–∏—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏</strong>",
                                               parse_mode='HTML')
        await session.commit()


async def reset_one_time_settings(group_id: int):
    async with async_session() as session:
        one_time_result = await session.execute(select(OneTimeSettings).where(OneTimeSettings.group_id == group_id))
        one_time_settings = one_time_result.scalars().first()
        if not one_time_settings:
            return

        one_time_settings.subject = "–ë–µ–∑ —Ç–µ–º—ã"
        one_time_settings.message = "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞"
        one_time_settings.quantity_beat = False
        one_time_settings.on_of_auto = False

        await session.commit()



async def send_email_extra(user_email, user_password, receiver_emails, subject, message_text, beats, bot, user_id=None):
    msg = MIMEMultipart()
    msg['From'] = user_email
    msg['Subject'] = subject
    msg.attach(MIMEText(message_text, 'plain', "UTF-8"))

    ssl_context = ssl.create_default_context()
    ssl_context.check_hostname = False
    ssl_context.verify_mode = ssl.CERT_NONE

    total_size = 0 

    attached_beats = []

    for beat in beats:
        file_id = beat.get("file_id")
        file_name = beat.get("file_name", f"{file_id}.mp3")

        if not file_id:
            print(f"–ë–∏—Ç –±–µ–∑ file_id, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {beat}")
            continue

        try:
            file_info = await bot.get_file(file_id)
            file_path = f"https://api.telegram.org/file/bot{bot.token}/{file_info.file_path}"

            async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=ssl_context)) as session:
                async with session.get(file_path) as resp:
                    if resp.status == 200:
                        file_data = await resp.read()
                        file_size = len(file_data)

                        if total_size + file_size > 25 * 1024 * 1024:
                            print(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç 25 –ú–ë, –±–∏—Ç {file_name} –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
                            continue  

                        total_size += file_size
                        part = MIMEBase('audio', 'mp3')
                        part.set_payload(file_data)
                        encoders.encode_base64(part)
                        filename = encode_rfc2231(file_name, 'utf-8')
                        part.add_header('Content-Disposition', f'attachment; filename*={filename}')
                        msg.attach(part)
                        attached_beats.append(file_name)
                    else:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_id}: {resp.status}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_id}: {e}")
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
    try:
        with smtplib.SMTP('smtp.gmail.com', 587) as server:
            server.starttls()
            server.login(user_email, user_password)
            server.sendmail(user_email, receiver_emails, msg.as_string())
        print(f"–ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–∫—Ä—ã—Ç–æ–π –∫–æ–ø–∏–µ–π –Ω–∞ {', '.join(receiver_emails)}")
        return True

    except smtplib.SMTPAuthenticationError as e:
        error_msg = str(e)
        if user.language == 2:
            reason = "‚ùå Error: incorrect Gmail or app password." if "Username and Password not accepted" in error_msg else f"‚ùå Authorization error: {error_msg}"
        else:
            reason = "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Gmail –∏–ª–∏ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è." if "Username and Password not accepted" in error_msg else f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {error_msg}"
    except smtplib.SMTPRecipientsRefused:
        if user.language == 2:
            reason = "‚ùå Error: all recipients were rejected. Please check the email addresses."
        else:
            reason = "‚ùå –û—à–∏–±–∫–∞: –≤—Å–µ –∞–¥—Ä–µ—Å–∞—Ç—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å email-–∞–¥—Ä–µ—Å–æ–≤."

    except smtplib.SMTPException as e:
        if user.language == 2:
            reason = f"‚ùå SMTP error: {str(e)}"
        else:
            reason = f"‚ùå –û—à–∏–±–∫–∞ SMTP: {str(e)}"

    except Exception as e:
        if user.language == 2:
            reason = f"‚ùå Unknown error: {str(e)}"
        else:
            reason = f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"

    print(reason)
    if bot and user_id:
        await bot.send_message(user_id, reason)
    return False



#–ï–∫—Å—Ç—Ä–∞

@rt.callback_query(F.data == 'extra')
async def extra_handler(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user and not user.block:
            if user.extra_mail > 0:
                await call.answer('Extra')

                user_data = await state.get_data()
                if 'emails' in user_data or 'beats' in user_data:
                    await send_finish_beats_message_call(call, state)
                else:
                    await state.update_data(emails=[], beats=[], subject='', text='')
                    await send_finish_beats_message_call(call, state)
            else:
                if user.language == 2:
                    await call.answer('‚ùóÔ∏è Limit reached 50/50', show_alert=True)
                else:
                    await call.answer('‚ùóÔ∏è–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ 50/50', show_alert=True)
        else:
            await call.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.message(FSMEmail.awaiting_email)
async def handle_extra_emails(msg: Message, state: FSMContext):
    user_id = msg.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            if user.block:
                try:
                    await msg.delete()
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                email_pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}'
                new_emails = [email.lower() for email in re.findall(email_pattern, msg.text)]

                data = await state.get_data()
                temp_emails = set(data.get("temp_emails", []))
                temp_emails.update(new_emails)
                await state.update_data(temp_emails=list(temp_emails))
@rt.callback_query(F.data == 'confirm_add_emails')
async def confirm_add_emails(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            data = await state.get_data()
            temp_emails = list(set(data.get("temp_emails", [])))  
            current_emails = set(data.get("emails", []))

            MAX_EMAILS = 50
            already_have = len(current_emails)
            available_slots = max(0, MAX_EMAILS - already_have)

            emails_to_add = temp_emails[:available_slots]
            remaining_unadded = temp_emails[available_slots:]

            total_emails = len(current_emails) + len(emails_to_add)

            if total_emails > user.extra_mail:
                if user.language == 2:
                    await call.answer(
                        f"‚ùóÔ∏èYou reached the limit {total_emails}/{user.extra_mail}", show_alert=True
                    )
                else:
                    await call.answer(
                        f"‚ùóÔ∏è–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ {total_emails}/{user.extra_mail}", show_alert=True
                    )
                return

            current_emails.update(emails_to_add)

            await state.update_data(emails=list(current_emails), temp_emails=[])  

            if user.language == 2:
                await call.message.answer(f"‚úÖ <strong>{len(emails_to_add)} addresses added</strong>", parse_mode='HTML')
            else:
                await call.message.answer(f"‚úÖ <strong>–î–æ–±–∞–≤–ª–µ–Ω–æ {len(emails_to_add)} –ø–æ—á—Ç</strong>", parse_mode='HTML')

            if remaining_unadded:
                MAX_DISPLAY = 100
                not_added_list = list(remaining_unadded)
                display_part = "\n".join(not_added_list[:MAX_DISPLAY])
                extra_count = len(not_added_list) - MAX_DISPLAY

                if user.language == 2:
                    msg = f"<strong>‚ùóÔ∏èNOT ADDED:</strong>\n\n{display_part}"
                    if extra_count > 0:
                        msg += f"\n<strong>... and {extra_count} more</strong>"
                else:
                    msg = f"<strong>‚ùóÔ∏è–ù–ï –ë–´–õ–ò –î–û–ë–ê–í–õ–ï–ù–´:</strong>\n\n{display_part}"
                    if extra_count > 0:
                        msg += f"\n<strong>... –∏ –µ—â–µ {extra_count}</strong>"

                await call.message.answer(msg, parse_mode='HTML')

            await send_finish_beats_message(call.message, state, user_id=user_id)
        else:
            await call.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}", show_alert=True)
@rt.message(FSMEmail.awaiting_beats)
async def handle_extra_beats(msg: Message, state: FSMContext):
    user_id = msg.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            if user.block:  
                try:
                    await msg.delete()  
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                if not (msg.audio or msg.document):
                    return

                file = msg.audio or msg.document
                file_format = file.file_name.split('.')[-1].lower() if file.file_name else ''

                if file_format not in ['mp3', 'wav']:
                    return

                data = await state.get_data()
                current_beats = data.get("beats", [])
                if not isinstance(current_beats, list):
                    current_beats = []

                new_beat = {
                    "file_id": file.file_id,
                    "file_name": file.file_name,
                    "file_format": file_format
                }

                if not any(b.get("file_id") == file.file_id for b in current_beats):
                    current_beats.append(new_beat)
                    await state.update_data(beats=current_beats)
@rt.callback_query(F.data == "finish_beats_extra", FSMEmail.awaiting_beats)
async def view_beats_extra_after_add(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            data = await state.get_data()
            beats = data.get("beats", [])


            await send_finish_beats_message(callback.message, state, user_id)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
async def finish_beats_by_button(call: CallbackQuery, state: FSMContext):
    await call.answer()

    user_id = call.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            async with async_session() as session:
                result = await session.execute(select(User).filter(User.user_id == user_id))
                user = result.scalar_one_or_none()

                if not user or user.block:
                    return

            user_data = await state.get_data()
            emails = user_data.get('emails', [])
            beats = user_data.get('beats', [])
            subject = user_data.get('subject', '')
            text = user_data.get('text', '')

            keyboard_buttons = []

            if beats:
                for beat in beats:
                    keyboard_buttons.append([
                        InlineKeyboardButton(text=beat["file_name"], callback_data="noop")
                    ])
            if user.language == 2:
                keyboard_buttons.extend([
                    [InlineKeyboardButton(text="üìã Email Subject", callback_data="change_subject_extra"),
                     InlineKeyboardButton(text="üìÑ Email Body", callback_data="change_text_extra")],
                    [InlineKeyboardButton(text="‚úâÔ∏è Emails", callback_data="view_emails_extra"),
                     InlineKeyboardButton(text="üéπ Beats", callback_data="view_beats_extra")],
                    [InlineKeyboardButton(text="üì® Send", callback_data="send_email_extra")]
                ])

            else:
                keyboard_buttons.extend([
                    [InlineKeyboardButton(text="üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞", callback_data="change_subject_extra"),
                     InlineKeyboardButton(text="üìÑ –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞", callback_data="change_text_extra")],
                    [InlineKeyboardButton(text="‚úâÔ∏è –ü–æ—á—Ç—ã", callback_data="view_emails_extra"),
                     InlineKeyboardButton(text="üéπ –ë–∏—Ç—ã", callback_data="view_beats_extra")],
                    [InlineKeyboardButton(text="üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send_email_extra")]
                ])

            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

            def escape(text):
                return text.replace('.', '\\.').replace('-', '\\-').replace('_', '\\_') \
                    .replace('!', '\\!').replace('(', '\\(').replace(')', '\\)')

            if user.language == 2:
                subject_display = f"\n{format_as_quote(subject)}\n" if subject else "__not set__"
                text_display = f"\n{format_as_quote(text)}\n" if text else "__not set__"
                emails_display = ', '.join(escape(email) for email in emails) if emails else "__not specified__"
            else:
                subject_display = f"\n{format_as_quote(subject)}\n" if subject else "__–Ω–µ –∑–∞–¥–∞–Ω–æ__"
                text_display = f"\n{format_as_quote(text)}\n" if text else "__–Ω–µ –∑–∞–¥–∞–Ω–æ__"
                emails_display = ', '.join(escape(email) for email in emails) if emails else "__–Ω–µ —É–∫–∞–∑–∞–Ω–æ__"

            if user.language == 2:
                await call.message.answer(
                    f"*Current email parameters:*\n\n"
                    f"*üìã Subject:* {subject_display}\n\n"
                    f"*üìÑ Body:* {text_display}\n\n"
                    f"*üìÆ Recipients:* {emails_display}\n‚Äî‚Äî‚Äî\n\n"
                    f"‚öôÔ∏è *Choose the settings you want to change using the buttons below:*",
                    reply_markup=keyboard,
                    parse_mode='MarkdownV2'
                )
            else:
                await call.message.answer(
                    f"*–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∏—Å—å–º–∞:*\n\n"
                    f"*üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞:* {subject_display}\n\n"
                    f"*üìÑ –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:* {text_display}\n\n"
                    f"*üìÆ –ö–æ–º—É:* {emails_display}\n‚Äî‚Äî‚Äî\n\n"
                    f"‚öôÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:*",
                    reply_markup=keyboard,
                    parse_mode='MarkdownV2'
                )
async def send_finish_beats_message_call(callback, state):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            user_data = await state.get_data()
            emails = user_data.get('emails', [])
            beats = user_data.get('beats', [])
            subject = user_data.get('subject', '')
            text = user_data.get('text', '')

            keyboard_buttons = []

            if beats:
                for beat in beats:
                    keyboard_buttons.append([
                        InlineKeyboardButton(text=beat["file_name"], callback_data="noop")
                    ])

            if user.language == 2:
                keyboard_buttons.extend([
                    [InlineKeyboardButton(text="üìã Email subject", callback_data="change_subject_extra"),
                     InlineKeyboardButton(text="üìÑ Email body", callback_data="change_text_extra")],
                    [InlineKeyboardButton(text="‚úâÔ∏è Emails", callback_data="view_emails_extra"),
                     InlineKeyboardButton(text="üéπ Beats", callback_data="view_beats_extra")],
                    [InlineKeyboardButton(text="üì® Send", callback_data="send_email_extra")]
                ])

            else:
                keyboard_buttons.extend([
                    [InlineKeyboardButton(text="üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞", callback_data="change_subject_extra"),
                     InlineKeyboardButton(text="üìÑ –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞", callback_data="change_text_extra")],
                    [InlineKeyboardButton(text="‚úâÔ∏è –ü–æ—á—Ç—ã", callback_data="view_emails_extra"),
                     InlineKeyboardButton(text="üéπ –ë–∏—Ç—ã", callback_data="view_beats_extra")],
                    [InlineKeyboardButton(text="üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send_email_extra")]
                ])

            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

            def escape(text):
                return text.replace('.', '\\.').replace('-', '\\-').replace('_', '\\_') \
                           .replace('!', '\\!').replace('(', '\\(').replace(')', '\\)')

            if user.language == 2:
                subject_display = f"\n{format_as_quote(subject)}\n" if subject else "__not set__"
                text_display = f"\n{format_as_quote(text)}\n" if text else "__not set__"
                emails_display = ', '.join(escape(email) for email in emails) if emails else "__not set__"
            else:
                subject_display = f"\n{format_as_quote(subject)}\n" if subject else "__–Ω–µ –∑–∞–¥–∞–Ω–æ__"
                text_display = f"\n{format_as_quote(text)}\n" if text else "__–Ω–µ –∑–∞–¥–∞–Ω–æ__"
                emails_display = ', '.join(escape(email) for email in emails) if emails else "__–Ω–µ —É–∫–∞–∑–∞–Ω–æ__"

            if user.language == 2:
                await callback.message.answer(
                    f"*Current email parameters:*\n\n"
                    f"*üìã Subject:* {subject_display}\n\n"
                    f"*üìÑ Body:* {text_display}\n\n"
                    f"*üìÆ Recipients:* {emails_display}\n‚Äî‚Äî‚Äî\n\n"
                    f"‚öôÔ∏è *Choose the settings you want to change using the buttons below:*",
                    reply_markup=keyboard,
                    parse_mode='MarkdownV2'
                )
            else:
                await callback.message.answer(
                    f"*–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∏—Å—å–º–∞:*\n\n"
                    f"*üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞:* {subject_display}\n\n"
                    f"*üìÑ –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:* {text_display}\n\n"
                    f"*üìÆ –ö–æ–º—É:* {emails_display}\n‚Äî‚Äî‚Äî\n\n"
                    f"‚öôÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:*",
                    reply_markup=keyboard,
                    parse_mode='MarkdownV2'
                )
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
async def send_finish_beats_message(message, state, user_id: int = 0):

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            if user.block:  
                try:
                    await message.delete()  
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                user_data = await state.get_data()
                emails = user_data.get('emails', [])
                beats = user_data.get('beats', [])
                subject = user_data.get('subject', '')
                text = user_data.get('text', '')

                keyboard_buttons = []

                if beats:
                    for beat in beats:
                        keyboard_buttons.append([
                            InlineKeyboardButton(text=beat["file_name"], callback_data="noop")
                        ])

                if user.language == 2:
                    keyboard_buttons.extend([
                        [InlineKeyboardButton(text="üìã Email subject", callback_data="change_subject_extra"),
                         InlineKeyboardButton(text="üìÑ Email body", callback_data="change_text_extra")],
                        [InlineKeyboardButton(text="‚úâÔ∏è Emails", callback_data="view_emails_extra"),
                         InlineKeyboardButton(text="üéπ Beats", callback_data="view_beats_extra")],
                        [InlineKeyboardButton(text="üì® Send", callback_data="send_email_extra")]
                    ])

                else:
                    keyboard_buttons.extend([
                        [InlineKeyboardButton(text="üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞", callback_data="change_subject_extra"),
                         InlineKeyboardButton(text="üìÑ –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞", callback_data="change_text_extra")],
                        [InlineKeyboardButton(text="‚úâÔ∏è –ü–æ—á—Ç—ã", callback_data="view_emails_extra"),
                         InlineKeyboardButton(text="üéπ –ë–∏—Ç—ã", callback_data="view_beats_extra")],
                        [InlineKeyboardButton(text="üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send_email_extra")]
                    ])

                keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

                def escape(text):
                    return text.replace('.', '\\.').replace('-', '\\-').replace('_', '\\_') \
                               .replace('!', '\\!').replace('(', '\\(').replace(')', '\\)')

                if user.language == 2:
                    subject_display = f"\n{format_as_quote(subject)}\n" if subject else "__not set__"
                    text_display = f"\n{format_as_quote(text)}\n" if text else "__not set__"
                    emails_display = ', '.join(escape(email) for email in emails) if emails else "__not set__"
                else:
                    subject_display = f"\n{format_as_quote(subject)}\n" if subject else "__–Ω–µ –∑–∞–¥–∞–Ω–æ__"
                    text_display = f"\n{format_as_quote(text)}\n" if text else "__–Ω–µ –∑–∞–¥–∞–Ω–æ__"
                    emails_display = ', '.join(escape(email) for email in emails) if emails else "__–Ω–µ —É–∫–∞–∑–∞–Ω–æ__"

                if user.language == 2:
                    await message.answer(
                        f"*Current email parameters:*\n\n"
                        f"*üìã Subject:* {subject_display}\n\n"
                        f"*üìÑ Body:* {text_display}\n\n"
                        f"*üìÆ Recipients:* {emails_display}\n‚Äî‚Äî‚Äî\n\n"
                        f"‚öôÔ∏è *Choose the settings you want to change using the buttons below:*",
                        reply_markup=keyboard,
                        parse_mode='MarkdownV2'
                    )
                else:
                    await message.answer(
                        f"*–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∏—Å—å–º–∞:*\n\n"
                        f"*üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞:* {subject_display}\n\n"
                        f"*üìÑ –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:* {text_display}\n\n"
                        f"*üìÆ –ö–æ–º—É:* {emails_display}\n‚Äî‚Äî‚Äî\n\n"
                        f"‚öôÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:*",
                        reply_markup=keyboard,
                        parse_mode='MarkdownV2'
                    )
@rt.callback_query(F.data.startswith('view_emails_extra'))
async def view_emails_extra(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            data = await state.get_data()
            emails = data.get("emails", [])

            if user.language == 2:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üóë Delete", callback_data="delete_mail_extra"),
                     InlineKeyboardButton(text="üì© Add", callback_data="add_mail_extra")],
                    [InlineKeyboardButton(text="‚Ü©Ô∏è Back", callback_data="cancel_delete_beats")]
                ])

                await callback.message.edit_text(
                    f"<strong>Choose an action with emails using the buttons below:</strong>",
                    parse_mode='HTML',
                    reply_markup=keyboard
                )

            else:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data="delete_mail_extra"),
                     InlineKeyboardButton(text="üì© –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="add_mail_extra")],
                    [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="cancel_delete_beats")]
                ])


                await callback.message.edit_text(
                    f"<strong>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ—á—Ç–∞–º–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:</strong>",
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
async def show_emails_extra(message: Message, state: FSMContext):
    user_id = message.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            if user.block:  
                try:
                    await message.delete()  
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                data = await state.get_data()
                emails = data.get("emails", [])

                if user.language == 2:
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üóë Delete", callback_data="delete_mail_extra"),
                         InlineKeyboardButton(text="üì© Add", callback_data="add_mail_extra")],
                        [InlineKeyboardButton(text="‚Ü©Ô∏è Back", callback_data="cancel_delete_beats")]
                    ])

                    await message.answer(
                        f"<strong>Choose an action with emails using the buttons below:</strong>",
                        parse_mode='HTML',
                        reply_markup=keyboard
                    )

                else:
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data="delete_mail_extra"),
                         InlineKeyboardButton(text="üì© –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="add_mail_extra")],
                        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="cancel_delete_beats")]
                    ])

                    await message.answer(
                        f"<strong>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ—á—Ç–∞–º–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:</strong>",
                        parse_mode='HTML',
                        reply_markup=keyboard
                    )
@rt.callback_query(F.data.startswith("view_beats_extra"))
async def view_beats_extra(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            data = await state.get_data()
            beats = data.get("beats", [])

            if user.language == 2:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üóë Delete", callback_data="delete_beatsextra"),
                     InlineKeyboardButton(text="‚ûï Add", callback_data="add_beat_extra")],
                    [InlineKeyboardButton(text="‚Ü©Ô∏è Back", callback_data="cancel_delete_beats")]
                ])

                await callback.message.edit_text(
                    f"<strong>Choose an action with beats using the buttons below:</strong>",
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
            else:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data="delete_beatsextra"),
                     InlineKeyboardButton(text="‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="add_beat_extra")],
                    [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="cancel_delete_beats")]
                ])

                await callback.message.edit_text(
                    f"<strong>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –±–∏—Ç–∞–º–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:</strong>",
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == 'delete_beatsextra')
async def delete_beats_menu(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            user_data = await state.get_data()
            beats = user_data.get("beats", [])

            if not beats:
                if user.language == 2:
                    await call.answer("‚ùóÔ∏èDatabase is empty", show_alert=True)
                else:
                    await call.answer("‚ùóÔ∏è–ë–∞–∑–∞ –ø—É—Å—Ç–∞", show_alert=True)
                return
            if user.language == 2:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                                                   [InlineKeyboardButton(text=beat["file_name"],
                                                                                         callback_data=f"delete_beatidx:{i}")]
                                                                   for i, beat in enumerate(beats)
                                                               ] + [[InlineKeyboardButton(text="‚Ü©Ô∏è Back",
                                                                                          callback_data="back_to_beats_extra")]])
                await call.answer('üóë Delete beats')
                await call.message.edit_text("üî¥ <strong>Select the beats you want to delete</strong>",
                                             parse_mode='HTML', reply_markup=keyboard)
            else:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text=beat["file_name"], callback_data=f"delete_beatidx:{i}")]
                    for i, beat in enumerate(beats)
                ] + [[InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_beats_extra")]])
                await call.answer('üóë –£–¥–∞–ª–∏—Ç—å –±–∏—Ç—ã')
                await call.message.edit_text("üî¥ <strong>–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å</strong>", parse_mode='HTML', reply_markup=keyboard)
        else:
            await call.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data.startswith("delete_beatidx:"))
async def delete_single_beat(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            index = int(call.data.split(":")[1])
            data = await state.get_data()
            beats = data.get("beats", [])
            if user.language == 2:
                if 0 <= index < len(beats):
                    removed = beats.pop(index)
                    await state.update_data(beats=beats)
                    await call.answer("‚úÖ Beat deleted")
                else:
                    await call.answer("‚ö†Ô∏è Deletion error", show_alert=True)

            else:
                if 0 <= index < len(beats):
                    removed = beats.pop(index)
                    await state.update_data(beats=beats)
                    await call.answer(f"‚úÖ –ë–∏—Ç —É–¥–∞–ª–µ–Ω")
                else:
                    await call.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)

            await delete_beats_menu(call, state)
        else:
            await call.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == 'cancel_delete_beats')
async def cancel_delete_beats(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await call.answer('‚Ü©Ô∏è Back')
            else:
                await call.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
            await send_finish_beats_message_call(call, state)
        else:
            await call.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == 'add_beat_extra')
async def add_beats(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await call.answer('üéµ Add beats')
                await call.message.edit_text("<strong>Send the beats you want to add</strong>", parse_mode='HTML',
                                             reply_markup=InlineKeyboardMarkup(
                                                 inline_keyboard=[
                                                     [InlineKeyboardButton(text="‚úÖ Ready",
                                                                           callback_data="finish_beats_extra")],
                                                     [InlineKeyboardButton(text='‚Ü©Ô∏è Back',
                                                                           callback_data='back_to_beats_extra')]
                                                 ]
                                             ))
            else:
                await call.answer('üéµ –î–æ–±–∞–≤–∏—Ç—å –±–∏—Ç—ã')
                await call.message.edit_text("<strong>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–∏—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å</strong>", parse_mode='HTML',
                                     reply_markup=InlineKeyboardMarkup(
                                         inline_keyboard=[
                                             [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ",
                                                                   callback_data="finish_beats_extra")],
                                             [InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_to_beats_extra')]
                                         ]
                                     ))
            await state.set_state(FSMEmail.awaiting_beats)
        else:
            await call.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == 'change_subject_extra')
async def change_subject(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await call.answer('üìã Email subject')
                await call.message.edit_text("<strong>Enter the email subject</strong>", parse_mode='HTML',
                                             reply_markup=kb.back_to_extra_text_subject_eng)
            else:
                await call.answer('üìã –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫')
                await call.message.edit_text("<strong>–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞</strong>", parse_mode='HTML',reply_markup=kb.back_to_extra_text_subject)
            await state.set_state(FSMEmail.awaiting_subject)
        else:
            await call.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(FSMEmail.awaiting_subject, F.data == 'without_title_text_extra')
async def without_subject(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            await state.update_data(subject="")  
            if user.language == 2:
                await callback.message.edit_text('‚úÖ <strong>Email subject updated</strong>', parse_mode='HTML')
            else:
                await callback.message.edit_text('‚úÖ <strong>–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω</strong>', parse_mode='HTML')
            await send_finish_beats_message(callback.message, state, user_id=user_id)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.message(FSMEmail.awaiting_subject)
async def process_subject(message: Message, state: FSMContext):
    user_id = message.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            if user.block:  
                try:
                    await message.delete()  
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                await state.update_data(subject=message.text)
                if user.language == 2:
                    await message.answer('‚úÖ <strong>Email subject updated</strong>', parse_mode='HTML')
                else:
                    await message.answer('‚úÖ <strong>–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω</strong>', parse_mode='HTML')
                await send_finish_beats_message(message, state, user_id=user_id)
@rt.callback_query(F.data == 'change_text_extra')
async def change_text(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await call.answer('üìÑ Email body')
                await call.message.edit_text("<strong>Enter the email body</strong>", parse_mode='HTML',
                                             reply_markup=kb.back_to_extra_text_eng)
            else:
                await call.answer('üìÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç')
                await call.message.edit_text("<strong>–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞</strong>", parse_mode='HTML', reply_markup=kb.back_to_extra_text)
            await state.set_state(FSMEmail.awaiting_text)
        else:
            await call.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(FSMEmail.awaiting_text, F.data == 'without_title_text_extra')
async def without_subject(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            await state.update_data(text="") 
            if user.language == 2:
                await callback.message.edit_text('‚úÖ <strong>Email body updated</strong>', parse_mode='HTML')
            else:
                await callback.message.edit_text('‚úÖ <strong>–¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω</strong>', parse_mode='HTML')
            await send_finish_beats_message(callback.message, state, user_id=user_id)
        else:
            await callback.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.message(FSMEmail.awaiting_text)
async def process_text(message: Message, state: FSMContext):
    user_id = message.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            if user.block:  
                try:
                    await message.delete()  
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                await state.update_data(text=message.text)
                if user.language == 2:
                    await message.answer('‚úÖ <strong>Email body updated</strong>', parse_mode='HTML')
                else:
                    await message.answer('‚úÖ <strong>–¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω</strong>', parse_mode='HTML')
                await send_finish_beats_message(message, state, user_id=user_id)
@rt.callback_query(F.data == 'add_mail_extra')
async def change_emails(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            user_data = await state.get_data()
            emails = user_data.get('emails', [])
            if user.language == 2:
                if len(emails) >= user.extra_mail:
                    if user.language == 2:
                        await call.answer(
                            f"‚ùóÔ∏èYou reached the limit {len(emails)}/{user.extra_mail}", show_alert=True
                        )
                    else:
                        await call.answer(
                            f"‚ùóÔ∏è–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ {len(emails)}/{user.extra_mail}", show_alert=True
                        )
                    return
                await call.answer('üì® Change emails')
                await call.message.edit_text("<strong>Send the emails you want to add</strong>", parse_mode='HTML',
                                             reply_markup=kb.confirm_email_keyboard_eng())
            else:
                if emails >= user.extra_mail:
                    if user.language == 2:
                        await call.answer(
                            f"‚ùóÔ∏èYou reached the limit {emails}/{user.extra_mail}", show_alert=True
                        )
                    else:
                        await call.answer(
                            f"‚ùóÔ∏è–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ {emails}/{user.extra_mail}", show_alert=True
                        )
                    return
                await call.answer('üì® –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—á—Ç—ã')
                await call.message.edit_text("<strong>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—á—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å</strong>", parse_mode='HTML', reply_markup=kb.confirm_email_keyboard())
            await state.set_state(FSMEmail.awaiting_email)
        else:
            await call.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == 'delete_mail_extra')
async def ask_emails_to_delete(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            data = await state.get_data()
            emails = data.get("emails", [])
            if user.language == 2:
                if not emails:
                    await call.answer("‚ùóÔ∏èDatabase is empty", show_alert=True)
                    return
                await call.answer("üóë Delete")
                await call.message.edit_text("<strong>Send the addresses you want to delete ‚Äî each on a new line or separated by commas</strong>",
                                              reply_markup=kb.back_to_mail_extra_eng, parse_mode='HTML')
            else:
                if not emails:
                    await call.answer("‚ùóÔ∏è–ë–∞–∑–∞ –ø—É—Å—Ç–∞", show_alert=True)
                    return
                await call.answer("üóë –£–¥–∞–ª–∏—Ç—å")
                await call.message.edit_text("<strong>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—á—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ‚Äî –∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é</strong>",
                                              reply_markup=kb.back_to_mail_extra, parse_mode='HTML')
            await state.set_state(FSMEmail.deleting_emails)
        else:
            await call.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.message(FSMEmail.deleting_emails)
async def process_emails_to_delete(msg: Message, state: FSMContext):
    user_id = msg.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            if user.block:  
                try:
                    await msg.delete()  
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                user_input = msg.text
                user_id = msg.from_user.id

                split_emails = re.split(r'[\s,]+', user_input.strip())
                to_delete = set(email.lower() for email in split_emails if '@' in email)

                data = await state.get_data()
                current_emails = set(data.get("emails", []))

                before = len(current_emails)
                current_emails.difference_update(to_delete)
                after = len(current_emails)
                removed_count = before - after

                await state.update_data(emails=list(current_emails))

                if removed_count > 0:
                    if user.language == 2:
                        await msg.answer(f"‚úÖ <strong>{removed_count} addresses deleted</strong>", parse_mode='HTML')
                    else:
                        await msg.answer(f"‚úÖ <strong>–£–¥–∞–ª–µ–Ω–æ {removed_count} –ø–æ—á—Ç</strong>", parse_mode='HTML')


                await show_emails_extra(msg, state)
                await state.clear()
@rt.callback_query(F.data == 'send_email_extra')
async def send_email_handler(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            async with async_session() as session:
                user = await session.scalar(select(User).where(User.user_id == user_id))

                if not user or not user.gmail or not user.password:
                    if user.language == 2:
                        await call.answer("‚ùå Error: your Gmail account is not linked or tokens have expired.",
                                          show_alert=True)
                    else:
                        await call.answer("‚ùå –û—à–∏–±–∫–∞: –≤–∞—à Gmail-–∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∏–ª–∏ —Ç–æ–∫–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–ª–∏.", show_alert=True)
                    return

            user_data = await state.get_data()
            emails = user_data.get('emails', [])
            beats = user_data.get('beats', [])
            subject = user_data.get('subject', '')
            text = user_data.get('text', '')

            if not emails:
                if user.language == 2:
                    await call.answer("‚ùóÔ∏èYou did not add any emails", show_alert=True)
                else:
                    await call.answer("‚ùóÔ∏è–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –ø–æ—á—Ç—ã", show_alert=True)
                return

            if not beats:
                if user.language == 2:
                    await call.answer("‚ùóÔ∏èYou did not add any beats", show_alert=True)
                else:
                    await call.answer("‚ùóÔ∏è–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –±–∏—Ç—ã", show_alert=True)
                return

            success = await send_email_extra(
                user.gmail, user.password, emails, subject, text, beats, call.bot, user_id = user_id
            )

            if user.language == 2:
                if success:
                    await call.message.answer("‚úÖ Email sent successfully!")
                    user.extra_mail -= len(emails)
                    await session.commit()
                else:
                    await call.answer("‚ùå Error sending email. Please check the settings.", show_alert=True)
            else:
                if success:
                    await call.message.answer("‚úÖ –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                    user.extra_mail -= len(emails)
                    await session.commit()
                else:
                    await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", show_alert=True)
        else:
            await call.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == 'back_to_beats_extra')
async def back_to_beats_extra(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await call.answer('‚Ü©Ô∏è Back')
            else:
                await call.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
            await view_beats_extra(call, state)
        else:
            await call.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)
@rt.callback_query(F.data == 'back_to_mail_extra')
async def back_to_mail_extra(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if user and not user.block:
            if user.language == 2:
                await call.answer('‚Ü©Ô∏è Back')
            else:
                await call.answer('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
            await view_emails_extra(call, state)
        else:
            await call.answer(f"{'‚ùóÔ∏è–ù–ï–î–û–°–¢–£–ü–ù–û' if user.language != 2 else '‚ùóÔ∏èNOT AVAILABLE'}"
, show_alert=True)

#–±–ª–æ–∫ –∫–Ω–æ–ø–∫–∏

@rt.message(F.from_user.id)
async def check_and_delete_message(message: Message):
    user_id = message.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if user and user.block:
            if message.text not in ['üë®‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'üë®‚Äçüíª Support', 'üåê –Ø–∑—ã–∫', 'üåê Language']:   
                try:
                    await message.delete()
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

@rt.callback_query(F.data == 'go_2_free')
async def go_2_free(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.user_id == user_id))
        user = result.scalar_one_or_none()
    if user.language == 2:
        await callback.answer('üíæ Continue with free plan')
        await callback.message.edit_text('<strong>‚ö†Ô∏è No turning back.</strong>\n\n'
                                         'When switching to the free subscription, only emails '
                                         'from the group with the largest number of addresses will remain in the database.\n'
                                         'All emails within that group exceeding the 50-address limit (added earlier) '
                                         'will be automatically deleted.\n\n'
                                         '<strong>Make sure to back up important data in advance.</strong>',
                                         parse_mode='HTML', reply_markup=kb.end_sub_confirmation_eng)
    else:
        await callback.answer('üíæ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π')
        await callback.message.edit_text('<strong>‚ö†Ô∏è –ü—É—Ç–∏ –Ω–∞–∑–∞–¥ –Ω–µ—Ç.</strong>\n\n'
                                         '–ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—á—Ç—ã'
                                         ' –∏–∑ –≥—Ä—É–ø–ø—ã —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞–¥—Ä–µ—Å–æ–≤.\n'
                                         '–í—Å–µ –ø–æ—á—Ç—ã –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã, –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ –ª–∏–º–∏—Ç –≤ 50 –∞–¥—Ä–µ—Å–æ–≤ (–¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞–Ω—å—à–µ),'
                                         ' ‚Äî –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã.\n\n'
                                         '<strong>–ü–æ–∑–∞–±–æ—Ç—å—Ç–µ—Å—å –æ —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞—Ä–∞–Ω–µ–µ.</strong>',
                                         parse_mode='HTML', reply_markup=kb.end_sub_confirmation)

@rt.callback_query(F.data == 'agree_to_free_sub')
async def agree_to_free_sub(callback: CallbackQuery):
    user_id = callback.from_user.id

    async with async_session() as session:
        result = await session.execute(
            select(User)
            .options(
                selectinload(User.groups)
                .selectinload(Group.emails),
                selectinload(User.groups)
                .selectinload(Group.beats),
                selectinload(User.groups)
                .selectinload(Group.settings)
            )
            .where(User.user_id == user_id)
        )
        user: User = result.scalar_one_or_none()
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        user.subscription = 'free'

        groups = user.groups
        if not groups:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø", show_alert=True)
            return

        max_group = max(groups, key=lambda g: len(g.emails) if g.emails else 0)

        for group in groups:
            if group.id != max_group.id:
                if group.settings:
                    await session.delete(group.settings)
                await session.delete(group)

        if max_group.emails:
            max_group.emails.sort(key=lambda e: e.id, reverse=True)
            for email in max_group.emails[50:]:
                await session.delete(email)

        if max_group.beats:
            max_group.beats.sort(key=lambda b: b.id, reverse=True)
            for beat in max_group.beats[20:]:
                await session.delete(beat)

        max_group.active = True
        user.block = False

        if user.language == 2:
            await callback.message.edit_text(
                "‚úÖ You have successfully switched to the free subscription.",
                reply_markup=kb.in_main_menu_eng
            )
    
        else:
            await callback.message.edit_text(
                "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É.",
                reply_markup=kb.in_main_menu
            )
        await session.commit()
